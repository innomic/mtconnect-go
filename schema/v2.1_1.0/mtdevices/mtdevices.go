// Code generated by xgen. DO NOT EDIT.

package mtdevices

// MTConnectDevices is root entity of an {{term(MTConnectDevices Response Document)}} that
//         contains the {{term(Device Information Model)}} of one or more
//         {{block(Device)}} entities.
//         ![MTConnectDevices](figures/MTConnectDevices.png
//         "MTConnectDevices"){: width="0.8"} > Note:
//         Additional properties of {{block(MTConnectDevices)}} **MAY** be defined
//         for schema and namespace declaration. See {{sect(Schema and Namespace
//         Declaration Information)}} for an {{term(XML)}} example.
type MTConnectDevices *MTConnectDevicesType

// SenderType is The sender of the message
type SenderType string

// CreationTimeType is The date and time the document was created
type CreationTimeType string

// SequenceType is A sequence number
type SequenceType int

// TestIndicatorType is A debugging flag for testing.
type TestIndicatorType bool

// InstanceIdType is The instance number of the agent, used for fault tolerance
type InstanceIdType int

// BufferSizeType is The size of the agents buffer
type BufferSizeType int

// TimestampType is The time the sample was reported
type TimestampType string

// OccurrenceTimeType is The time a sample occurred
type OccurrenceTimeType string

// VersionType is A version number
type VersionType string

// NameType is A short name for any element
type NameType string

// UuidType is A universally unique id that uniquely identifies the element for
//         it's entire life
type UuidType string

// SerialNumberAttrType is A serial number for a piece of equipment
type SerialNumberAttrType string

// ItemSourceType is The measurement source
type ItemSourceType string

// RateType is A sample rate in milliseconds per sample
type RateType float32

// ComponentIdType is The id of the component (maps to the id from probe)
type ComponentIdType string

// IDType is An identifier
type IDType string

// SignificantDigitsValueType is The number significant digits
type SignificantDigitsValueType int

// CompositionIdType is The item's reference to the Device model composition
type CompositionIdType string

// DurationTimeType is A length of time in seconds
type DurationTimeType float32

// RemovedType is A flag indicating the item has been removed
type RemovedType bool

// KeyType is The key for adata set
type KeyType string

// DeviceModelChangeTimeType is A timestamp in 8601 format of the last update of the Device information
//         for any device
type DeviceModelChangeTimeType string

// AssetIdType is The unique id of the asset
type AssetIdType string

// AssetAttrTypeType is An asset type
type AssetAttrTypeType string

// AssetBufferSizeType is The maximum number of assets
type AssetBufferSizeType int

// AssetCountAttrType is The number of assets
type AssetCountAttrType int

// FloatListValueType is Common floating point sample value
type FloatListValueType []float32

// ThreeSpaceValueType is A three dimensional value 'X Y Z' or 'A B C'
type ThreeSpaceValueType *FloatListValueType

// DescriptionTextType is A description
type DescriptionTextType string

// DataItemEnumExtType is Extended tyoe for The types of measurements available
type DataItemEnumExtType string

// DataItemEnumEnum is A user variable
type DataItemEnumEnum string

// DataItemEnumType is The types of measurements available
type DataItemEnumType struct {
	DataItemEnumExtType string
	DataItemEnumEnum    string
}

// DataItemSubEnumExtType is Extended tyoe for The sub-types for a measurement
type DataItemSubEnumExtType string

// DataItemSubEnumEnum is step of a discrete manufacturing process.
type DataItemSubEnumEnum string

// DataItemSubEnumType is The sub-types for a measurement
type DataItemSubEnumType struct {
	DataItemSubEnumExtType string
	DataItemSubEnumEnum    string
}

// DataItemStatisticsExtType is Extended tyoe for Statistical operations on data
type DataItemStatisticsExtType string

// DataItemStatisticsEnum is statistical Standard Deviation value calculated for the data item
//             during the calculation period.
type DataItemStatisticsEnum string

// DataItemStatisticsType is Statistical operations on data
type DataItemStatisticsType struct {
	DataItemStatisticsExtType string
	DataItemStatisticsEnum    string
}

// UnitsExtType is Extended tyoe for The units supported
type UnitsExtType string

// UnitsEnum is electric charge in coulombs (C).
type UnitsEnum string

// UnitsType is The units supported
type UnitsType struct {
	UnitsExtType string
	UnitsEnum    string
}

// NativeUnitsExtType is Extended tyoe for The units supported for the source equipment that can
//         be converted into MTC Units.
type NativeUnitsExtType string

// NativeUnitsEnum is electric charge in ampere hour.
type NativeUnitsEnum string

// NativeUnitsType is The units supported for the source equipment that can be converted into
//         MTC Units.
type NativeUnitsType struct {
	NativeUnitsExtType string
	NativeUnitsEnum    string
}

// CoordinateSystemEnumType is coordinate system that represents the working area for a particular
//             workpiece whose origin is shifted within the `MACHINE` coordinate
//             system. If the `WORK` coordinates are not currently defined in the
//             piece of equipment, the `MACHINE` coordinates will be used.
type CoordinateSystemEnumType string

// DataItemResetValueExtType is Extended tyoe for The reset intervals
type DataItemResetValueExtType string

// DataItemResetValueEnum is {{term(observation)}} of the {{block(DataItem)}} is to be reset at
//             the end of a 7-day period.
type DataItemResetValueEnum string

// DataItemResetValueType is The reset intervals
type DataItemResetValueType struct {
	DataItemResetValueExtType string
	DataItemResetValueEnum    string
}

// HeaderAttributesType is A timestamp in 8601 format of the last update of the Device
//           information for any device
type HeaderAttributesType struct {
	VersionAttr               string `xml:"version,attr"`
	CreationTimeAttr          string `xml:"creationTime,attr"`
	TestIndicatorAttr         bool   `xml:"testIndicator,attr,omitempty"`
	InstanceIdAttr            int    `xml:"instanceId,attr"`
	SenderAttr                string `xml:"sender,attr"`
	DeviceModelChangeTimeAttr string `xml:"deviceModelChangeTime,attr"`
}

// AssetCountValueType is The number of assets
type AssetCountValueType int

// AssetCountsType is {{def(EventEnum:ASSET_COUNT)}}
type AssetCountsType struct {
	AssetCount []*AssetCountType `xml:"AssetCount"`
}

// AssetCountType is {{def(EventEnum:ASSET_COUNT)}}
type AssetCountType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	Value         int    `xml:",chardata"`
}

// HeaderType is {{block(AssetCounts)}} groups {{block(AssetCount)}} entities.
type HeaderType struct {
	HeaderAttributesType *HeaderAttributesType
	BufferSizeAttr       int              `xml:"bufferSize,attr"`
	AssetBufferSizeAttr  int              `xml:"assetBufferSize,attr"`
	AssetCountAttr       int              `xml:"assetCount,attr"`
	AssetCounts          *AssetCountsType `xml:"AssetCounts"`
}

// MTConnectDevicesType is This section provides semantic information for the {{block(Device)}}
//             types.
type MTConnectDevicesType struct {
	Header  *HeaderType  `xml:"Header"`
	Devices *DevicesType `xml:"Devices"`
}

// ComponentStationType is The station id for this device
type ComponentStationType string

// Iso841ClassType is The ISO 841 classification for the device
type Iso841ClassType int

// ModelType is The model name
type ModelType string

// DevicesType is Description
type DevicesType struct {
	Agent  *AgentType    `xml:"Agent"`
	Device []*DeviceType `xml:"Device"`
}

// ComponentType is References Model
type ComponentType struct {
	IdAttr             string                      `xml:"id,attr"`
	NativeNameAttr     string                      `xml:"nativeName,attr,omitempty"`
	SampleIntervalAttr float32                     `xml:"sampleInterval,attr,omitempty"`
	SampleRateAttr     float32                     `xml:"sampleRate,attr,omitempty"`
	Description        *ComponentDescriptionType   `xml:"Description"`
	Configuration      *ComponentConfigurationType `xml:"Configuration"`
	DataItems          *DataItemsType              `xml:"DataItems"`
	Components         *ComponentsType             `xml:"Components"`
	Compositions       *CompositionsType           `xml:"Compositions"`
	References         *ReferencesType             `xml:"References"`
}

// Component is Description
type Component *ComponentType

// ComponentDescriptionType is The content of the description can text or XML elements
type ComponentDescriptionType struct {
	ManufacturerAttr string `xml:"manufacturer,attr,omitempty"`
	ModelAttr        string `xml:"model,attr,omitempty"`
	SerialNumberAttr string `xml:"serialNumber,attr,omitempty"`
	StationAttr      string `xml:"station,attr,omitempty"`
}

// CommonComponentType is An abstract component that has an optional uuid
type CommonComponentType struct {
	UuidAttr string `xml:"uuid,attr,omitempty"`
	NameAttr string `xml:"name,attr,omitempty"`
	*ComponentType
}

// CommonComponent is An abstract component that has an optional uuid
type CommonComponent *CommonComponentType

// ComponentsType is {{block(Components)}} groups one or more {{block(Component)}} entities.
type ComponentsType struct {
	Component []*ComponentType `xml:"Component"`
}

// DeviceType is Description
type DeviceType struct {
	Iso841ClassAttr      int    `xml:"iso841Class,attr,omitempty"`
	UuidAttr             string `xml:"uuid,attr"`
	NameAttr             string `xml:"name,attr"`
	MtconnectVersionAttr string `xml:"mtconnectVersion,attr,omitempty"`
	*ComponentType
}

// Device is Description
type Device *DeviceType

// AgentType is Description
type AgentType struct {
	*DeviceType
}

// Agent is Description
type Agent *AgentType

// ActuatorType is Description
type ActuatorType struct {
	*CommonComponentType
}

// Actuator is Description
type Actuator *ActuatorType

// AuxiliaryType is abstract {{block(Component)}} composed of removable part(s) of a piece
//         of equipment that provides supplementary or extended functionality.
type AuxiliaryType struct {
	*CommonComponentType
}

// Auxiliary is abstract {{block(Component)}} composed of removable part(s) of a piece
//         of equipment that provides supplementary or extended functionality.
type Auxiliary *AuxiliaryType

// AxisType is See {{sect(Axis)}}.
type AxisType struct {
	*CommonComponentType
}

// Axis is See {{sect(Axis)}}.
type Axis *AxisType

// BarFeederType is {{block(Loader)}} that delivers bar stock to a piece of equipment.
type BarFeederType struct {
	*LoaderType
}

// BarFeeder is {{block(Loader)}} that delivers bar stock to a piece of equipment.
type BarFeeder *BarFeederType

// ControllerType is Description
type ControllerType struct {
	*SystemType
}

// Controller is Description
type Controller *ControllerType

// CoolantType is {{block(System)}} that provides distribution and management of fluids
//         that remove heat from a piece of equipment.
type CoolantType struct {
	*SystemType
}

// Coolant is {{block(System)}} that provides distribution and management of fluids
//         that remove heat from a piece of equipment.
type Coolant *CoolantType

// DepositionType is Description
type DepositionType struct {
	*AuxiliaryType
}

// Deposition is Description
type Deposition *DepositionType

// DielectricType is Description
type DielectricType struct {
	*SystemType
}

// Dielectric is Description
type Dielectric *DielectricType

// DoorType is Description
type DoorType struct {
	*CommonComponentType
}

// Door is Description
type Door *DoorType

// ElectricType is Description
type ElectricType struct {
	*SystemType
}

// Electric is Description
type Electric *ElectricType

// EnclosureType is Description
type EnclosureType struct {
	*SystemType
}

// Enclosure is Description
type Enclosure *EnclosureType

// EndEffectorType is Description
type EndEffectorType struct {
	*SystemType
}

// EndEffector is Description
type EndEffector *EndEffectorType

// EnvironmentalType is {{block(Auxiliary)}} that monitors, manages, or conditions the
//         environment around or within a piece of equipment.
type EnvironmentalType struct {
	*AuxiliaryType
}

// Environmental is {{block(Auxiliary)}} that monitors, manages, or conditions the
//         environment around or within a piece of equipment.
type Environmental *EnvironmentalType

// FeederType is Description
type FeederType struct {
	*SystemType
}

// Feeder is Description
type Feeder *FeederType

// HydraulicType is {{block(System)}} that provides movement and distribution of pressurized
//         liquid throughout the piece of equipment.
type HydraulicType struct {
	*SystemType
}

// Hydraulic is {{block(System)}} that provides movement and distribution of pressurized
//         liquid throughout the piece of equipment.
type Hydraulic *HydraulicType

// LinearType is {{block(Component Types::Axis)}} that provides prismatic motion along a
//         fixed axis.
type LinearType struct {
	*AxisType
}

// Linear is {{block(Component Types::Axis)}} that provides prismatic motion along a
//         fixed axis.
type Linear *LinearType

// LoaderType is {{block(Auxiliary)}} that provides movement and distribution of
//         materials, parts, tooling, and other items to or from a piece of
//         equipment.
type LoaderType struct {
	*AuxiliaryType
}

// Loader is {{block(Auxiliary)}} that provides movement and distribution of
//         materials, parts, tooling, and other items to or from a piece of
//         equipment.
type Loader *LoaderType

// LubricationType is {{block(System)}} that provides distribution and management of fluids
//         used to lubricate portions of the piece of equipment.
type LubricationType struct {
	*SystemType
}

// Lubrication is {{block(System)}} that provides distribution and management of fluids
//         used to lubricate portions of the piece of equipment.
type Lubrication *LubricationType

// MaterialType is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type MaterialType struct {
	*ResourceType
}

// Material is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type Material *MaterialType

// PathType is Description
type PathType struct {
	*CommonComponentType
}

// Path is Description
type Path *PathType

// PersonnelType is {{block(Resource)}} composed of an individual or individuals who either
//         control, support, or otherwise interface with a piece of equipment.
type PersonnelType struct {
	*ResourceType
}

// Personnel is {{block(Resource)}} composed of an individual or individuals who either
//         control, support, or otherwise interface with a piece of equipment.
type Personnel *PersonnelType

// PneumaticType is Description
type PneumaticType struct {
	*SystemType
}

// Pneumatic is Description
type Pneumatic *PneumaticType

// PowerType is {{block(Power)}} was **DEPRECATED** in *MTConnect Version 1.1* and was
//         replaced by {{block(Availability)}} data item type.
type PowerType struct {
	*CommonComponentType
}

// Power is {{block(Power)}} was **DEPRECATED** in *MTConnect Version 1.1* and was
//         replaced by {{block(Availability)}} data item type.
type Power *PowerType

// ProcessPowerType is Description
type ProcessPowerType struct {
	*SystemType
}

// ProcessPower is Description
type ProcessPower *ProcessPowerType

// ProtectiveType is Description
type ProtectiveType struct {
	*SystemType
}

// Protective is Description
type Protective *ProtectiveType

// ResourceType is abstract {{block(Component)}} composed of material or personnel involved
//         in a manufacturing process.
type ResourceType struct {
	*CommonComponentType
}

// Resource is abstract {{block(Component)}} composed of material or personnel involved
//         in a manufacturing process.
type Resource *ResourceType

// RotaryType is {{block(Component Types::Axis)}} that provides rotation about a fixed
//         axis.
type RotaryType struct {
	*AxisType
}

// Rotary is {{block(Component Types::Axis)}} that provides rotation about a fixed
//         axis.
type Rotary *RotaryType

// SensorType is This section provides semantic information for the
//         {{block(SensorConfiguration)}} entity. {{term(sensor)}} is a unique type
//         of a piece of equipment. A {{term(sensor)}} is typically comprised of
//         two major components: a {{term(sensor unit)}} that provides signal
//         processing, conversion, and communications and the {{termplural(sensing
//         element)}} that provides a signal or measured value. The {{term(sensor
//         unit)}} is modeled as a {{term(lower level)}} {{block(Component)}}
//         called {{block(Sensor)}}. The {{term(sensing element)}} may be modeled
//         as a {{block(Composition)}} element of a {{block(Sensor)}} element and
//         the measured value would be modeled as a {{block(DataItem)}} (See
//         {{sect(DataItems)}} for more information on {{block(DataItem)}}
//         elements). Each {{term(sensor unit)}} may have multiple
//         {{termplural(sensing element)}}; each representing the data for a
//         variety of measured values. ![Sensing Element provided as a DataItem
//         Example](figures/Sensing%20Element%20provided%20as%20a%20DataItem%20Example.png "Sensing Element provided as a DataItem Example"){: width="0.8"} > Note: See {{lst(example-of-sensing-element-provided-as-data-item-associated-with-a-component)}} for an {{term(XML)}} example. When a {{term(sensor unit)}} is modeled as a {{block(Component)}} or as a separate piece of equipment, it may provide additional configuration information for the {{termplural(sensor element)}} and the {{term(sensor unit)}} itself. ![Sensor for Rotary Axis Example](figures/Sensor%20for%20Rotary%20Axis%20Example.png "Sensor for Rotary Axis Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides vibration measurement data for the spindle on a piece of equipment, it could be modeled as a {{block(Sensor)}} for rotary axis named `C`. See {{lst(example-of-sensor-for-rotary-axis)}} for an {{term(XML)}} example. ![Sensor unit with Sensing Elements Example](figures/Sensor%20unit%20with%20Sensing%20Elements%20Example.png "Sensor unit with Sensing Elements Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides measurement data for multiple {{block(Component)}} elements within a piece of equipment and is not associated with any particular {{block(Component)}}, it **MAY** be modeled as an independent {{block(Component)}} and the data associated with measurements are associated with their associated {{block(Component)}} entities. See {{lst(example-of-sensor-unit-with-sensing-element)}} for an {{term(XML)}} example. {{block(Configuration)}} data provides information required for maintenance and support of the sensor. When {{block(Sensor)}} represents the {{term(sensor unit)}} for multiple {{term(sensing element)}}(s), each sensing element is represented by a {{block(Channel)}}. The {{term(sensor unit)}} itself and each {{block(Channel)}} representing one {{term(sensing element)}} **MAY** have its own configuration data. ![Sensor Configuration Example](figures/Sensor%20Configuration%20Example.png "Sensor Configuration Example"){: width="0.8"} > Note: See {{lst(example-of-configuration-data-for-sensor)}} for an {{term(XML)}} example.
type SensorType struct {
	*CommonComponentType
}

// Sensor is This section provides semantic information for the
//         {{block(SensorConfiguration)}} entity. {{term(sensor)}} is a unique type
//         of a piece of equipment. A {{term(sensor)}} is typically comprised of
//         two major components: a {{term(sensor unit)}} that provides signal
//         processing, conversion, and communications and the {{termplural(sensing
//         element)}} that provides a signal or measured value. The {{term(sensor
//         unit)}} is modeled as a {{term(lower level)}} {{block(Component)}}
//         called {{block(Sensor)}}. The {{term(sensing element)}} may be modeled
//         as a {{block(Composition)}} element of a {{block(Sensor)}} element and
//         the measured value would be modeled as a {{block(DataItem)}} (See
//         {{sect(DataItems)}} for more information on {{block(DataItem)}}
//         elements). Each {{term(sensor unit)}} may have multiple
//         {{termplural(sensing element)}}; each representing the data for a
//         variety of measured values. ![Sensing Element provided as a DataItem
//         Example](figures/Sensing%20Element%20provided%20as%20a%20DataItem%20Example.png "Sensing Element provided as a DataItem Example"){: width="0.8"} > Note: See {{lst(example-of-sensing-element-provided-as-data-item-associated-with-a-component)}} for an {{term(XML)}} example. When a {{term(sensor unit)}} is modeled as a {{block(Component)}} or as a separate piece of equipment, it may provide additional configuration information for the {{termplural(sensor element)}} and the {{term(sensor unit)}} itself. ![Sensor for Rotary Axis Example](figures/Sensor%20for%20Rotary%20Axis%20Example.png "Sensor for Rotary Axis Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides vibration measurement data for the spindle on a piece of equipment, it could be modeled as a {{block(Sensor)}} for rotary axis named `C`. See {{lst(example-of-sensor-for-rotary-axis)}} for an {{term(XML)}} example. ![Sensor unit with Sensing Elements Example](figures/Sensor%20unit%20with%20Sensing%20Elements%20Example.png "Sensor unit with Sensing Elements Example"){: width="0.8"} > Note: If a {{block(Sensor)}} provides measurement data for multiple {{block(Component)}} elements within a piece of equipment and is not associated with any particular {{block(Component)}}, it **MAY** be modeled as an independent {{block(Component)}} and the data associated with measurements are associated with their associated {{block(Component)}} entities. See {{lst(example-of-sensor-unit-with-sensing-element)}} for an {{term(XML)}} example. {{block(Configuration)}} data provides information required for maintenance and support of the sensor. When {{block(Sensor)}} represents the {{term(sensor unit)}} for multiple {{term(sensing element)}}(s), each sensing element is represented by a {{block(Channel)}}. The {{term(sensor unit)}} itself and each {{block(Channel)}} representing one {{term(sensing element)}} **MAY** have its own configuration data. ![Sensor Configuration Example](figures/Sensor%20Configuration%20Example.png "Sensor Configuration Example"){: width="0.8"} > Note: See {{lst(example-of-configuration-data-for-sensor)}} for an {{term(XML)}} example.
type Sensor *SensorType

// StockType is Description
type StockType struct {
	*MaterialType
}

// Stock is Description
type Stock *StockType

// SystemType is abstract {{block(Component)}} that is permanently integrated into the
//         piece of equipment.
type SystemType struct {
	*CommonComponentType
}

// System is abstract {{block(Component)}} that is permanently integrated into the
//         piece of equipment.
type System *SystemType

// ToolingDeliveryType is {{block(Auxiliary)}} that manages, positions, stores, and delivers
//         tooling within a piece of equipment.
type ToolingDeliveryType struct {
	*AuxiliaryType
}

// ToolingDelivery is {{block(Auxiliary)}} that manages, positions, stores, and delivers
//         tooling within a piece of equipment.
type ToolingDelivery *ToolingDeliveryType

// WasteDisposalType is {{block(Auxiliary)}} that removes manufacturing byproducts from a piece
//         of equipment.
type WasteDisposalType struct {
	*AuxiliaryType
}

// WasteDisposal is {{block(Auxiliary)}} that removes manufacturing byproducts from a piece
//         of equipment.
type WasteDisposal *WasteDisposalType

// StructureType is {{block(Component)}} composed of part(s) comprising the rigid bodies of
//         the piece of equipment.
type StructureType struct {
	*CommonComponentType
}

// Structure is {{block(Component)}} composed of part(s) comprising the rigid bodies of
//         the piece of equipment.
type Structure *StructureType

// LinkType is {{block(Structure)}} that provides a connection between
//         {{block(Component)}} entities.
type LinkType struct {
	*StructureType
}

// Link is {{block(Structure)}} that provides a connection between
//         {{block(Component)}} entities.
type Link *LinkType

// GangToolBarType is Description
type GangToolBarType struct {
	*ToolingDeliveryType
}

// GangToolBar is Description
type GangToolBar *GangToolBarType

// HeatingType is Description
type HeatingType struct {
	*EnvironmentalType
}

// Heating is Description
type Heating *HeatingType

// AutomaticToolChangerType is Description
type AutomaticToolChangerType struct {
	*ToolingDeliveryType
}

// AutomaticToolChanger is Description
type AutomaticToolChanger *AutomaticToolChangerType

// ProcessType is abstract {{block(Component)}} composed of a manufacturing process being
//         executed on a piece of equipment.
type ProcessType struct {
	*CommonComponentType
}

// Process is abstract {{block(Component)}} composed of a manufacturing process being
//         executed on a piece of equipment.
type Process *ProcessType

// ToolMagazineType is Description
type ToolMagazineType struct {
	*ToolingDeliveryType
}

// ToolMagazine is Description
type ToolMagazine *ToolMagazineType

// PartOccurrenceType is Description
type PartOccurrenceType struct {
	*PartType
}

// PartOccurrence is Description
type PartOccurrence *PartOccurrenceType

// AdapterType is Description
type AdapterType struct {
	*CommonComponentType
}

// Adapter is Description
type Adapter *AdapterType

// ToolRackType is Description
type ToolRackType struct {
	*ToolingDeliveryType
}

// ToolRack is Description
type ToolRack *ToolRackType

// TurretType is Description
type TurretType struct {
	*ToolingDeliveryType
}

// Turret is Description
type Turret *TurretType

// VacuumType is {{block(System)}} that evacuates gases and liquids from an enclosed and
//         sealed space to a controlled negative pressure or a molecular density
//         below the prevailing atmospheric level.
type VacuumType struct {
	*EnvironmentalType
}

// Vacuum is {{block(System)}} that evacuates gases and liquids from an enclosed and
//         sealed space to a controlled negative pressure or a molecular density
//         below the prevailing atmospheric level.
type Vacuum *VacuumType

// CoolingType is Description
type CoolingType struct {
	*EnvironmentalType
}

// Cooling is Description
type Cooling *CoolingType

// ProcessOccurrenceType is Description
type ProcessOccurrenceType struct {
	*ProcessType
}

// ProcessOccurrence is Description
type ProcessOccurrence *ProcessOccurrenceType

// PressureType is Description
type PressureType struct {
	*EnvironmentalType
}

// Pressure is Description
type Pressure *PressureType

// PartType is abstract {{block(Component)}} composed of a {{term(part)}} being
//         processed by a piece of equipment.
type PartType struct {
	*CommonComponentType
}

// Part is abstract {{block(Component)}} composed of a {{term(part)}} being
//         processed by a piece of equipment.
type Part *PartType

// LockType is {{block(Component)}} that physically prohibits a {{block(Device)}} or
//         {{block(Component)}} from opening or operating.
type LockType struct {
	*CommonComponentType
}

// Lock is {{block(Component)}} that physically prohibits a {{block(Device)}} or
//         {{block(Component)}} from opening or operating.
type Lock *LockType

// SpindleType is {{block(Component)}} that provides an axis of rotation for the purpose
//         of rapidly rotating a part or a tool to provide sufficient surface speed
//         for cutting operations. {{block(Spindle)}} was **DEPRECATED** in
//         *MTConnect Version 1.1* and was replaced by {{block(RotaryMode)}}.
type SpindleType struct {
	*AxisType
}

// Spindle is {{block(Component)}} that provides an axis of rotation for the purpose
//         of rapidly rotating a part or a tool to provide sufficient surface speed
//         for cutting operations. {{block(Spindle)}} was **DEPRECATED** in
//         *MTConnect Version 1.1* and was replaced by {{block(RotaryMode)}}.
type Spindle *SpindleType

// ThermostatType is {{block(Component)}} composed of a sensor or an instrument that measures
//         temperature. {{block(Thermostat)}} was **DEPRECATED** in *MTConnect
//         Version 1.2* and was replaced by {{block(Temperature)}}.
type ThermostatType struct {
	*SensorType
}

// Thermostat is {{block(Component)}} composed of a sensor or an instrument that measures
//         temperature. {{block(Thermostat)}} was **DEPRECATED** in *MTConnect
//         Version 1.2* and was replaced by {{block(Temperature)}}.
type Thermostat *ThermostatType

// VibrationType is {{block(Component)}} composed of a sensor or an instrument that measures
//         the amount and/or frequency of vibration within a system.
//         {{block(Vibration)}} was **DEPRECATED** in *MTConnect Version 1.2* and
//         was replaced by {{block(Displacement)}}, {{block(Frequency)}} etc.
type VibrationType struct {
	*SensorType
}

// Vibration is {{block(Component)}} composed of a sensor or an instrument that measures
//         the amount and/or frequency of vibration within a system.
//         {{block(Vibration)}} was **DEPRECATED** in *MTConnect Version 1.2* and
//         was replaced by {{block(Displacement)}}, {{block(Frequency)}} etc.
type Vibration *VibrationType

// ChuckType is leaf {{block(Component)}} composed of a mechanism that holds a part or
//         stock material in place.
type ChuckType struct {
	*CommonComponentType
}

// Chuck is leaf {{block(Component)}} composed of a mechanism that holds a part or
//         stock material in place.
type Chuck *ChuckType

// FanType is leaf {{block(Component)}} that produces a current of air.
type FanType struct {
	*CommonComponentType
}

// Fan is leaf {{block(Component)}} that produces a current of air.
type Fan *FanType

// SpreaderType is leaf {{block(Component)}} that flattens or spreading materials.
type SpreaderType struct {
	*CommonComponentType
}

// Spreader is leaf {{block(Component)}} that flattens or spreading materials.
type Spreader *SpreaderType

// PulleyType is leaf {{block(Component)}} composed of a mechanism or wheel that turns in
//         a frame or block and serves to change the direction of or to transmit
//         force.
type PulleyType struct {
	*CommonComponentType
}

// Pulley is leaf {{block(Component)}} composed of a mechanism or wheel that turns in
//         a frame or block and serves to change the direction of or to transmit
//         force.
type Pulley *PulleyType

// TransferPotType is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is
//         awaiting transfer from a {{block(ToolMagazine)}} to {{term(spindle)}} or
//         {{block(Turret)}}.
type TransferPotType struct {
	*CommonComponentType
}

// TransferPot is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is
//         awaiting transfer from a {{block(ToolMagazine)}} to {{term(spindle)}} or
//         {{block(Turret)}}.
type TransferPot *TransferPotType

// PowerSupplyType is leaf {{block(Component)}} that provides power to electric mechanisms.
type PowerSupplyType struct {
	*CommonComponentType
}

// PowerSupply is leaf {{block(Component)}} that provides power to electric mechanisms.
type PowerSupply *PowerSupplyType

// DrainType is leaf {{block(Component)}} that allows material to flow for the purpose
//         of drainage from, for example, a vessel or tank.
type DrainType struct {
	*CommonComponentType
}

// Drain is leaf {{block(Component)}} that allows material to flow for the purpose
//         of drainage from, for example, a vessel or tank.
type Drain *DrainType

// BallscrewType is leaf {{block(Component)}} composed of a mechanical structure that
//         transforms rotary motion into linear motion.
type BallscrewType struct {
	*CommonComponentType
}

// Ballscrew is leaf {{block(Component)}} composed of a mechanical structure that
//         transforms rotary motion into linear motion.
type Ballscrew *BallscrewType

// CompressorType is leaf {{block(Component)}} composed of a pump or other mechanism that
//         reduces volume and increases pressure of gases in order to condense the
//         gases to drive pneumatically powered pieces of equipment.
type CompressorType struct {
	*CommonComponentType
}

// Compressor is leaf {{block(Component)}} composed of a pump or other mechanism that
//         reduces volume and increases pressure of gases in order to condense the
//         gases to drive pneumatically powered pieces of equipment.
type Compressor *CompressorType

// ChuteType is leaf {{block(Component)}} composed of an inclined channel that conveys
//         material.
type ChuteType struct {
	*CommonComponentType
}

// Chute is leaf {{block(Component)}} composed of an inclined channel that conveys
//         material.
type Chute *ChuteType

// SwitchType is leaf {{block(Component)}} that turns on or off an electric current or
//         makes or breaks a circuit.
type SwitchType struct {
	*CommonComponentType
}

// Switch is leaf {{block(Component)}} that turns on or off an electric current or
//         makes or breaks a circuit.
type Switch *SwitchType

// TensionerType is leaf {{block(Component)}} that provides or applies a stretch or strain
//         to another mechanism.
type TensionerType struct {
	*CommonComponentType
}

// Tensioner is leaf {{block(Component)}} that provides or applies a stretch or strain
//         to another mechanism.
type Tensioner *TensionerType

// WaterType is leaf {{block(Component)}} composed of $$H_2 O$$.
type WaterType struct {
	*CommonComponentType
}

// Water is leaf {{block(Component)}} composed of $$H_2 O$$.
type Water *WaterType

// WireType is leaf {{block(Component)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type WireType struct {
	*CommonComponentType
}

// Wire is leaf {{block(Component)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type Wire *WireType

// SensingElementType is leaf {{block(Component)}} that provides a signal or measured value.
type SensingElementType struct {
	*CommonComponentType
}

// SensingElement is leaf {{block(Component)}} that provides a signal or measured value.
type SensingElement *SensingElementType

// CoolingTowerType is leaf {{block(Component)}} composed of a heat exchange system that uses a
//         fluid to transfer heat to the atmosphere.
type CoolingTowerType struct {
	*CommonComponentType
}

// CoolingTower is leaf {{block(Component)}} composed of a heat exchange system that uses a
//         fluid to transfer heat to the atmosphere.
type CoolingTower *CoolingTowerType

// RemovalPotType is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that has
//         to be removed from a {{block(ToolMagazine)}} or {{block(Turret)}} to a
//         location outside of the piece of equipment.
type RemovalPotType struct {
	*CommonComponentType
}

// RemovalPot is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that has
//         to be removed from a {{block(ToolMagazine)}} or {{block(Turret)}} to a
//         location outside of the piece of equipment.
type RemovalPot *RemovalPotType

// GripperType is leaf {{block(Component)}} that holds a part, stock material, or any
//         other item in place.
type GripperType struct {
	*CommonComponentType
}

// Gripper is leaf {{block(Component)}} that holds a part, stock material, or any
//         other item in place.
type Gripper *GripperType

// StagingPotType is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is
//         awaiting transfer to a {{block(ToolMagazine)}} or {{block(Turret)}} from
//         outside of the piece of equipment.
type StagingPotType struct {
	*CommonComponentType
}

// StagingPot is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is
//         awaiting transfer to a {{block(ToolMagazine)}} or {{block(Turret)}} from
//         outside of the piece of equipment.
type StagingPot *StagingPotType

// BrakeType is leaf {{block(Component)}} that slows or stops a moving object by the
//         absorption or transfer of the energy of momentum, usually by means of
//         friction, electrical force, or magnetic force.
type BrakeType struct {
	*CommonComponentType
}

// Brake is leaf {{block(Component)}} that slows or stops a moving object by the
//         absorption or transfer of the energy of momentum, usually by means of
//         friction, electrical force, or magnetic force.
type Brake *BrakeType

// StationType is leaf {{block(Component)}} composed of a storage or mounting location for
//         a tool associated with a {{block(Turret)}}, {{block(GangToolBar)}}, or
//         {{block(ToolRack)}}.
type StationType struct {
	*CommonComponentType
}

// Station is leaf {{block(Component)}} composed of a storage or mounting location for
//         a tool associated with a {{block(Turret)}}, {{block(GangToolBar)}}, or
//         {{block(ToolRack)}}.
type Station *StationType

// HopperType is leaf {{block(Component)}} composed of a chamber or bin in which
//         materials are stored temporarily, typically being filled through the top
//         and dispensed through the bottom.
type HopperType struct {
	*CommonComponentType
}

// Hopper is leaf {{block(Component)}} composed of a chamber or bin in which
//         materials are stored temporarily, typically being filled through the top
//         and dispensed through the bottom.
type Hopper *HopperType

// BeltType is leaf {{block(Component)}} composed of an endless flexible band that
//         transmits motion for a piece of equipment or conveys materials and
//         objects.
type BeltType struct {
	*CommonComponentType
}

// Belt is leaf {{block(Component)}} composed of an endless flexible band that
//         transmits motion for a piece of equipment or conveys materials and
//         objects.
type Belt *BeltType

// TransferArmType is leaf {{block(Component)}} that physically moves a tool from one location
//         to another.
type TransferArmType struct {
	*CommonComponentType
}

// TransferArm is leaf {{block(Component)}} that physically moves a tool from one location
//         to another.
type TransferArm *TransferArmType

// ReelType is leaf {{block(Component)}} composed of a rotary storage unit for
//         material.
type ReelType struct {
	*CommonComponentType
}

// Reel is leaf {{block(Component)}} composed of a rotary storage unit for
//         material.
type Reel *ReelType

// FilterType is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//         {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type FilterType struct {
	*CommonComponentType
}

// Filter is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//         {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type Filter *FilterType

// ReturnPotType is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that has
//         been removed from {{term(spindle)}} or {{block(Turret)}} and awaiting
//         for return to a {{block(ToolMagazine)}}.
type ReturnPotType struct {
	*CommonComponentType
}

// ReturnPot is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that has
//         been removed from {{term(spindle)}} or {{block(Turret)}} and awaiting
//         for return to a {{block(ToolMagazine)}}.
type ReturnPot *ReturnPotType

// ChainType is leaf {{block(Component)}} composed of interconnected series of objects
//         that band together and are used to transmit motion for a piece of
//         equipment or to convey materials and objects.
type ChainType struct {
	*CommonComponentType
}

// Chain is leaf {{block(Component)}} composed of interconnected series of objects
//         that band together and are used to transmit motion for a piece of
//         equipment or to convey materials and objects.
type Chain *ChainType

// AmplifierType is leaf {{block(Component)}} composed of an electronic component or circuit
//         that amplifies power, electric current, or voltage.
type AmplifierType struct {
	*CommonComponentType
}

// Amplifier is leaf {{block(Component)}} composed of an electronic component or circuit
//         that amplifies power, electric current, or voltage.
type Amplifier *AmplifierType

// VatType is leaf {{block(Component)}} composed of a container that holds liquid or
//         powdered materials.
type VatType struct {
	*CommonComponentType
}

// Vat is leaf {{block(Component)}} composed of a container that holds liquid or
//         powdered materials.
type Vat *VatType

// ExpiredPotType is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is no
//         longer usable for removal from a {{block(ToolMagazine)}} or
//         {{block(Turret)}}.
type ExpiredPotType struct {
	*CommonComponentType
}

// ExpiredPot is leaf {{block(Component)}} that is a {{block(Pot)}} for a tool that is no
//         longer usable for removal from a {{block(ToolMagazine)}} or
//         {{block(Turret)}}.
type ExpiredPot *ExpiredPotType

// OilType is leaf {{block(Component)}} composed of a viscous liquid.
type OilType struct {
	*CommonComponentType
}

// Oil is leaf {{block(Component)}} composed of a viscous liquid.
type Oil *OilType

// TableType is leaf {{block(Component)}} composed of a surface for holding an object or
//         material.
type TableType struct {
	*CommonComponentType
}

// Table is leaf {{block(Component)}} composed of a surface for holding an object or
//         material.
type Table *TableType

// ChopperType is leaf {{block(Component)}} that breaks material into smaller pieces.
type ChopperType struct {
	*CommonComponentType
}

// Chopper is leaf {{block(Component)}} that breaks material into smaller pieces.
type Chopper *ChopperType

// ValveType is leaf {{block(Component)}} that halts or controls the flow of a liquid,
//         gas, or other material through a passage, pipe, inlet, or outlet.
type ValveType struct {
	*CommonComponentType
}

// Valve is leaf {{block(Component)}} that halts or controls the flow of a liquid,
//         gas, or other material through a passage, pipe, inlet, or outlet.
type Valve *ValveType

// PotType is leaf {{block(Component)}} composed of a tool storage location associated
//         with a {{block(ToolMagazine)}} or {{block(AutomaticToolChanger)}}.
type PotType struct {
	*CommonComponentType
}

// Pot is leaf {{block(Component)}} composed of a tool storage location associated
//         with a {{block(ToolMagazine)}} or {{block(AutomaticToolChanger)}}.
type Pot *PotType

// TransformerType is leaf {{block(Component)}} that transforms electric energy from a source
//         to a secondary circuit.
type TransformerType struct {
	*CommonComponentType
}

// Transformer is leaf {{block(Component)}} that transforms electric energy from a source
//         to a secondary circuit.
type Transformer *TransformerType

// ExposureUnitType is leaf {{block(Component)}} that emits a type of radiation.
type ExposureUnitType struct {
	*CommonComponentType
}

// ExposureUnit is leaf {{block(Component)}} that emits a type of radiation.
type ExposureUnit *ExposureUnitType

// TankType is leaf {{block(Component)}} composed of a receptacle or container that
//         holds material.
type TankType struct {
	*CommonComponentType
}

// Tank is leaf {{block(Component)}} composed of a receptacle or container that
//         holds material.
type Tank *TankType

// EncoderType is leaf {{block(Component)}} that measures position.
type EncoderType struct {
	*CommonComponentType
}

// Encoder is leaf {{block(Component)}} that measures position.
type Encoder *EncoderType

// StorageBatteryType is leaf {{block(Component)}} composed of one or more cells in which
//         chemical energy is converted into electricity and used as a source of
//         power.
type StorageBatteryType struct {
	*CommonComponentType
}

// StorageBattery is leaf {{block(Component)}} composed of one or more cells in which
//         chemical energy is converted into electricity and used as a source of
//         power.
type StorageBattery *StorageBatteryType

// CircuitBreakerType is leaf {{block(Component)}} that interrupts an electric circuit.
type CircuitBreakerType struct {
	*CommonComponentType
}

// CircuitBreaker is leaf {{block(Component)}} that interrupts an electric circuit.
type CircuitBreaker *CircuitBreakerType

// MotorType is leaf {{block(Component)}} that converts electrical, pneumatic, or
//         hydraulic energy into mechanical energy.
type MotorType struct {
	*CommonComponentType
}

// Motor is leaf {{block(Component)}} that converts electrical, pneumatic, or
//         hydraulic energy into mechanical energy.
type Motor *MotorType

// ExtrusionUnitType is leaf {{block(Component)}} that dispenses liquid or powered materials.
type ExtrusionUnitType struct {
	*CommonComponentType
}

// ExtrusionUnit is leaf {{block(Component)}} that dispenses liquid or powered materials.
type ExtrusionUnit *ExtrusionUnitType

// GalvanomotorType is leaf {{block(Component)}} composed of an electromechanical actuator that
//         produces deflection of a beam of light or energy in response to electric
//         current through its coil in a magnetic field.
type GalvanomotorType struct {
	*CommonComponentType
}

// Galvanomotor is leaf {{block(Component)}} composed of an electromechanical actuator that
//         produces deflection of a beam of light or energy in response to electric
//         current through its coil in a magnetic field.
type Galvanomotor *GalvanomotorType

// PumpType is leaf {{block(Component)}} that raises, drives, exhausts, or compresses
//         fluids or gases by means of a piston, plunger, or set of rotating vanes.
type PumpType struct {
	*CommonComponentType
}

// Pump is leaf {{block(Component)}} that raises, drives, exhausts, or compresses
//         fluids or gases by means of a piston, plunger, or set of rotating vanes.
type Pump *PumpType

// ClampType is leaf {{block(Component)}} that strengthens, support, or fastens objects
//         in place.
type ClampType struct {
	*CommonComponentType
}

// Clamp is leaf {{block(Component)}} that strengthens, support, or fastens objects
//         in place.
type Clamp *ClampType

// LinearPositionFeedbackType is leaf {{block(Component)}} that measures linear motion or position.
//         **DEPRECATION WARNING** : May be deprecated in the future. Recommend
//         using {{block(Encoder)}}.
type LinearPositionFeedbackType struct {
	*CommonComponentType
}

// LinearPositionFeedback is leaf {{block(Component)}} that measures linear motion or position.
//         **DEPRECATION WARNING** : May be deprecated in the future. Recommend
//         using {{block(Encoder)}}.
type LinearPositionFeedback *LinearPositionFeedbackType

// WorkpieceType is leaf {{block(Component)}} composed of an object or material on which a
//         form of work is performed.
type WorkpieceType struct {
	*CommonComponentType
}

// Workpiece is leaf {{block(Component)}} composed of an object or material on which a
//         form of work is performed.
type Workpiece *WorkpieceType

// WorkEnvelopeType is Description
type WorkEnvelopeType struct {
	*SystemType
}

// WorkEnvelope is Description
type WorkEnvelope *WorkEnvelopeType

// StructuresType is {{block(Component)}} that {{termplural(organize)}} {{block(Structure)}}
//         types.
type StructuresType struct {
	*CommonComponentType
}

// Structures is {{block(Component)}} that {{termplural(organize)}} {{block(Structure)}}
//         types.
type Structures *StructuresType

// InterfacesType is {{block(Component)}} that {{termplural(organize)}} {{block(Interface)}}
//         types.
type InterfacesType struct {
	*CommonComponentType
}

// Interfaces is {{block(Component)}} that {{termplural(organize)}} {{block(Interface)}}
//         types.
type Interfaces *InterfacesType

// AuxiliariesType is {{block(Component)}} that {{termplural(organize)}} {{block(Auxiliary)}}
//         types.
type AuxiliariesType struct {
	*CommonComponentType
}

// Auxiliaries is {{block(Component)}} that {{termplural(organize)}} {{block(Auxiliary)}}
//         types.
type Auxiliaries *AuxiliariesType

// SystemsType is {{block(Component)}} that {{termplural(organize)}} {{block(System)}}
//         types.
type SystemsType struct {
	*CommonComponentType
}

// Systems is {{block(Component)}} that {{termplural(organize)}} {{block(System)}}
//         types.
type Systems *SystemsType

// AdaptersType is {{block(Component)}} that {{termplural(organize)}} {{block(Adapter)}}
//         types.
type AdaptersType struct {
	*CommonComponentType
}

// Adapters is {{block(Component)}} that {{termplural(organize)}} {{block(Adapter)}}
//         types.
type Adapters *AdaptersType

// ResourcesType is {{block(Component)}} that {{termplural(organize)}} {{block(Resource)}}
//         types.
type ResourcesType struct {
	*CommonComponentType
}

// Resources is {{block(Component)}} that {{termplural(organize)}} {{block(Resource)}}
//         types.
type Resources *ResourcesType

// AxesType is {{block(Component)}} that {{termplural(organize)}} {{block(Component
//         Types::Axis)}} types.
type AxesType struct {
	*CommonComponentType
}

// Axes is {{block(Component)}} that {{termplural(organize)}} {{block(Component
//         Types::Axis)}} types.
type Axes *AxesType

// ProcessesType is {{block(Component)}} that {{termplural(organize)}} {{block(Process)}}
//         types.
type ProcessesType struct {
	*CommonComponentType
}

// Processes is {{block(Component)}} that {{termplural(organize)}} {{block(Process)}}
//         types.
type Processes *ProcessesType

// PartsType is {{block(Component)}} that {{termplural(organize)}} {{block(Part)}}
//         types.
type PartsType struct {
	*CommonComponentType
}

// Parts is {{block(Component)}} that {{termplural(organize)}} {{block(Part)}}
//         types.
type Parts *PartsType

// MaterialsType is {{block(Resources)}} that {{termplural(organize)}} {{block(Material)}}
//         types.
type MaterialsType struct {
	*CommonComponentType
}

// Materials is {{block(Resources)}} that {{termplural(organize)}} {{block(Material)}}
//         types.
type Materials *MaterialsType

// ControllersType is {{block(Component)}} that {{termplural(organize)}} {{block(Controller)}}
//         entities.
type ControllersType struct {
	*CommonComponentType
}

// Controllers is {{block(Component)}} that {{termplural(organize)}} {{block(Controller)}}
//         entities.
type Controllers *ControllersType

// CompositionsType is Description
type CompositionsType struct {
	Composition []*CompositionType `xml:"Composition"`
}

// CompositionEnumTypeExtType is Extended tyoe for The vocab for the type of composition
type CompositionEnumTypeExtType string

// CompositionEnumTypeEnum is {{block(Pot)}} for a tool that is no longer usable for removal from
//             a {{block(ToolMagazine)}} or {{block(Turret)}}.
type CompositionEnumTypeEnum string

// CompositionEnumTypeType is The vocab for the type of composition
type CompositionEnumTypeType struct {
	CompositionEnumTypeExtType string
	CompositionEnumTypeEnum    string
}

// CompositionType is technical information about an entity describing its physical
//             layout, functional characteristics, and relationships with other
//             entities.
type CompositionType struct {
	IdAttr        string                      `xml:"id,attr"`
	UuidAttr      string                      `xml:"uuid,attr,omitempty"`
	NameAttr      string                      `xml:"name,attr,omitempty"`
	TypeAttr      *CompositionEnumTypeType    `xml:"type,attr"`
	Description   *ComponentDescriptionType   `xml:"Description"`
	Configuration *ComponentConfigurationType `xml:"Configuration"`
}

// IdRefType is A reference to an identifier
type IdRefType string

// ReferencesType is References Model
type ReferencesType struct {
	Reference []*ReferenceType `xml:"Reference"`
}

// ReferenceType is Description
type ReferenceType struct {
	IdRefAttr string `xml:"idRef,attr"`
	NameAttr  string `xml:"name,attr,omitempty"`
}

// Reference is Description
type Reference *ReferenceType

// DataItemRefType is Description
type DataItemRefType struct {
	*ReferenceType
}

// DataItemRef is Description
type DataItemRef *DataItemRefType

// ComponentRefType is Description
type ComponentRefType struct {
	*ReferenceType
}

// ComponentRef is Description
type ComponentRef *ComponentRefType

// AbstractConfigurationType is Abstract configuration
type AbstractConfigurationType struct {
}

// AbstractConfiguration is Abstract configuration
type AbstractConfiguration *AbstractConfigurationType

// ComponentConfigurationType is The configuration data associated with this component.
type ComponentConfigurationType struct {
	AbstractConfiguration []*AbstractConfigurationType `xml:"AbstractConfiguration"`
}

// CalibrationDateType is The time the calibration was preformed
type CalibrationDateType string

// NextCalibrationDateType is The time the next calibration should be preformed
type NextCalibrationDateType string

// CalibrationInitialsType is The initials of the person doing the calibration
type CalibrationInitialsType string

// FirmwareVersionType is The firmware version of this sensor
type FirmwareVersionType string

// ChannelNumberType is The channel number
type ChannelNumberType int

// SensorConfigurationType is {{block(Channels)}} groups one or more {{block(Channel)}}
//                 entities. See {{block(Channel)}}.
type SensorConfigurationType struct {
	FirmwareVersion     string        `xml:"FirmwareVersion"`
	CalibrationDate     string        `xml:"CalibrationDate"`
	NextCalibrationDate string        `xml:"NextCalibrationDate"`
	CalibrationInitials string        `xml:"CalibrationInitials"`
	Channels            *ChannelsType `xml:"Channels"`
	*AbstractConfigurationType
}

// SensorConfiguration is See {{block(SensorConfiguration)}}.
type SensorConfiguration *SensorConfigurationType

// ChannelsType is Description
type ChannelsType struct {
	Channel []*ChannelType `xml:"Channel"`
}

// ChannelType is The initials of the person verifying the validity of the calibration
//             data.
type ChannelType struct {
	NumberAttr          int    `xml:"number,attr"`
	NameAttr            string `xml:"name,attr,omitempty"`
	Description         string `xml:"Description"`
	CalibrationDate     string `xml:"CalibrationDate"`
	NextCalibrationDate string `xml:"NextCalibrationDate"`
	CalibrationInitials string `xml:"CalibrationInitials"`
}

// LimitValueType is The limit of a value
type LimitValueType float32

// PeakType is The peak value
type PeakType float32

// SpecificationsType is {{block(Specifications)}} groups one or more {{block(Specification)}}
//         entities. See {{package(Specifications)}}.
type SpecificationsType struct {
	AbstractSpecification []*AbstractSpecificationType `xml:"AbstractSpecification"`
	*AbstractConfigurationType
}

// Specifications is {{block(Specifications)}} groups one or more {{block(Specification)}}
//         entities. See {{package(Specifications)}}.
type Specifications *SpecificationsType

// OriginatorEnumExtType is Extended tyoe for A reference to the creator of the Specification
type OriginatorEnumExtType string

// OriginatorEnumEnum is The owner or implementer of a piece of equipment or component.
type OriginatorEnumEnum string

// OriginatorEnumType is A reference to the creator of the Specification
type OriginatorEnumType struct {
	OriginatorEnumExtType string
	OriginatorEnumEnum    string
}

// AbstractSpecificationType is A specification
type AbstractSpecificationType struct {
	IdAttr                    string               `xml:"id,attr"`
	TypeAttr                  *DataItemEnumType    `xml:"type,attr"`
	OriginatorAttr            *OriginatorEnumType  `xml:"originator,attr,omitempty"`
	SubTypeAttr               *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	NameAttr                  string               `xml:"name,attr,omitempty"`
	DataItemIdRefAttr         string               `xml:"dataItemIdRef,attr,omitempty"`
	CompositionIdRefAttr      string               `xml:"compositionIdRef,attr,omitempty"`
	CoordinateSystemIdRefAttr string               `xml:"coordinateSystemIdRef,attr,omitempty"`
	UnitsAttr                 *UnitsType           `xml:"units,attr,omitempty"`
}

// AbstractSpecification is A specification
type AbstractSpecification *AbstractSpecificationType

// SpecificationType is lower conformance boundary for a variable. > Note: immediate
//                 concern or action may be required.
type SpecificationType struct {
	Maximum      *MaximumType      `xml:"Maximum"`
	Minimum      *MinimumType      `xml:"Minimum"`
	Nominal      *NominalType      `xml:"Nominal"`
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
	*AbstractSpecificationType
}

// Specification is design characteristics for a piece of equipment.
type Specification *SpecificationType

// ConstraintType is The limit of a constraint
type ConstraintType struct {
	Value float32 `xml:",chardata"`
}

// Constraint is The limit of a constraint
type Constraint *ConstraintType

// MaximumType is numeric upper constraint.
type MaximumType struct {
	*ConstraintType
}

// Maximum is numeric upper constraint.
type Maximum *MaximumType

// MinimumType is numeric lower constraint.
type MinimumType struct {
	*ConstraintType
}

// Minimum is numeric lower constraint.
type Minimum *MinimumType

// NominalType is numeric target or expected value.
type NominalType struct {
	*ConstraintType
}

// Nominal is numeric target or expected value.
type Nominal *NominalType

// UpperLimitType is upper conformance boundary for a variable. > Note: immediate concern
//         or action may be required.
type UpperLimitType struct {
	*ConstraintType
}

// UpperLimit is upper conformance boundary for a variable. > Note: immediate concern
//         or action may be required.
type UpperLimit *UpperLimitType

// UpperWarningType is upper boundary indicating increased concern and supervision may be
//         required.
type UpperWarningType struct {
	*ConstraintType
}

// UpperWarning is upper boundary indicating increased concern and supervision may be
//         required.
type UpperWarning *UpperWarningType

// LowerWarningType is lower boundary indicating increased concern and supervision may be
//         required.
type LowerWarningType struct {
	*ConstraintType
}

// LowerWarning is lower boundary indicating increased concern and supervision may be
//         required.
type LowerWarning *LowerWarningType

// LowerLimitType is lower conformance boundary for a variable. > Note: immediate concern
//         or action may be required.
type LowerLimitType struct {
	*ConstraintType
}

// LowerLimit is lower conformance boundary for a variable. > Note: immediate concern
//         or action may be required.
type LowerLimit *LowerLimitType

// ProcessSpecificationType is See {{sect(SpecificationLimits)}}.
type ProcessSpecificationType struct {
	ControlLimits       *ControlLimitsType       `xml:"ControlLimits"`
	AlarmLimits         *AlarmLimitsType         `xml:"AlarmLimits"`
	SpecificationLimits *SpecificationLimitsType `xml:"SpecificationLimits"`
	*AbstractSpecificationType
}

// ProcessSpecification is {{block(Specification)}} that provides information used to assess the
//         conformance of a variable to process requirements.
type ProcessSpecification *ProcessSpecificationType

// ControlLimitsType is lower conformance boundary for a variable. > Note: immediate
//             concern or action may be required.
type ControlLimitsType struct {
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	Nominal      *NominalType      `xml:"Nominal"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
}

// AlarmLimitsType is lower conformance boundary for a variable. > Note: immediate
//             concern or action may be required.
type AlarmLimitsType struct {
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
}

// SpecificationLimitsType is lower conformance boundary for a variable. > Note: immediate
//             concern or action may be required.
type SpecificationLimitsType struct {
	UpperLimit *UpperLimitType `xml:"UpperLimit"`
	Nominal    *NominalType    `xml:"Nominal"`
	LowerLimit *LowerLimitType `xml:"LowerLimit"`
}

// RelationshipsType is {{block(Relationships)}} groups one or more
//         {{block(ConfigurationRelationship)}} types. See
//         {{package(Relationships)}}.
type RelationshipsType struct {
	Relationship []*RelationshipType `xml:"Relationship"`
	*AbstractConfigurationType
}

// Relationships is {{block(Relationships)}} groups one or more
//         {{block(ConfigurationRelationship)}} types. See
//         {{package(Relationships)}}.
type Relationships *RelationshipsType

// RelationshipTypeEnumType is The related entity is a peer
type RelationshipTypeEnumType string

// DeviceRoleEnumType is an auxiliary
type DeviceRoleEnumType string

// CriticalityEnumType is Not critical
type CriticalityEnumType string

// RelationshipType is A relationship between this component and something else
type RelationshipType struct {
	IdAttr          string `xml:"id,attr"`
	NameAttr        string `xml:"name,attr,omitempty"`
	TypeAttr        string `xml:"type,attr"`
	CriticalityAttr string `xml:"criticality,attr,omitempty"`
}

// Relationship is A relationship between this component and something else
type Relationship *RelationshipType

// ComponentRelationshipType is {{block(ConfigurationRelationship)}} that describes the association
//         between two components within a piece of equipment that function
//         independently but together perform a capability or service within a
//         piece of equipment.
type ComponentRelationshipType struct {
	IdRefAttr string `xml:"idRef,attr"`
	*RelationshipType
}

// ComponentRelationship is {{block(ConfigurationRelationship)}} that describes the association
//         between two components within a piece of equipment that function
//         independently but together perform a capability or service within a
//         piece of equipment.
type ComponentRelationship *ComponentRelationshipType

// DeviceRelationshipType is {{block(ConfigurationRelationship)}} that describes the association
//         between two pieces of equipment that function independently but together
//         perform a manufacturing operation.
type DeviceRelationshipType struct {
	DeviceUuidRefAttr string `xml:"deviceUuidRef,attr"`
	RoleAttr          string `xml:"role,attr,omitempty"`
	HrefAttr          string `xml:"href,attr,omitempty"`
	XlinkTypeAttr     string `xml:"xlink:type,attr,omitempty"`
	*RelationshipType
}

// DeviceRelationship is {{block(ConfigurationRelationship)}} that describes the association
//         between two pieces of equipment that function independently but together
//         perform a manufacturing operation.
type DeviceRelationship *DeviceRelationshipType

// CoordinateSystemTypeEnumType is For machine tools, the coordinate system in the work area
type CoordinateSystemTypeEnumType string

// CoordinateSystemsType is Description
type CoordinateSystemsType struct {
	CoordinateSystem []*CoordinateSystemType `xml:"CoordinateSystem"`
	*AbstractConfigurationType
}

// CoordinateSystems is {{block(CoordinateSystems)}} groups one or more
//         {{block(CoordinateSystem)}} entities. See
//         {{package(CoordinateSystems)}}.
type CoordinateSystems *CoordinateSystemsType

// CoordinateSystemType is See {{sect(Transformation)}}.
type CoordinateSystemType struct {
	IdAttr          string              `xml:"id,attr"`
	NameAttr        string              `xml:"name,attr,omitempty"`
	NativeNameAttr  string              `xml:"nativeName,attr,omitempty"`
	ParentIdRefAttr string              `xml:"parentIdRef,attr,omitempty"`
	TypeAttr        string              `xml:"type,attr"`
	Origin          *OriginType         `xml:"Origin"`
	Transformation  *TransformationType `xml:"Transformation"`
}

// OriginType is See {{sect(Origin)}}.
type OriginType struct {
	*FloatListValueType
}

// TransformationType is rotations about X, Y, and Z axes are expressed in A, B, and C
//             respectively within a 3-dimensional vector.
type TransformationType struct {
	Translation *FloatListValueType `xml:"Translation"`
	Rotation    *FloatListValueType `xml:"Rotation"`
}

// MotionTypeEnumType is The axis does not move.
type MotionTypeEnumType string

// ActuationTypeEnumType is There is no actuation of this Axis.
type ActuationTypeEnumType string

// MotionAxisType is The unit vector along which the motion occurs
type MotionAxisType struct {
	*FloatListValueType
}

// MotionDescriptionType is Any elements
type MotionDescriptionType struct {
}

// MotionType is See {{sect(Axis)}}.
type MotionType struct {
	IdAttr                    string                 `xml:"id,attr"`
	ParentIdRefAttr           string                 `xml:"parentIdRef,attr,omitempty"`
	CoordinateSystemIdRefAttr string                 `xml:"coordinateSystemIdRef,attr"`
	TypeAttr                  string                 `xml:"type,attr"`
	ActuationAttr             string                 `xml:"actuation,attr"`
	Description               *MotionDescriptionType `xml:"Description"`
	Origin                    *OriginType            `xml:"Origin"`
	Transformation            *TransformationType    `xml:"Transformation"`
	Axis                      *MotionAxisType        `xml:"Axis"`
	*AbstractConfigurationType
}

// Motion is See {{sect(Motion)}}.
type Motion *MotionType

// SolidModelIdRefType is A reference to another model
type SolidModelIdRefType string

// ItemRefType is A reference to an item in a model
type ItemRefType string

// SolidModelType is See {{sect(Scale)}}.
type SolidModelType struct {
	IdAttr                    string                   `xml:"id,attr"`
	SolidModelIdRefAttr       string                   `xml:"solidModelIdRef,attr,omitempty"`
	HrefAttr                  string                   `xml:"href,attr,omitempty"`
	XlinkTypeAttr             string                   `xml:"xlink:type,attr,omitempty"`
	ItemRefAttr               string                   `xml:"itemRef,attr,omitempty"`
	MediaTypeAttr             *SolidModelMediaTypeType `xml:"mediaType,attr"`
	CoordinateSystemIdRefAttr string                   `xml:"coordinateSystemIdRef,attr,omitempty"`
	UnitsAttr                 *UnitsType               `xml:"units,attr,omitempty"`
	NativeUnitsAttr           *NativeUnitsType         `xml:"nativeUnits,attr,omitempty"`
	Transformation            *TransformationType      `xml:"Transformation"`
	Scale                     *SolidModelScaleType     `xml:"Scale"`
	*AbstractConfigurationType
}

// SolidModel is See {{sect(SolidModel)}}.
type SolidModel *SolidModelType

// ScaleValueType is A three dimensional value 'X Y Z' or 'A B C'
type ScaleValueType *FloatListValueType

// SolidModelScaleType is The unit vector to scale the model
type SolidModelScaleType struct {
	*FloatListValueType
}

// SolidModelMediaTypeExtType is Extended tyoe for Solid model media types
type SolidModelMediaTypeExtType string

// SolidModelMediaTypeEnum is Parasolid XT Siemens data interchange format
type SolidModelMediaTypeEnum string

// SolidModelMediaTypeType is Solid model media types
type SolidModelMediaTypeType struct {
	SolidModelMediaTypeExtType string
	SolidModelMediaTypeEnum    string
}

// SampleIntervalType is The interval between adjacent sampleing of data
type SampleIntervalType float32

// DataItemSampleRateType is The frequency a measurement is sampled
type DataItemSampleRateType float32

// DataItemOptionType is The constrained value for this data item
type DataItemOptionType string

// DataItemValueType is The constrained value for this data item
type DataItemValueType string

// DataItemNumericValueType is The constrained value for this data item
type DataItemNumericValueType float32

// SourceComponentIdType is An idref to the component id
type SourceComponentIdType string

// SourceDataItemIdType is An idref to the data item id
type SourceDataItemIdType string

// ReferenceIdType is The item's reference to the data item or specificatiton
type ReferenceIdType string

// ComponentNameType is The name of a related component
type ComponentNameType string

// CoordinateSystemIdRefType is The id reference for the coordinate system associated with this data
//         item
type CoordinateSystemIdRefType string

// DiscreteType is An discrete event
type DiscreteType bool

// DataItemDescriptionType is Any elements
type DataItemDescriptionType struct {
}

// FilterValueType is The minimum limit on the change in a value
type FilterValueType float32

// CategoryType is The condition of the device
type CategoryType string

// NativeScaleType is The multiplier for the native value. Conversion divides by this value
type NativeScaleType float32

// RepresentationType is two dimensional set of {{termplural(key-value pair)}} where the
//             {{block(Entry)}} represents a row, and the value is a set of
//             {{term(key-value pair)}} {{block(Cell)}} elements. A {{term(table)}}
//             follows the same behavior as the {{term(data set)}} for change
//             tracking, clearing, and history. When an {{block(Entry)}} changes,
//             all {{block(Cell)}} elements update as a single unit following the
//             behavior of a {{term(data set)}}. > Note: It is best to use the
//             {{block(Variable)}} {{block(DataItem)}} {{property(type)}} if the
//             {{block(Cell)}} elements represent multiple semantic types. Each
//             {{block(Entry)}} in the {{term(table)}} **MUST** have a unique key.
//             Each {{block(Cell)}} of each {{block(Entry)}} in the {{term(table)}}
//             **MUST** have a unique key. See {{block(Representation)}} in
//             {{package(Observation Information Model)}}, for a description of
//             {{block(Entry)}} and {{block(Cell)}} elements.
type RepresentationType string

// DataItemFilterEnumType is data reported for a data item is provided on a periodic basis. The
//             `PERIOD` for reporting data is defined in the value of the
//             {{block(Filter)}}. The value of {{block(Filter)}} **MUST** be an
//             absolute value reported in seconds representing the time between
//             reported samples of the value of the data item.
type DataItemFilterEnumType string

// DataItemsType is information reported about a piece of equipment.
type DataItemsType struct {
	DataItem []*DataItemType `xml:"DataItem"`
}

// DataItemType is {{block(Relationships)}} groups one or more
//             {{block(ConfigurationRelationship)}} types. See
//             {{package(Relationships)}}.
type DataItemType struct {
	NameAttr                  string                     `xml:"name,attr,omitempty"`
	IdAttr                    string                     `xml:"id,attr"`
	TypeAttr                  *DataItemEnumType          `xml:"type,attr"`
	SubTypeAttr               *DataItemSubEnumType       `xml:"subType,attr,omitempty"`
	StatisticAttr             *DataItemStatisticsType    `xml:"statistic,attr,omitempty"`
	UnitsAttr                 *UnitsType                 `xml:"units,attr,omitempty"`
	NativeUnitsAttr           *NativeUnitsType           `xml:"nativeUnits,attr,omitempty"`
	NativeScaleAttr           float32                    `xml:"nativeScale,attr,omitempty"`
	CategoryAttr              string                     `xml:"category,attr"`
	CoordinateSystemAttr      string                     `xml:"coordinateSystem,attr,omitempty"`
	CoordinateSystemIdRefAttr string                     `xml:"coordinateSystemIdRef,attr,omitempty"`
	CompositionIdAttr         string                     `xml:"compositionId,attr,omitempty"`
	SampleRateAttr            float32                    `xml:"sampleRate,attr,omitempty"`
	RepresentationAttr        string                     `xml:"representation,attr,omitempty"`
	SignificantDigitsAttr     int                        `xml:"significantDigits,attr,omitempty"`
	DiscreteAttr              bool                       `xml:"discrete,attr,omitempty"`
	Source                    *DataItemSourceType        `xml:"Source"`
	Constraints               *DataItemConstraintsType   `xml:"Constraints"`
	Filters                   *FiltersType               `xml:"Filters"`
	InitialValue              float32                    `xml:"InitialValue"`
	ResetTrigger              *DataItemResetValueType    `xml:"ResetTrigger"`
	Definition                *DataItemDefinitionType    `xml:"Definition"`
	Relationships             *DataItemRelationshipsType `xml:"Relationships"`
}

// DataItemConstraintsType is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//             {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type DataItemConstraintsType struct {
	Value   []*DataItemValueElementType `xml:"Value"`
	Minimum float32                     `xml:"Minimum"`
	Maximum float32                     `xml:"Maximum"`
	Nominal float32                     `xml:"Nominal"`
	Filter  *DataItemFilterType         `xml:"Filter"`
}

// FiltersType is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//             {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type FiltersType struct {
	Filter []*DataItemFilterType `xml:"Filter"`
}

// DataItemBaseType is A starting point for a data item
type DataItemBaseType struct {
	Value string `xml:",chardata"`
}

// DataItemValueElementType is The value element
type DataItemValueElementType struct {
	Value string `xml:",chardata"`
}

// DataItemFilterType is The filter for the data item
type DataItemFilterType struct {
	TypeAttr string  `xml:"type,attr"`
	Value    float32 `xml:",chardata"`
}

// DataItemSourceType is A native data source
type DataItemSourceType struct {
	DataItemIdAttr    string `xml:"dataItemId,attr,omitempty"`
	ComponentIdAttr   string `xml:"componentId,attr,omitempty"`
	CompositionIdAttr string `xml:"compositionId,attr,omitempty"`
	Value             string `xml:",chardata"`
}

// DataItemDefinitionType is {{block(CellDefinitions)}} groups one or more
//             {{block(CellDefinition)}} entities. See {{sect(CellDefinition)}}.
type DataItemDefinitionType struct {
	Description      *DataItemDescriptionType `xml:"Description"`
	EntryDefinitions *EntryDefinitionsType    `xml:"EntryDefinitions"`
	CellDefinitions  *CellDefinitionsType     `xml:"CellDefinitions"`
}

// EntryDefinitionsType is semantic definition of an {{block(Entry)}}.
type EntryDefinitionsType struct {
	EntryDefinition []*EntryDefinitionType `xml:"EntryDefinition"`
}

// DefinitionAttrsType is The units of the measurement
type DefinitionAttrsType struct {
	KeyAttr     string               `xml:"key,attr,omitempty"`
	TypeAttr    *DataItemEnumType    `xml:"type,attr,omitempty"`
	KeyTypeAttr *DataItemEnumType    `xml:"keyType,attr,omitempty"`
	SubTypeAttr *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	UnitsAttr   *UnitsType           `xml:"units,attr,omitempty"`
}

// EntryDefinitionType is {{block(CellDefinitions)}} groups one or more
//             {{block(CellDefinition)}} entities. See {{sect(CellDefinition)}}.
type EntryDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
	CellDefinitions     *CellDefinitionsType     `xml:"CellDefinitions"`
}

// CellDefinitionsType is semantic definition of a {{block(Cell)}}.
type CellDefinitionsType struct {
	CellDefinition []*CellDefinitionType `xml:"CellDefinition"`
}

// CellDefinitionType is See {{sect(Description)}}.
type CellDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
}

// DataItemRelationshipsType is Organizes DataItemRelationship and SpecificationRelationship
type DataItemRelationshipsType struct {
	AbstractDataItemRelationship []*AbstractDataItemRelationshipType `xml:"AbstractDataItemRelationship"`
}

// AbstractDataItemRelationshipType is Description
type AbstractDataItemRelationshipType struct {
	NameAttr  string `xml:"name,attr,omitempty"`
	IdRefAttr string `xml:"idRef,attr"`
}

// AbstractDataItemRelationship is Description
type AbstractDataItemRelationship *AbstractDataItemRelationshipType

// DataItemRelationshipTypeEnumType is The referenced DataItem provides the observed values.
type DataItemRelationshipTypeEnumType string

// DataItemRelationshipType is {{block(AbstractDataItemRelationship)}} that provides a semantic
//         reference to another {{block(DataItem)}} described by the
//         {{property(type)}} property.
type DataItemRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// DataItemRelationship is {{block(AbstractDataItemRelationship)}} that provides a semantic
//         reference to another {{block(DataItem)}} described by the
//         {{property(type)}} property.
type DataItemRelationship *DataItemRelationshipType

// SpecificationRelationshipTypeEnumType is The referenced DataItem provides process limits.
type SpecificationRelationshipTypeEnumType string

// SpecificationRelationshipType is {{block(AbstractDataItemRelationship)}} that provides a semantic
//         reference to another {{block(Specification)}} described by the
//         {{property(type)}} and {{property(idRef)}} property.
type SpecificationRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// SpecificationRelationship is {{block(AbstractDataItemRelationship)}} that provides a semantic
//         reference to another {{block(Specification)}} described by the
//         {{property(type)}} and {{property(idRef)}} property.
type SpecificationRelationship *SpecificationRelationshipType
