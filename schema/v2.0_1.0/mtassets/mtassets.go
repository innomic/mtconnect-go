// Code generated by xgen. DO NOT EDIT.

package mtassets

// MTConnectAssets is root entity of an {{term(MTConnectAssets Response Document)}} that
//         contains the {{term(Asset Information Model)}} of {{block(Asset)}}
//         types. ![MTConnectAssets](figures/MTConnectAssets.png
//         "MTConnectAssets"){: width="0.8"} > Note:
//         Additional properties of {{block(MTConnectAssets)}} **MAY** be defined
//         for schema and namespace declaration. See {{sect(Schema and Namespace
//         Declaration Information)}} for an {{term(XML)}} example.
type MTConnectAssets *MTConnectAssetsType

// SenderType is The sender of the message
type SenderType string

// CreationTimeType is The date and time the document was created
type CreationTimeType string

// SequenceType is A sequence number
type SequenceType int

// TestIndicatorType is A debugging flag for testing.
type TestIndicatorType bool

// InstanceIdType is The instance number of the agent, used for fault tolerance
type InstanceIdType int

// BufferSizeType is The size of the agents buffer
type BufferSizeType int

// TimestampType is The time the sample was reported
type TimestampType string

// OccurrenceTimeType is The time a sample occurred
type OccurrenceTimeType string

// VersionType is A version number
type VersionType string

// NameType is A short name for any element
type NameType string

// UuidType is A universally unique id that uniquely identifies the element for
//         it's entire life
type UuidType string

// SerialNumberAttrType is A serial number for a piece of equipment
type SerialNumberAttrType string

// ItemSourceType is The measurement source
type ItemSourceType string

// RateType is A sample rate in milliseconds per sample
type RateType float32

// ComponentIdType is The id of the component (maps to the id from probe)
type ComponentIdType string

// IDType is An identifier
type IDType string

// SignificantDigitsValueType is The number significant digits
type SignificantDigitsValueType int

// CompositionIdType is The item's reference to the Device model composition
type CompositionIdType string

// DurationTimeType is A length of time in seconds
type DurationTimeType float32

// RemovedType is A flag indicating the item has been removed
type RemovedType bool

// KeyType is The key for adata set
type KeyType string

// DeviceModelChangeTimeType is A timestamp in 8601 format of the last update of the Device information
//         for any device
type DeviceModelChangeTimeType string

// AssetIdType is The unique id of the asset
type AssetIdType string

// AssetAttrTypeType is An asset type
type AssetAttrTypeType string

// AssetBufferSizeType is The maximum number of assets
type AssetBufferSizeType int

// AssetCountAttrType is The number of assets
type AssetCountAttrType int

// FloatListValueType is Common floating point sample value
type FloatListValueType []float32

// ThreeSpaceValueType is A three dimensional value 'X Y Z' or 'A B C'
type ThreeSpaceValueType *FloatListValueType

// DescriptionTextType is A description
type DescriptionTextType string

// DataItemEnumExtType is Extended tyoe for The types of measurements available
type DataItemEnumExtType string

// DataItemEnumEnum is A user variable
type DataItemEnumEnum string

// DataItemEnumType is The types of measurements available
type DataItemEnumType struct {
	DataItemEnumExtType string
	DataItemEnumEnum    string
}

// DataItemSubEnumExtType is Extended tyoe for The sub-types for a measurement
type DataItemSubEnumExtType string

// DataItemSubEnumEnum is step of a discrete manufacturing process.
type DataItemSubEnumEnum string

// DataItemSubEnumType is The sub-types for a measurement
type DataItemSubEnumType struct {
	DataItemSubEnumExtType string
	DataItemSubEnumEnum    string
}

// DataItemStatisticsExtType is Extended tyoe for Statistical operations on data
type DataItemStatisticsExtType string

// DataItemStatisticsEnum is statistical Standard Deviation value calculated for the data item
//             during the calculation period.
type DataItemStatisticsEnum string

// DataItemStatisticsType is Statistical operations on data
type DataItemStatisticsType struct {
	DataItemStatisticsExtType string
	DataItemStatisticsEnum    string
}

// UnitsExtType is Extended tyoe for The units supported
type UnitsExtType string

// UnitsEnum is gram.
type UnitsEnum string

// UnitsType is The units supported
type UnitsType struct {
	UnitsExtType string
	UnitsEnum    string
}

// NativeUnitsExtType is Extended tyoe for The units supported for the source equipment that can
//         be converted into MTC Units.
type NativeUnitsExtType string

// NativeUnitsEnum is pascal per minute.
type NativeUnitsEnum string

// NativeUnitsType is The units supported for the source equipment that can be converted into
//         MTC Units.
type NativeUnitsType struct {
	NativeUnitsExtType string
	NativeUnitsEnum    string
}

// CoordinateSystemEnumType is coordinate system that represents the working area for a particular
//             workpiece whose origin is shifted within the `MACHINE` coordinate
//             system. If the `WORK` coordinates are not currently defined in the
//             piece of equipment, the `MACHINE` coordinates will be used.
type CoordinateSystemEnumType string

// DataItemResetValueExtType is Extended tyoe for The reset intervals
type DataItemResetValueExtType string

// DataItemResetValueEnum is {{term(observation)}} of the {{block(DataItem)}} is to be reset at
//             the end of a 7-day period.
type DataItemResetValueEnum string

// DataItemResetValueType is The reset intervals
type DataItemResetValueType struct {
	DataItemResetValueExtType string
	DataItemResetValueEnum    string
}

// HeaderAttributesType is A timestamp in 8601 format of the last update of the Device
//           information for any device
type HeaderAttributesType struct {
	VersionAttr               string `xml:"version,attr"`
	CreationTimeAttr          string `xml:"creationTime,attr"`
	TestIndicatorAttr         bool   `xml:"testIndicator,attr,omitempty"`
	InstanceIdAttr            int    `xml:"instanceId,attr"`
	SenderAttr                string `xml:"sender,attr"`
	DeviceModelChangeTimeAttr string `xml:"deviceModelChangeTime,attr"`
}

// HeaderType is provides information from an {{term(agent)}} defining version
//         information, storage capacity, and parameters associated with the data
//         management within the {{term(agent)}}.
type HeaderType struct {
	HeaderAttributesType *HeaderAttributesType
	AssetBufferSizeAttr  int    `xml:"assetBufferSize,attr"`
	AssetCountAttr       int    `xml:"assetCount,attr"`
	Value                string `xml:",chardata"`
}

// MTConnectAssetsType is {{block(Assets)}} groups one or more {{block(Asset)}} types. See
//             {{package(Asset Information Model)}} for more details.
type MTConnectAssetsType struct {
	Header *HeaderType `xml:"Header"`
	Assets *AssetsType `xml:"Assets"`
}

// SourceType is A URI reference
type SourceType string

// AssetDescriptionType is Any elements
type AssetDescriptionType struct {
}

// AssetsType is {{block(Assets)}} groups one or more {{block(Asset)}} types. See
//         {{package(Asset Information Model)}} for more details.
type AssetsType struct {
	Asset []*AssetType `xml:"Asset"`
}

// AssetType is {{term(asset)}} that is used by the manufacturing process to perform
//         tasks. > Note 1 to entry: An {{term(Asset)}} relies upon an
//         {{term(Device)}} to provide {{termplural(observation)}} and information
//         about itself and the {{term(Device)}} revises the information to reflect
//         changes to the {{term(Asset)}} during their interaction. Examples of
//         {{termplural(Asset)}} are cutting tools, Part Information, Manufacturing
//         Processes, Fixtures, and Files. > Note 2 to entry: A singular
//         {{property(assetId,Asset)}} uniquely identifies an {{term(Asset)}}
//         throughout its lifecycle and is used to track and relate the
//         {{term(Asset)}} to other {{termplural(Device)}} and entities. > Note
//         3 to entry: {{termplural(Asset)}} are temporally associated with a
//         device and can be removed from the device without damage or alteration
//         to its primary functions.
type AssetType struct {
	AssetIdAttr    string `xml:"assetId,attr"`
	TimestampAttr  string `xml:"timestamp,attr"`
	DeviceUuidAttr string `xml:"deviceUuid,attr"`
	RemovedAttr    bool   `xml:"removed,attr,omitempty"`
}

// Asset is {{term(asset)}} that is used by the manufacturing process to perform
//         tasks. > Note 1 to entry: An {{term(Asset)}} relies upon an
//         {{term(Device)}} to provide {{termplural(observation)}} and information
//         about itself and the {{term(Device)}} revises the information to reflect
//         changes to the {{term(Asset)}} during their interaction. Examples of
//         {{termplural(Asset)}} are cutting tools, Part Information, Manufacturing
//         Processes, Fixtures, and Files. > Note 2 to entry: A singular
//         {{property(assetId,Asset)}} uniquely identifies an {{term(Asset)}}
//         throughout its lifecycle and is used to track and relate the
//         {{term(Asset)}} to other {{termplural(Device)}} and entities. > Note
//         3 to entry: {{termplural(Asset)}} are temporally associated with a
//         device and can be removed from the device without damage or alteration
//         to its primary functions.
type Asset *AssetType

// SampleIntervalType is The interval between adjacent sampleing of data
type SampleIntervalType float32

// DataItemSampleRateType is The frequency a measurement is sampled
type DataItemSampleRateType float32

// DataItemOptionType is The constrained value for this data item
type DataItemOptionType string

// DataItemValueType is The constrained value for this data item
type DataItemValueType string

// DataItemNumericValueType is The constrained value for this data item
type DataItemNumericValueType float32

// SourceComponentIdType is An idref to the component id
type SourceComponentIdType string

// SourceDataItemIdType is An idref to the data item id
type SourceDataItemIdType string

// ReferenceIdType is The item's reference to the data item or specificatiton
type ReferenceIdType string

// ComponentNameType is The name of a related component
type ComponentNameType string

// CoordinateSystemIdRefType is The id reference for the coordinate system associated with this data
//         item
type CoordinateSystemIdRefType string

// DiscreteType is An discrete event
type DiscreteType bool

// DataItemDescriptionType is Any elements
type DataItemDescriptionType struct {
}

// FilterValueType is The minimum limit on the change in a value
type FilterValueType float32

// CategoryType is The condition of the device
type CategoryType string

// NativeScaleType is The multiplier for the native value. Conversion divides by this value
type NativeScaleType float32

// RepresentationType is two dimensional set of {{termplural(key-value pair)}} where the
//             {{block(Entry)}} represents a row, and the value is a set of
//             {{term(key-value pair)}} {{block(Cell)}} elements. A {{term(table)}}
//             follows the same behavior as the {{term(data set)}} for change
//             tracking, clearing, and history. When an {{block(Entry)}} changes,
//             all {{block(Cell)}} elements update as a single unit following the
//             behavior of a {{term(data set)}}. > Note: It is best to use the
//             {{block(Variable)}} {{block(DataItem)}} {{property(type)}} if the
//             {{block(Cell)}} elements represent multiple semantic types. Each
//             {{block(Entry)}} in the {{term(table)}} **MUST** have a unique key.
//             Each {{block(Cell)}} of each {{block(Entry)}} in the {{term(table)}}
//             **MUST** have a unique key. See {{block(Representation)}} in
//             {{package(Observation Information Model)}}, for a description of
//             {{block(Entry)}} and {{block(Cell)}} elements.
type RepresentationType string

// DataItemFilterEnumType is data reported for a data item is provided on a periodic basis. The
//             `PERIOD` for reporting data is defined in the value of the
//             {{block(Filter)}}. The value of {{block(Filter)}} **MUST** be an
//             absolute value reported in seconds representing the time between
//             reported samples of the value of the data item.
type DataItemFilterEnumType string

// DataItemsType is information reported about a piece of equipment.
type DataItemsType struct {
	DataItem []*DataItemType `xml:"DataItem"`
}

// DataItemType is {{block(Relationships)}} groups one or more {{block(Relationship)}}
//             types. See {{package(Relationships)}}.
type DataItemType struct {
	NameAttr                  string                     `xml:"name,attr,omitempty"`
	IdAttr                    string                     `xml:"id,attr"`
	TypeAttr                  *DataItemEnumType          `xml:"type,attr"`
	SubTypeAttr               *DataItemSubEnumType       `xml:"subType,attr,omitempty"`
	StatisticAttr             *DataItemStatisticsType    `xml:"statistic,attr,omitempty"`
	UnitsAttr                 *UnitsType                 `xml:"units,attr,omitempty"`
	NativeUnitsAttr           *NativeUnitsType           `xml:"nativeUnits,attr,omitempty"`
	NativeScaleAttr           float32                    `xml:"nativeScale,attr,omitempty"`
	CategoryAttr              string                     `xml:"category,attr"`
	CoordinateSystemAttr      string                     `xml:"coordinateSystem,attr,omitempty"`
	CoordinateSystemIdRefAttr string                     `xml:"coordinateSystemIdRef,attr,omitempty"`
	CompositionIdAttr         string                     `xml:"compositionId,attr,omitempty"`
	SampleRateAttr            float32                    `xml:"sampleRate,attr,omitempty"`
	RepresentationAttr        string                     `xml:"representation,attr,omitempty"`
	SignificantDigitsAttr     int                        `xml:"significantDigits,attr,omitempty"`
	DiscreteAttr              bool                       `xml:"discrete,attr,omitempty"`
	Source                    *DataItemSourceType        `xml:"Source"`
	Constraints               *DataItemConstraintsType   `xml:"Constraints"`
	Filters                   *FiltersType               `xml:"Filters"`
	InitialValue              float32                    `xml:"InitialValue"`
	ResetTrigger              *DataItemResetValueType    `xml:"ResetTrigger"`
	Definition                *DataItemDefinitionType    `xml:"Definition"`
	Relationships             *DataItemRelationshipsType `xml:"Relationships"`
}

// DataItemConstraintsType is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//             {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type DataItemConstraintsType struct {
	Value   []*DataItemValueElementType `xml:"Value"`
	Minimum float32                     `xml:"Minimum"`
	Maximum float32                     `xml:"Maximum"`
	Nominal float32                     `xml:"Nominal"`
	Filter  *DataItemFilterType         `xml:"Filter"`
}

// FiltersType is **DEPRECATED** in *MTConnect Version 1.4*. Moved to the
//             {{block(Filters)}}. See {{package(Properties of DataItem)}}.
type FiltersType struct {
	Filter []*DataItemFilterType `xml:"Filter"`
}

// DataItemBaseType is A starting point for a data item
type DataItemBaseType struct {
	Value string `xml:",chardata"`
}

// DataItemValueElementType is The value element
type DataItemValueElementType struct {
	Value string `xml:",chardata"`
}

// DataItemFilterType is The filter for the data item
type DataItemFilterType struct {
	TypeAttr string  `xml:"type,attr"`
	Value    float32 `xml:",chardata"`
}

// DataItemSourceType is A native data source
type DataItemSourceType struct {
	DataItemIdAttr    string `xml:"dataItemId,attr,omitempty"`
	ComponentIdAttr   string `xml:"componentId,attr,omitempty"`
	CompositionIdAttr string `xml:"compositionId,attr,omitempty"`
	Value             string `xml:",chardata"`
}

// DataItemDefinitionType is {{block(CellDefinitions)}} groups one or more
//             {{block(CellDefinition)}} entities. See {{sect(CellDefinition)}}.
type DataItemDefinitionType struct {
	Description      *DataItemDescriptionType `xml:"Description"`
	EntryDefinitions *EntryDefinitionsType    `xml:"EntryDefinitions"`
	CellDefinitions  *CellDefinitionsType     `xml:"CellDefinitions"`
}

// EntryDefinitionsType is semantic definition of an {{block(Entry)}}.
type EntryDefinitionsType struct {
	EntryDefinition []*EntryDefinitionType `xml:"EntryDefinition"`
}

// DefinitionAttrsType is The units of the measurement
type DefinitionAttrsType struct {
	KeyAttr     string               `xml:"key,attr,omitempty"`
	TypeAttr    *DataItemEnumType    `xml:"type,attr,omitempty"`
	KeyTypeAttr *DataItemEnumType    `xml:"keyType,attr,omitempty"`
	SubTypeAttr *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	UnitsAttr   *UnitsType           `xml:"units,attr,omitempty"`
}

// EntryDefinitionType is {{block(CellDefinitions)}} groups one or more
//             {{block(CellDefinition)}} entities. See {{sect(CellDefinition)}}.
type EntryDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
	CellDefinitions     *CellDefinitionsType     `xml:"CellDefinitions"`
}

// CellDefinitionsType is semantic definition of a {{block(Cell)}}.
type CellDefinitionsType struct {
	CellDefinition []*CellDefinitionType `xml:"CellDefinition"`
}

// CellDefinitionType is See {{sect(Description)}}.
type CellDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
}

// DataItemRelationshipsType is Organizes DataItemRelationship and SpecificationRelationship
type DataItemRelationshipsType struct {
	AbstractDataItemRelationship []*AbstractDataItemRelationshipType `xml:"AbstractDataItemRelationship"`
}

// AbstractDataItemRelationshipType is Common base for data item relationship
type AbstractDataItemRelationshipType struct {
	NameAttr  string `xml:"name,attr,omitempty"`
	IdRefAttr string `xml:"idRef,attr"`
}

// AbstractDataItemRelationship is Common base for data item relationship
type AbstractDataItemRelationship *AbstractDataItemRelationshipType

// DataItemRelationshipTypeEnumType is The referenced DataItem provides the observed values.
type DataItemRelationshipTypeEnumType string

// DataItemRelationshipType is {{block(Relationship)}} that provides a semantic reference to another
//         {{block(DataItem)}} described by the {{property(type)}} property.
type DataItemRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// DataItemRelationship is {{block(Relationship)}} that provides a semantic reference to another
//         {{block(DataItem)}} described by the {{property(type)}} property.
type DataItemRelationship *DataItemRelationshipType

// SpecificationRelationshipTypeEnumType is The referenced DataItem provides process limits.
type SpecificationRelationshipTypeEnumType string

// SpecificationRelationshipType is {{block(Relationship)}} that provides a semantic reference to another
//         {{block(Specification)}} described by the {{property(type)}} and
//         {{property(idRef)}} property.
type SpecificationRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// SpecificationRelationship is {{block(Relationship)}} that provides a semantic reference to another
//         {{block(Specification)}} described by the {{property(type)}} and
//         {{property(idRef)}} property.
type SpecificationRelationship *SpecificationRelationshipType

// ResultValueType is An events data
type ResultValueType string

// DataItemIdType is The item's unique ID that references the data item id from probe
type DataItemIdType string

// NativeCodeType is An Condition code as defined by the component
type NativeCodeType string

// StreamsType is Description
type StreamsType struct {
	DeviceStream []*DeviceStreamType `xml:"DeviceStream"`
}

// DeviceStreamType is {{block(ComponentStream)}} {{termplural(organize)}} the
//             {{block(Observation)}} entities associated with the
//             {{block(Component)}}. See {{package(Observation Information Model)}}
//             for the {{block(ComponentStream)}} model. > Note 1 to entry: In
//             the {{term(XML)}} representation, {{block(ComponentStream)}}
//             entities **MUST NOT** appear in the {{term(MTConnectDevices Response
//             Document)}}. > Note 2 to entry: In the {{term(XML)}}
//             representation, {{block(ComponentStream)}} entities **MUST** appear
//             only in the {{term(MTConnectStreams Response Document)}}.
type DeviceStreamType struct {
	NameAttr        string                 `xml:"name,attr"`
	UuidAttr        string                 `xml:"uuid,attr"`
	ComponentStream []*ComponentStreamType `xml:"ComponentStream"`
}

// ComponentStreamType is Description
type ComponentStreamType struct {
	ComponentIdAttr string             `xml:"componentId,attr"`
	NameAttr        string             `xml:"name,attr,omitempty"`
	NativeNameAttr  string             `xml:"nativeName,attr,omitempty"`
	ComponentAttr   string             `xml:"component,attr"`
	UuidAttr        string             `xml:"uuid,attr,omitempty"`
	Samples         *SamplesType       `xml:"Samples"`
	Events          *EventsType        `xml:"Events"`
	Condition       *ConditionListType `xml:"Condition"`
}

// SamplesType is {{block(Samples)}} groups one or more {{block(Sample)}} entities. See
//         {{sect(Sample)}}.
type SamplesType struct {
	Sample []*SampleType `xml:"Sample"`
}

// EventsType is {{block(Events)}} groups one or more {{block(Event)}} entities. See
//         {{sect(Event)}}.
type EventsType struct {
	Event []*EventType `xml:"Event"`
}

// ConditionListType is A collection of conditions
type ConditionListType struct {
	Condition []*ConditionType `xml:"Condition"`
}

// UnavailableValueType is Data is unavailable
type UnavailableValueType string

// ObservationType is The identifier of the sub-element this result is in reference to
type ObservationType struct {
	SequenceAttr      int                  `xml:"sequence,attr"`
	SubTypeAttr       *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	TimestampAttr     string               `xml:"timestamp,attr"`
	NameAttr          string               `xml:"name,attr,omitempty"`
	DataItemIdAttr    string               `xml:"dataItemId,attr"`
	CompositionIdAttr string               `xml:"compositionId,attr,omitempty"`
}

// IntegerEventValueType is Integer event value
type IntegerEventValueType struct {
	Integer              int
	UnavailableValueType string
}

// FloatEventValueType is Integer event value
type FloatEventValueType struct {
	Float                float32
	UnavailableValueType string
}

// StringEventValueType is Srring event value
type StringEventValueType struct {
	String               string
	UnavailableValueType string
}

// StringListValueType is A list of axis names
type StringListValueType []string

// StringListEventValueType is A list of axis for an event
type StringListEventValueType struct {
	StringListValueType  *StringListValueType
	UnavailableValueType string
}

// EventType is Description
type EventType struct {
	ObservationType    *ObservationType
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
}

// Event is Description
type Event *EventType

// StringEventType is An unfaceted string event
type StringEventType struct {
}

// StringEvent is An unfaceted string event
type StringEvent *StringEventType

// StringListEventType is An unfaceted string event
type StringListEventType struct {
}

// StringListEvent is An unfaceted string event
type StringListEvent *StringListEventType

// IntegerEventType is An event with an integer value
type IntegerEventType struct {
}

// IntegerEvent is An event with an integer value
type IntegerEvent *IntegerEventType

// FloatEventType is An event with an integer value
type FloatEventType struct {
}

// FloatEvent is An event with an integer value
type FloatEvent *FloatEventType

// ActiveAxesType is {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesType struct {
	*StringEventType
}

// ActiveAxes is {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxes *ActiveAxesType

// ActuatorStateValueType is Value is indeterminate
type ActuatorStateValueType string

// ActuatorStateType is {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateType struct {
}

// ActuatorState is {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorState *ActuatorStateType

// AssetChangedType is {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	*StringEventType
}

// AssetChanged is {{def(EventEnum:ASSET_CHANGED)}}
type AssetChanged *AssetChangedType

// AssetRemovedType is {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	*StringEventType
}

// AssetRemoved is {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemoved *AssetRemovedType

// AvailabilityValueType is Value is indeterminate
type AvailabilityValueType string

// AvailabilityType is {{def(EventEnum:AVAILABILITY)}}
type AvailabilityType struct {
}

// Availability is {{def(EventEnum:AVAILABILITY)}}
type Availability *AvailabilityType

// AxisCouplingValueType is Value is indeterminate
type AxisCouplingValueType string

// AxisCouplingType is {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingType struct {
}

// AxisCoupling is {{def(EventEnum:AXIS_COUPLING)}}
type AxisCoupling *AxisCouplingType

// AxisFeedrateOverrideType is {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideType struct {
	*FloatEventType
}

// AxisFeedrateOverride is {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverride *AxisFeedrateOverrideType

// AxisInterlockValueType is Value is indeterminate
type AxisInterlockValueType string

// AxisInterlockType is {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockType struct {
}

// AxisInterlock is {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlock *AxisInterlockType

// AxisStateValueType is Value is indeterminate
type AxisStateValueType string

// AxisStateType is {{def(EventEnum:AXIS_STATE)}}
type AxisStateType struct {
}

// AxisState is {{def(EventEnum:AXIS_STATE)}}
type AxisState *AxisStateType

// BlockType is {{def(EventEnum:BLOCK)}}
type BlockType struct {
	*StringEventType
}

// Block is {{def(EventEnum:BLOCK)}}
type Block *BlockType

// BlockCountType is {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountType struct {
	*IntegerEventType
}

// BlockCount is {{def(EventEnum:BLOCK_COUNT)}}
type BlockCount *BlockCountType

// ChuckInterlockValueType is Value is indeterminate
type ChuckInterlockValueType string

// ChuckInterlockType is {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockType struct {
}

// ChuckInterlock is {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlock *ChuckInterlockType

// ChuckStateValueType is Value is indeterminate
type ChuckStateValueType string

// ChuckStateType is {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateType struct {
}

// ChuckState is {{def(EventEnum:CHUCK_STATE)}}
type ChuckState *ChuckStateType

// CodeType is {{def(EventEnum:CODE)}}
type CodeType struct {
	*StringEventType
}

// Code is {{def(EventEnum:CODE)}}
type Code *CodeType

// CompositionStateType is {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateType struct {
	*StringEventType
}

// CompositionState is {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionState *CompositionStateType

// ControllerModeValueType is Value is indeterminate
type ControllerModeValueType string

// ControllerModeType is {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeType struct {
}

// ControllerMode is {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerMode *ControllerModeType

// ControllerModeOverrideValueType is Value is indeterminate
type ControllerModeOverrideValueType string

// ControllerModeOverrideType is {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideType struct {
}

// ControllerModeOverride is {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverride *ControllerModeOverrideType

// CoupledAxesType is {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesType struct {
	*StringEventType
}

// CoupledAxes is {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxes *CoupledAxesType

// DateCodeType is {{def(EventEnum:DATE_CODE)}}
type DateCodeType struct {
	*StringEventType
}

// DateCode is {{def(EventEnum:DATE_CODE)}}
type DateCode *DateCodeType

// DeviceUuidType is {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidType struct {
	*StringEventType
}

// DeviceUuid is {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuid *DeviceUuidType

// DirectionValueType is Value is indeterminate
type DirectionValueType string

// DirectionType is {{def(EventEnum:DIRECTION)}}
type DirectionType struct {
}

// Direction is {{def(EventEnum:DIRECTION)}}
type Direction *DirectionType

// DoorStateValueType is Value is indeterminate
type DoorStateValueType string

// DoorStateType is {{def(EventEnum:DOOR_STATE)}}
type DoorStateType struct {
}

// DoorState is {{def(EventEnum:DOOR_STATE)}}
type DoorState *DoorStateType

// EmergencyStopValueType is Value is indeterminate
type EmergencyStopValueType string

// EmergencyStopType is {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopType struct {
}

// EmergencyStop is {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStop *EmergencyStopType

// EndOfBarValueType is Value is indeterminate
type EndOfBarValueType string

// EndOfBarType is {{def(EventEnum:END_OF_BAR)}}
type EndOfBarType struct {
}

// EndOfBar is {{def(EventEnum:END_OF_BAR)}}
type EndOfBar *EndOfBarType

// EquipmentModeValueType is Value is indeterminate
type EquipmentModeValueType string

// EquipmentModeType is {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeType struct {
}

// EquipmentMode is {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentMode *EquipmentModeType

// ExecutionValueType is Value is indeterminate
type ExecutionValueType string

// ExecutionType is {{def(EventEnum:EXECUTION)}}
type ExecutionType struct {
}

// Execution is {{def(EventEnum:EXECUTION)}}
type Execution *ExecutionType

// FunctionalModeValueType is Value is indeterminate
type FunctionalModeValueType string

// FunctionalModeType is {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeType struct {
}

// FunctionalMode is {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalMode *FunctionalModeType

// HardnessType is {{def(EventEnum:HARDNESS)}}
type HardnessType struct {
	*FloatEventType
}

// Hardness is {{def(EventEnum:HARDNESS)}}
type Hardness *HardnessType

// LineType is {{def(EventEnum:LINE)}}
type LineType struct {
	*StringEventType
}

// Line is {{def(EventEnum:LINE)}}
type Line *LineType

// LineLabelType is {{def(EventEnum:LINE_LABEL)}}
type LineLabelType struct {
	*StringEventType
}

// LineLabel is {{def(EventEnum:LINE_LABEL)}}
type LineLabel *LineLabelType

// LineNumberType is {{def(EventEnum:LINE_NUMBER)}}
type LineNumberType struct {
	*IntegerEventType
}

// LineNumber is {{def(EventEnum:LINE_NUMBER)}}
type LineNumber *LineNumberType

// MaterialType is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type MaterialType struct {
	*StringEventType
}

// Material is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type Material *MaterialType

// MaterialLayerType is {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerType struct {
	*IntegerEventType
}

// MaterialLayer is {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayer *MaterialLayerType

// MessageType is {{def(EventEnum:MESSAGE)}}
type MessageType struct {
	*StringEventType
}

// Message is {{def(EventEnum:MESSAGE)}}
type Message *MessageType

// OperatorIdType is {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdType struct {
	*StringEventType
}

// OperatorId is {{def(EventEnum:OPERATOR_ID)}}
type OperatorId *OperatorIdType

// PalletIdType is {{def(EventEnum:PALLET_ID)}}
type PalletIdType struct {
	*StringEventType
}

// PalletId is {{def(EventEnum:PALLET_ID)}}
type PalletId *PalletIdType

// PartCountType is {{def(EventEnum:PART_COUNT)}}
type PartCountType struct {
	*IntegerEventType
}

// PartCount is {{def(EventEnum:PART_COUNT)}}
type PartCount *PartCountTypeType

// PartDetectValueType is Value is indeterminate
type PartDetectValueType string

// PartDetectType is {{def(EventEnum:PART_DETECT)}}
type PartDetectType struct {
}

// PartDetect is {{def(EventEnum:PART_DETECT)}}
type PartDetect *PartDetectType

// PartIdType is {{def(EventEnum:PART_ID)}}
type PartIdType struct {
	*StringEventType
}

// PartId is {{def(EventEnum:PART_ID)}}
type PartId *PartIdType

// PartNumberType is {{def(EventEnum:PART_NUMBER)}}
type PartNumberType struct {
	*StringEventType
}

// PartNumber is {{def(EventEnum:PART_NUMBER)}}
type PartNumber *PartNumberType

// PathFeedrateOverrideType is {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideType struct {
	*FloatEventType
}

// PathFeedrateOverride is {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverride *PathFeedrateOverrideType

// PathModeValueType is Value is indeterminate
type PathModeValueType string

// PathModeType is {{def(EventEnum:PATH_MODE)}}
type PathModeType struct {
}

// PathMode is {{def(EventEnum:PATH_MODE)}}
type PathMode *PathModeType

// PowerStateValueType is Value is indeterminate
type PowerStateValueType string

// PowerStateType is {{def(EventEnum:POWER_STATE)}}
type PowerStateType struct {
}

// PowerState is {{def(EventEnum:POWER_STATE)}}
type PowerState *PowerStateType

// PowerStatusValueType is Value is indeterminate
type PowerStatusValueType string

// PowerStatusType is {{def(EventEnum:POWER_STATUS)}}
type PowerStatusType struct {
}

// PowerStatus is {{def(EventEnum:POWER_STATUS)}}
type PowerStatus *PowerStatusType

// ProcessTimeType is {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeType struct {
	*StringEventType
}

// ProcessTime is {{def(EventEnum:PROCESS_TIME)}}
type ProcessTime *ProcessTimeType

// ProgramType is {{def(EventEnum:PROGRAM)}}
type ProgramType struct {
	*StringEventType
}

// Program is {{def(EventEnum:PROGRAM)}}
type Program *ProgramType

// ProgramCommentType is {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentType struct {
	*StringEventType
}

// ProgramComment is {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramComment *ProgramCommentType

// ProgramEditValueType is Value is indeterminate
type ProgramEditValueType string

// ProgramEditType is {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditType struct {
}

// ProgramEdit is {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEdit *ProgramEditType

// ProgramEditNameType is {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameType struct {
	*StringEventType
}

// ProgramEditName is {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditName *ProgramEditNameType

// ProgramHeaderType is {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderType struct {
	*StringEventType
}

// ProgramHeader is {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeader *ProgramHeaderType

// ProgramLocationType is {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationType struct {
	*StringEventType
}

// ProgramLocation is {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocation *ProgramLocationTypeType

// ProgramLocationTypeValueType is Value is indeterminate
type ProgramLocationTypeValueType string

// ProgramLocationTypeType is {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeType struct {
}

// ProgramNestLevelType is {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelType struct {
	*IntegerEventType
}

// ProgramNestLevel is {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevel *ProgramNestLevelType

// RotaryModeValueType is Value is indeterminate
type RotaryModeValueType string

// RotaryModeType is {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeType struct {
}

// RotaryMode is {{def(EventEnum:ROTARY_MODE)}}
type RotaryMode *RotaryModeType

// RotaryVelocityOverrideType is {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command represents a
//         percentage change to the velocity calculated by a logic or motion
//         program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideType struct {
	*FloatEventType
}

// RotaryVelocityOverride is {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command represents a
//         percentage change to the velocity calculated by a logic or motion
//         program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverride *RotaryVelocityOverrideType

// SerialNumberType is {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberType struct {
	*StringEventType
}

// SerialNumber is {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumber *SerialNumberType

// SpindleInterlockValueType is Value is indeterminate
type SpindleInterlockValueType string

// SpindleInterlockType is {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockType struct {
}

// SpindleInterlock is {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlock *SpindleInterlockType

// ToolAssetIdType is {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdType struct {
	*StringEventType
}

// ToolAssetId is {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetId *ToolAssetIdType

// ToolGroupType is {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupType struct {
	*StringEventType
}

// ToolGroup is {{def(EventEnum:TOOL_GROUP)}}
type ToolGroup *ToolGroupType

// ToolIdType is {{def(EventEnum:TOOL_ID)}}
type ToolIdType struct {
	*StringEventType
}

// ToolId is {{def(EventEnum:TOOL_ID)}}
type ToolId *ToolIdType

// ToolNumberType is {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberType struct {
	*StringEventType
}

// ToolNumber is {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumber *ToolNumberType

// ToolOffsetType is {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetType struct {
	*FloatEventType
}

// ToolOffset is {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffset *ToolOffsetType

// UserType is {{def(EventEnum:USER)}}
type UserType struct {
	*StringEventType
}

// User is {{def(EventEnum:USER)}}
type User *UserType

// VariableType is {{def(EventEnum:VARIABLE)}}
type VariableType struct {
	*StringEventType
}

// Variable is {{def(EventEnum:VARIABLE)}}
type Variable *VariableType

// WaitStateValueType is Value is indeterminate
type WaitStateValueType string

// WaitStateType is {{def(EventEnum:WAIT_STATE)}}
type WaitStateType struct {
}

// WaitState is {{def(EventEnum:WAIT_STATE)}}
type WaitState *WaitStateType

// WireType is {{block(Composition)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type WireType struct {
	*StringEventType
}

// Wire is {{block(Composition)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type Wire *WireType

// WorkholdingIdType is {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdType struct {
	*StringEventType
}

// WorkholdingId is {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingId *WorkholdingIdType

// WorkOffsetType is {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetType struct {
	*StringEventType
}

// WorkOffset is {{def(EventEnum:WORK_OFFSET)}}
type WorkOffset *WorkOffsetType

// OperatingSystemType is {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemType struct {
	*StringEventType
}

// OperatingSystem is {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystem *OperatingSystemType

// FirmwareType is {{def(EventEnum:FIRMWARE)}}
type FirmwareType struct {
	*StringEventType
}

// Firmware is {{def(EventEnum:FIRMWARE)}}
type Firmware *FirmwareType

// ApplicationType is {{def(EventEnum:APPLICATION)}}
type ApplicationType struct {
	*StringEventType
}

// Application is {{def(EventEnum:APPLICATION)}}
type Application *ApplicationType

// LibraryType is {{def(EventEnum:LIBRARY)}}
type LibraryType struct {
	*StringEventType
}

// Library is {{def(EventEnum:LIBRARY)}}
type Library *LibraryType

// HardwareType is {{def(EventEnum:HARDWARE)}}
type HardwareType struct {
	*StringEventType
}

// Hardware is {{def(EventEnum:HARDWARE)}}
type Hardware *HardwareType

// NetworkType is {{def(EventEnum:NETWORK)}}
type NetworkType struct {
	*StringEventType
}

// Network is {{def(EventEnum:NETWORK)}}
type Network *NetworkType

// RotationType is rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationType struct {
	*StringEventType
}

// Rotation is rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type Rotation *RotationType

// TranslationType is translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type TranslationType struct {
	*StringEventType
}

// Translation is translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type Translation *TranslationType

// ProcessKindIdType is {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdType struct {
	*StringEventType
}

// ProcessKindId is {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindId *ProcessKindIdType

// PartStatusValueType is Value is indeterminate
type PartStatusValueType string

// PartStatusType is {{def(EventEnum:PART_STATUS)}} If unique identifier is given, part
//         status is for that individual. If group identifier is given without a
//         unique identifier, then the status is assumed to be for the whole group.
type PartStatusType struct {
}

// PartStatus is {{def(EventEnum:PART_STATUS)}} If unique identifier is given, part
//         status is for that individual. If group identifier is given without a
//         unique identifier, then the status is assumed to be for the whole group.
type PartStatus *PartStatusType

// AlarmLimitType is {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitType struct {
	*StringEventType
}

// AlarmLimit is {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimit *AlarmLimitType

// ProcessAggregateIdType is {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdType struct {
	*StringEventType
}

// ProcessAggregateId is {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateId *ProcessAggregateIdType

// PartKindIdType is {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindIdType struct {
	*StringEventType
}

// PartKindId is {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindId *PartKindIdType

// AdapterURIType is {{def(EventEnum:ADAPTER_URI)}}
type AdapterURIType struct {
	*StringEventType
}

// AdapterURI is {{def(EventEnum:ADAPTER_URI)}}
type AdapterURI *AdapterURIType

// DeviceRemovedType is {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedType struct {
	*StringEventType
}

// DeviceRemoved is {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemoved *DeviceRemovedType

// DeviceChangedType is {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedType struct {
	*StringEventType
}

// DeviceChanged is {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChanged *DeviceChangedType

// SpecificationLimitType is {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitType struct {
	*StringEventType
}

// SpecificationLimit is {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimit *SpecificationLimitType

// ConnectionStatusValueType is Value is indeterminate
type ConnectionStatusValueType string

// ConnectionStatusType is {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusType struct {
}

// ConnectionStatus is {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatus *ConnectionStatusType

// AdapterSoftwareVersionType is {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionType struct {
	*StringEventType
}

// AdapterSoftwareVersion is {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersion *AdapterSoftwareVersionType

// SensorAttachmentType is {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentType struct {
	*StringEventType
}

// SensorAttachment is {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachment *SensorAttachmentType

// ControlLimitType is {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitType struct {
	*StringEventType
}

// ControlLimit is {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimit *ControlLimitType

// DeviceAddedType is {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedType struct {
	*StringEventType
}

// DeviceAdded is {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAdded *DeviceAddedType

// MTConnectVersionType is {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionType struct {
	*StringEventType
}

// MTConnectVersion is {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersion *MTConnectVersionType

// ProcessOccurrenceIdType is {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdType struct {
	*StringEventType
}

// ProcessOccurrenceId is {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceId *ProcessOccurrenceIdType

// PartGroupIdType is {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupIdType struct {
	*StringEventType
}

// PartGroupId is {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupId *PartGroupIdType

// PartUniqueIdType is {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueIdType struct {
	*StringEventType
}

// PartUniqueId is {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueId *PartUniqueIdType

// ActivationCountType is {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountType struct {
	*IntegerEventType
}

// ActivationCount is {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCount *ActivationCountType

// DeactivationCountType is {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountType struct {
	*IntegerEventType
}

// DeactivationCount is {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCount *DeactivationCountType

// TransferCountType is {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountType struct {
	*IntegerEventType
}

// TransferCount is {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCount *TransferCountType

// LoadCountType is {{def(EventEnum:LOAD_COUNT)}}
type LoadCountType struct {
	*IntegerEventType
}

// LoadCount is {{def(EventEnum:LOAD_COUNT)}}
type LoadCount *LoadCountType

// PartProcessingStateValueType is Value is indeterminate
type PartProcessingStateValueType string

// PartProcessingStateType is {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateType struct {
}

// PartProcessingState is {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingState *PartProcessingStateType

// ProcessStateValueType is Value is indeterminate
type ProcessStateValueType string

// ProcessStateType is {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateType struct {
}

// ProcessState is {{def(EventEnum:PROCESS_STATE)}}
type ProcessState *ProcessStateType

// ValveStateValueType is Value is indeterminate
type ValveStateValueType string

// ValveStateType is {{def(EventEnum:VALVE_STATE)}}
type ValveStateType struct {
}

// ValveState is {{def(EventEnum:VALVE_STATE)}}
type ValveState *ValveStateType

// LockStateValueType is Value is indeterminate
type LockStateValueType string

// LockStateType is {{def(EventEnum:LOCK_STATE)}}
type LockStateType struct {
}

// LockState is {{def(EventEnum:LOCK_STATE)}}
type LockState *LockStateType

// UnloadCountType is {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountType struct {
	*IntegerEventType
}

// UnloadCount is {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCount *UnloadCountType

// CycleCountType is {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountType struct {
	*IntegerEventType
}

// CycleCount is {{def(EventEnum:CYCLE_COUNT)}}
type CycleCount *CycleCountType

// OperatingModeValueType is Value is indeterminate
type OperatingModeValueType string

// OperatingModeType is {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeType struct {
}

// OperatingMode is {{def(EventEnum:OPERATING_MODE)}}
type OperatingMode *OperatingModeType

// AssetCountType is {{def(EventEnum:ASSET_COUNT)}}
type AssetCountType struct {
	*IntegerEventType
}

// AssetCount is {{def(EventEnum:ASSET_COUNT)}}
type AssetCount *AssetCountType

// MaintenanceListType is {{def(EventEnum:MAINTENANCE_LIST)}} If the {{property(INTERVAL)}}
//         {{property(key)}} is not provided, it is assumed `ABSOLUTE`. If the
//         {{property(DIRECTION)}} {{property(key)}} is not provided, it is assumed
//         `UP`. If the {{property(UNITS)}} {{property(key)}} is not provided, it
//         is assumed to be `COUNT`.
type MaintenanceListType struct {
	*StringEventType
}

// MaintenanceList is {{def(EventEnum:MAINTENANCE_LIST)}} If the {{property(INTERVAL)}}
//         {{property(key)}} is not provided, it is assumed `ABSOLUTE`. If the
//         {{property(DIRECTION)}} {{property(key)}} is not provided, it is assumed
//         `UP`. If the {{property(UNITS)}} {{property(key)}} is not provided, it
//         is assumed to be `COUNT`.
type MaintenanceList *MaintenanceListType

// FixtureIdType is {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdType struct {
	*StringEventType
}

// FixtureId is {{def(EventEnum:FIXTURE_ID)}}
type FixtureId *FixtureIdType

// PartCountTypeValueType is Value is indeterminate
type PartCountTypeValueType string

// PartCountTypeType is {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeType struct {
}

// MaterialFeedType is {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedType struct {
	*StringEventType
}

// MaterialFeed is {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeed *MaterialFeedType

// MaterialChangeType is {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeType struct {
	*StringEventType
}

// MaterialChange is {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChange *MaterialChangeType

// MaterialRetractType is {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractType struct {
	*StringEventType
}

// MaterialRetract is {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetract *MaterialRetractType

// MaterialLoadType is {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadType struct {
	*StringEventType
}

// MaterialLoad is {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoad *MaterialLoadType

// MaterialUnloadType is {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadType struct {
	*StringEventType
}

// MaterialUnload is {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnload *MaterialUnloadType

// OpenChuckType is {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckType struct {
	*StringEventType
}

// OpenChuck is {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuck *OpenChuckType

// OpenDoorType is {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorType struct {
	*StringEventType
}

// OpenDoor is {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoor *OpenDoorType

// PartChangeType is {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeType struct {
	*StringEventType
}

// PartChange is {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChange *PartChangeType

// CloseDoorType is {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorType struct {
	*StringEventType
}

// CloseDoor is {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoor *CloseDoorType

// CloseChuckType is {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckType struct {
	*StringEventType
}

// CloseChuck is {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuck *CloseChuckType

// InterfaceStateValueType is Value is indeterminate
type InterfaceStateValueType string

// InterfaceStateType is {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateType struct {
}

// InterfaceState is {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceState *InterfaceStateType

// PartCountDiscreteType is Discrete of {{def(EventEnum:PART_COUNT)}}
type PartCountDiscreteType struct {
	*PartCountTypeType
}

// PartCountDiscrete is Discrete of {{def(EventEnum:PART_COUNT)}}
type PartCountDiscrete *PartCountDiscreteType

// ToolIdDiscreteType is Discrete of {{def(EventEnum:TOOL_ID)}}
type ToolIdDiscreteType struct {
	*ToolIdType
}

// ToolIdDiscrete is Discrete of {{def(EventEnum:TOOL_ID)}}
type ToolIdDiscrete *ToolIdDiscreteType

// ToolNumberDiscreteType is Discrete of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberDiscreteType struct {
	*ToolNumberType
}

// ToolNumberDiscrete is Discrete of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberDiscrete *ToolNumberDiscreteType

// ToolAssetIdDiscreteType is Discrete of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdDiscreteType struct {
	*ToolAssetIdType
}

// ToolAssetIdDiscrete is Discrete of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdDiscrete *ToolAssetIdDiscreteType

// PalletIdDiscreteType is Discrete of {{def(EventEnum:PALLET_ID)}}
type PalletIdDiscreteType struct {
	*PalletIdType
}

// PalletIdDiscrete is Discrete of {{def(EventEnum:PALLET_ID)}}
type PalletIdDiscrete *PalletIdDiscreteType

// MessageDiscreteType is Discrete of {{def(EventEnum:MESSAGE)}}
type MessageDiscreteType struct {
	*MessageType
}

// MessageDiscrete is Discrete of {{def(EventEnum:MESSAGE)}}
type MessageDiscrete *MessageDiscreteType

// BlockDiscreteType is Discrete of {{def(EventEnum:BLOCK)}}
type BlockDiscreteType struct {
	*BlockType
}

// BlockDiscrete is Discrete of {{def(EventEnum:BLOCK)}}
type BlockDiscrete *BlockDiscreteType

// SampleRateType is The target rate a value can be sampled
type SampleRateType float32

// CountValueType is The number of items in the list
type CountValueType int

// FloatSampleValueType is Common floating point sample value
type FloatSampleValueType struct {
	Float                float32
	UnavailableValueType string
}

// ThreeSpaceSampleValueType is Common floating point sample value
type ThreeSpaceSampleValueType struct {
	ThreeSpaceValueType  *FloatListValueType
	UnavailableValueType string
}

// SampleType is Description
type SampleType struct {
	ObservationType    *ObservationType
	SampleRateAttr     float32                 `xml:"sampleRate,attr,omitempty"`
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	DurationAttr       float32                 `xml:"duration,attr,omitempty"`
}

// Sample is Description
type Sample *SampleType

// CommonSampleType is A sample with a single floating point value
type CommonSampleType struct {
}

// CommonSample is A sample with a single floating point value
type CommonSample *CommonSampleType

// ThreeSpaceSampleType is A sample with a three tuple floating point value
type ThreeSpaceSampleType struct {
}

// ThreeSpaceSample is A sample with a three tuple floating point value
type ThreeSpaceSample *ThreeSpaceSampleType

// AbsTimeSeriesType is The abstract waveform
type AbsTimeSeriesType struct {
	SampleCountAttr int `xml:"sampleCount,attr"`
	*SampleType
}

// AbsTimeSeries is The abstract waveform
type AbsTimeSeries *AbsTimeSeriesType

// TimeSeriesType is Description
type TimeSeriesType struct {
}

// TimeSeries is Description
type TimeSeries *TimeSeriesType

// AccelerationType is {{def(SampleEnum:ACCELERATION)}}
type AccelerationType struct {
	*CommonSampleType
}

// Acceleration is {{def(SampleEnum:ACCELERATION)}}
type Acceleration *AccelerationType

// AccelerationTimeSeriesType is Time series of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AccelerationTimeSeries is Time series of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTimeSeries *AccelerationTimeSeriesType

// AccumulatedTimeType is {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeType struct {
	*CommonSampleType
}

// AccumulatedTime is {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTime *AccumulatedTimeType

// AccumulatedTimeTimeSeriesType is Time series of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTimeSeriesType struct {
	*TimeSeriesType
}

// AccumulatedTimeTimeSeries is Time series of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTimeSeries *AccumulatedTimeTimeSeriesType

// AmperageType is {{def(SampleEnum:AMPERAGE)}}
type AmperageType struct {
	*CommonSampleType
}

// Amperage is {{def(SampleEnum:AMPERAGE)}}
type Amperage *AmperageType

// AmperageTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE)}}
type AmperageTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageTimeSeries is Time series of {{def(SampleEnum:AMPERAGE)}}
type AmperageTimeSeries *AmperageTimeSeriesType

// AngleType is {{def(SampleEnum:ANGLE)}}
type AngleType struct {
	*CommonSampleType
}

// Angle is {{def(SampleEnum:ANGLE)}}
type Angle *AngleType

// AngleTimeSeriesType is Time series of {{def(SampleEnum:ANGLE)}}
type AngleTimeSeriesType struct {
	*TimeSeriesType
}

// AngleTimeSeries is Time series of {{def(SampleEnum:ANGLE)}}
type AngleTimeSeries *AngleTimeSeriesType

// AngularAccelerationType is {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationType struct {
	*CommonSampleType
}

// AngularAcceleration is {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAcceleration *AngularAccelerationType

// AngularAccelerationTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularAccelerationTimeSeries is Time series of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTimeSeries *AngularAccelerationTimeSeriesType

// AngularVelocityType is {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityType struct {
	*CommonSampleType
}

// AngularVelocity is {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocity *AngularVelocityType

// AngularVelocityTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// AngularVelocityTimeSeries is Time series of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTimeSeries *AngularVelocityTimeSeriesType

// AxisFeedrateType is {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateType struct {
	*CommonSampleType
}

// AxisFeedrate is {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrate *AxisFeedrateType

// AxisFeedrateTimeSeriesType is Time series of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// AxisFeedrateTimeSeries is Time series of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTimeSeries *AxisFeedrateTimeSeriesType

// CapacityFluidType is {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidType struct {
	*CommonSampleType
}

// CapacityFluid is {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluid *CapacityFluidType

// CapacityFluidTimeSeriesType is Time series of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTimeSeriesType struct {
	*TimeSeriesType
}

// CapacityFluidTimeSeries is Time series of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTimeSeries *CapacityFluidTimeSeriesType

// CapacitySpatialType is {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialType struct {
	*CommonSampleType
}

// CapacitySpatial is {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatial *CapacitySpatialType

// CapacitySpatialTimeSeriesType is Time series of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTimeSeriesType struct {
	*TimeSeriesType
}

// CapacitySpatialTimeSeries is Time series of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTimeSeries *CapacitySpatialTimeSeriesType

// ConcentrationType is {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationType struct {
	*CommonSampleType
}

// Concentration is {{def(SampleEnum:CONCENTRATION)}}
type Concentration *ConcentrationType

// ConcentrationTimeSeriesType is Time series of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTimeSeriesType struct {
	*TimeSeriesType
}

// ConcentrationTimeSeries is Time series of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTimeSeries *ConcentrationTimeSeriesType

// ConductivityType is {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityType struct {
	*CommonSampleType
}

// Conductivity is {{def(SampleEnum:CONDUCTIVITY)}}
type Conductivity *ConductivityType

// ConductivityTimeSeriesType is Time series of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTimeSeriesType struct {
	*TimeSeriesType
}

// ConductivityTimeSeries is Time series of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTimeSeries *ConductivityTimeSeriesType

// CuttingSpeedType is {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedType struct {
	*CommonSampleType
}

// CuttingSpeed is {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeed *CuttingSpeedType

// CuttingSpeedTimeSeriesType is Time series of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// CuttingSpeedTimeSeries is Time series of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTimeSeries *CuttingSpeedTimeSeriesType

// DensityType is {{def(SampleEnum:DENSITY)}}
type DensityType struct {
	*CommonSampleType
}

// Density is {{def(SampleEnum:DENSITY)}}
type Density *DensityType

// DensityTimeSeriesType is Time series of {{def(SampleEnum:DENSITY)}}
type DensityTimeSeriesType struct {
	*TimeSeriesType
}

// DensityTimeSeries is Time series of {{def(SampleEnum:DENSITY)}}
type DensityTimeSeries *DensityTimeSeriesType

// DepositionAccelerationVolumetricType is {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricType struct {
	*CommonSampleType
}

// DepositionAccelerationVolumetric is {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetric *DepositionAccelerationVolumetricType

// DepositionAccelerationVolumetricTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionAccelerationVolumetricTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTimeSeries *DepositionAccelerationVolumetricTimeSeriesType

// DepositionDensityType is {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityType struct {
	*CommonSampleType
}

// DepositionDensity is {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensity *DepositionDensityType

// DepositionDensityTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionDensityTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTimeSeries *DepositionDensityTimeSeriesType

// DepositionMassType is {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassType struct {
	*CommonSampleType
}

// DepositionMass is {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMass *DepositionMassType

// DepositionMassTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionMassTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTimeSeries *DepositionMassTimeSeriesType

// DepositionRateVolumetricType is {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricType struct {
	*CommonSampleType
}

// DepositionRateVolumetric is {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetric *DepositionRateVolumetricType

// DepositionRateVolumetricTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionRateVolumetricTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTimeSeries *DepositionRateVolumetricTimeSeriesType

// DepositionVolumeType is {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeType struct {
	*CommonSampleType
}

// DepositionVolume is {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolume *DepositionVolumeType

// DepositionVolumeTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionVolumeTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTimeSeries *DepositionVolumeTimeSeriesType

// DisplacementType is {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementType struct {
	*CommonSampleType
}

// Displacement is {{def(SampleEnum:DISPLACEMENT)}}
type Displacement *DisplacementType

// DisplacementTimeSeriesType is Time series of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTimeSeriesType struct {
	*TimeSeriesType
}

// DisplacementTimeSeries is Time series of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTimeSeries *DisplacementTimeSeriesType

// ElectricalEnergyType is {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyType struct {
	*CommonSampleType
}

// ElectricalEnergy is {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergy *ElectricalEnergyType

// ElectricalEnergyTimeSeriesType is Time series of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTimeSeriesType struct {
	*TimeSeriesType
}

// ElectricalEnergyTimeSeries is Time series of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTimeSeries *ElectricalEnergyTimeSeriesType

// EquipmentTimerType is {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerType struct {
	*CommonSampleType
}

// EquipmentTimer is {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimer *EquipmentTimerType

// EquipmentTimerTimeSeriesType is Time series of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTimeSeriesType struct {
	*TimeSeriesType
}

// EquipmentTimerTimeSeries is Time series of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTimeSeries *EquipmentTimerTimeSeriesType

// FillLevelType is {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelType struct {
	*CommonSampleType
}

// FillLevel is {{def(SampleEnum:FILL_LEVEL)}}
type FillLevel *FillLevelType

// FillLevelTimeSeriesType is Time series of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTimeSeriesType struct {
	*TimeSeriesType
}

// FillLevelTimeSeries is Time series of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTimeSeries *FillLevelTimeSeriesType

// FlowType is {{def(SampleEnum:FLOW)}}
type FlowType struct {
	*CommonSampleType
}

// Flow is {{def(SampleEnum:FLOW)}}
type Flow *FlowType

// FlowTimeSeriesType is Time series of {{def(SampleEnum:FLOW)}}
type FlowTimeSeriesType struct {
	*TimeSeriesType
}

// FlowTimeSeries is Time series of {{def(SampleEnum:FLOW)}}
type FlowTimeSeries *FlowTimeSeriesType

// FrequencyType is {{def(SampleEnum:FREQUENCY)}}
type FrequencyType struct {
	*CommonSampleType
}

// Frequency is {{def(SampleEnum:FREQUENCY)}}
type Frequency *FrequencyType

// FrequencyTimeSeriesType is Time series of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTimeSeriesType struct {
	*TimeSeriesType
}

// FrequencyTimeSeries is Time series of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTimeSeries *FrequencyTimeSeriesType

// GlobalPositionType is {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionType struct {
	*CommonSampleType
}

// GlobalPosition is {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPosition *GlobalPositionType

// GlobalPositionTimeSeriesType is Time series of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTimeSeriesType struct {
	*TimeSeriesType
}

// GlobalPositionTimeSeries is Time series of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTimeSeries *GlobalPositionTimeSeriesType

// LengthType is {{def(SampleEnum:LENGTH)}}
type LengthType struct {
	*CommonSampleType
}

// Length is {{def(SampleEnum:LENGTH)}}
type Length *LengthType

// LengthTimeSeriesType is Time series of {{def(SampleEnum:LENGTH)}}
type LengthTimeSeriesType struct {
	*TimeSeriesType
}

// LengthTimeSeries is Time series of {{def(SampleEnum:LENGTH)}}
type LengthTimeSeries *LengthTimeSeriesType

// LevelType is {{def(SampleEnum:LEVEL)}}
type LevelType struct {
	*CommonSampleType
}

// Level is {{def(SampleEnum:LEVEL)}}
type Level *LevelType

// LevelTimeSeriesType is Time series of {{def(SampleEnum:LEVEL)}}
type LevelTimeSeriesType struct {
	*TimeSeriesType
}

// LevelTimeSeries is Time series of {{def(SampleEnum:LEVEL)}}
type LevelTimeSeries *LevelTimeSeriesType

// LinearForceType is {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceType struct {
	*CommonSampleType
}

// LinearForce is {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForce *LinearForceType

// LinearForceTimeSeriesType is Time series of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTimeSeriesType struct {
	*TimeSeriesType
}

// LinearForceTimeSeries is Time series of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTimeSeries *LinearForceTimeSeriesType

// LoadType is {{def(SampleEnum:LOAD)}}
type LoadType struct {
	*CommonSampleType
}

// Load is {{def(SampleEnum:LOAD)}}
type Load *LoadType

// LoadTimeSeriesType is Time series of {{def(SampleEnum:LOAD)}}
type LoadTimeSeriesType struct {
	*TimeSeriesType
}

// LoadTimeSeries is Time series of {{def(SampleEnum:LOAD)}}
type LoadTimeSeries *LoadTimeSeriesType

// MassType is {{def(SampleEnum:MASS)}}
type MassType struct {
	*CommonSampleType
}

// Mass is {{def(SampleEnum:MASS)}}
type Mass *MassType

// MassTimeSeriesType is Time series of {{def(SampleEnum:MASS)}}
type MassTimeSeriesType struct {
	*TimeSeriesType
}

// MassTimeSeries is Time series of {{def(SampleEnum:MASS)}}
type MassTimeSeries *MassTimeSeriesType

// PathFeedrateType is {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateType struct {
	*CommonSampleType
}

// PathFeedrate is {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrate *PathFeedrateType

// PathFeedrateTimeSeriesType is Time series of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedrateTimeSeries is Time series of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTimeSeries *PathFeedrateTimeSeriesType

// PathFeedratePerRevolutionType is {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionType struct {
	*CommonSampleType
}

// PathFeedratePerRevolution is {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolution *PathFeedratePerRevolutionType

// PathFeedratePerRevolutionTimeSeriesType is Time series of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedratePerRevolutionTimeSeries is Time series of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTimeSeries *PathFeedratePerRevolutionTimeSeriesType

// PathPositionType is {{def(SampleEnum:PATH_POSITION)}}
type PathPositionType struct {
	*ThreeSpaceSampleType
}

// PathPosition is {{def(SampleEnum:PATH_POSITION)}}
type PathPosition *PathPositionType

// PHType is {{def(SampleEnum:PH)}}
type PHType struct {
	*CommonSampleType
}

// PH is {{def(SampleEnum:PH)}}
type PH *PHType

// PHTimeSeriesType is Time series of {{def(SampleEnum:PH)}}
type PHTimeSeriesType struct {
	*TimeSeriesType
}

// PHTimeSeries is Time series of {{def(SampleEnum:PH)}}
type PHTimeSeries *PHTimeSeriesType

// PositionType is {{def(SampleEnum:POSITION)}}
type PositionType struct {
	*CommonSampleType
}

// Position is {{def(SampleEnum:POSITION)}}
type Position *PositionType

// PositionTimeSeriesType is Time series of {{def(SampleEnum:POSITION)}}
type PositionTimeSeriesType struct {
	*TimeSeriesType
}

// PositionTimeSeries is Time series of {{def(SampleEnum:POSITION)}}
type PositionTimeSeries *PositionTimeSeriesType

// PowerFactorType is {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorType struct {
	*CommonSampleType
}

// PowerFactor is {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactor *PowerFactorType

// PowerFactorTimeSeriesType is Time series of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTimeSeriesType struct {
	*TimeSeriesType
}

// PowerFactorTimeSeries is Time series of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTimeSeries *PowerFactorTimeSeriesType

// PressureType is Description
type PressureType struct {
	*CommonSampleType
}

// Pressure is Description
type Pressure *PressureType

// PressureTimeSeriesType is Time series of {{def(SampleEnum:PRESSURE)}}
type PressureTimeSeriesType struct {
	*TimeSeriesType
}

// PressureTimeSeries is Time series of {{def(SampleEnum:PRESSURE)}}
type PressureTimeSeries *PressureTimeSeriesType

// ProcessTimerType is {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerType struct {
	*CommonSampleType
}

// ProcessTimer is {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimer *ProcessTimerType

// ProcessTimerTimeSeriesType is Time series of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTimeSeriesType struct {
	*TimeSeriesType
}

// ProcessTimerTimeSeries is Time series of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTimeSeries *ProcessTimerTimeSeriesType

// ResistanceType is {{def(SampleEnum:RESISTANCE)}}
type ResistanceType struct {
	*CommonSampleType
}

// Resistance is {{def(SampleEnum:RESISTANCE)}}
type Resistance *ResistanceType

// ResistanceTimeSeriesType is Time series of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTimeSeriesType struct {
	*TimeSeriesType
}

// ResistanceTimeSeries is Time series of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTimeSeries *ResistanceTimeSeriesType

// RotaryVelocityType is {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityType struct {
	*CommonSampleType
}

// RotaryVelocity is {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocity *RotaryVelocityType

// RotaryVelocityTimeSeriesType is Time series of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// RotaryVelocityTimeSeries is Time series of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTimeSeries *RotaryVelocityTimeSeriesType

// SoundLevelType is {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelType struct {
	*CommonSampleType
}

// SoundLevel is {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevel *SoundLevelType

// SoundLevelTimeSeriesType is Time series of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTimeSeriesType struct {
	*TimeSeriesType
}

// SoundLevelTimeSeries is Time series of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTimeSeries *SoundLevelTimeSeriesType

// SpindleSpeedType is {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedType struct {
	*CommonSampleType
}

// SpindleSpeed is {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeed *SpindleSpeedType

// SpindleSpeedTimeSeriesType is Time series of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// SpindleSpeedTimeSeries is Time series of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTimeSeries *SpindleSpeedTimeSeriesType

// StrainType is {{def(SampleEnum:STRAIN)}}
type StrainType struct {
	*CommonSampleType
}

// Strain is {{def(SampleEnum:STRAIN)}}
type Strain *StrainType

// StrainTimeSeriesType is Time series of {{def(SampleEnum:STRAIN)}}
type StrainTimeSeriesType struct {
	*TimeSeriesType
}

// StrainTimeSeries is Time series of {{def(SampleEnum:STRAIN)}}
type StrainTimeSeries *StrainTimeSeriesType

// TemperatureType is {{def(SampleEnum:TEMPERATURE)}}
type TemperatureType struct {
	*CommonSampleType
}

// Temperature is {{def(SampleEnum:TEMPERATURE)}}
type Temperature *TemperatureType

// TemperatureTimeSeriesType is Time series of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTimeSeriesType struct {
	*TimeSeriesType
}

// TemperatureTimeSeries is Time series of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTimeSeries *TemperatureTimeSeriesType

// TensionType is {{def(SampleEnum:TENSION)}}
type TensionType struct {
	*CommonSampleType
}

// Tension is {{def(SampleEnum:TENSION)}}
type Tension *TensionType

// TensionTimeSeriesType is Time series of {{def(SampleEnum:TENSION)}}
type TensionTimeSeriesType struct {
	*TimeSeriesType
}

// TensionTimeSeries is Time series of {{def(SampleEnum:TENSION)}}
type TensionTimeSeries *TensionTimeSeriesType

// TiltType is {{def(SampleEnum:TILT)}}
type TiltType struct {
	*CommonSampleType
}

// Tilt is {{def(SampleEnum:TILT)}}
type Tilt *TiltType

// TiltTimeSeriesType is Time series of {{def(SampleEnum:TILT)}}
type TiltTimeSeriesType struct {
	*TimeSeriesType
}

// TiltTimeSeries is Time series of {{def(SampleEnum:TILT)}}
type TiltTimeSeries *TiltTimeSeriesType

// TorqueType is {{def(SampleEnum:TORQUE)}}
type TorqueType struct {
	*CommonSampleType
}

// Torque is {{def(SampleEnum:TORQUE)}}
type Torque *TorqueType

// TorqueTimeSeriesType is Time series of {{def(SampleEnum:TORQUE)}}
type TorqueTimeSeriesType struct {
	*TimeSeriesType
}

// TorqueTimeSeries is Time series of {{def(SampleEnum:TORQUE)}}
type TorqueTimeSeries *TorqueTimeSeriesType

// VelocityType is {{def(SampleEnum:VELOCITY)}}
type VelocityType struct {
	*CommonSampleType
}

// Velocity is {{def(SampleEnum:VELOCITY)}}
type Velocity *VelocityType

// VelocityTimeSeriesType is Time series of {{def(SampleEnum:VELOCITY)}}
type VelocityTimeSeriesType struct {
	*TimeSeriesType
}

// VelocityTimeSeries is Time series of {{def(SampleEnum:VELOCITY)}}
type VelocityTimeSeries *VelocityTimeSeriesType

// ViscosityType is {{def(SampleEnum:VISCOSITY)}}
type ViscosityType struct {
	*CommonSampleType
}

// Viscosity is {{def(SampleEnum:VISCOSITY)}}
type Viscosity *ViscosityType

// ViscosityTimeSeriesType is Time series of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTimeSeriesType struct {
	*TimeSeriesType
}

// ViscosityTimeSeries is Time series of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTimeSeries *ViscosityTimeSeriesType

// VoltageType is {{def(SampleEnum:VOLTAGE)}}
type VoltageType struct {
	*CommonSampleType
}

// Voltage is {{def(SampleEnum:VOLTAGE)}}
type Voltage *VoltageType

// VoltageTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE)}}
type VoltageTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageTimeSeries is Time series of {{def(SampleEnum:VOLTAGE)}}
type VoltageTimeSeries *VoltageTimeSeriesType

// VoltAmpereType is {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereType struct {
	*CommonSampleType
}

// VoltAmpere is {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpere *VoltAmpereType

// VoltAmpereTimeSeriesType is Time series of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereTimeSeries is Time series of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTimeSeries *VoltAmpereTimeSeriesType

// VoltAmpereReactiveType is {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveType struct {
	*CommonSampleType
}

// VoltAmpereReactive is {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactive *VoltAmpereReactiveType

// VoltAmpereReactiveTimeSeriesType is Time series of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereReactiveTimeSeries is Time series of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTimeSeries *VoltAmpereReactiveTimeSeriesType

// VolumeFluidType is {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidType struct {
	*CommonSampleType
}

// VolumeFluid is {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluid *VolumeFluidType

// VolumeFluidTimeSeriesType is Time series of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeFluidTimeSeries is Time series of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTimeSeries *VolumeFluidTimeSeriesType

// VolumeSpatialType is {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialType struct {
	*CommonSampleType
}

// VolumeSpatial is {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatial *VolumeSpatialType

// VolumeSpatialTimeSeriesType is Time series of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeSpatialTimeSeries is Time series of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTimeSeries *VolumeSpatialTimeSeriesType

// WattageType is {{def(SampleEnum:WATTAGE)}}
type WattageType struct {
	*CommonSampleType
}

// Wattage is {{def(SampleEnum:WATTAGE)}}
type Wattage *WattageType

// WattageTimeSeriesType is Time series of {{def(SampleEnum:WATTAGE)}}
type WattageTimeSeriesType struct {
	*TimeSeriesType
}

// WattageTimeSeries is Time series of {{def(SampleEnum:WATTAGE)}}
type WattageTimeSeries *WattageTimeSeriesType

// AmperageDCType is {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCType struct {
	*CommonSampleType
}

// AmperageDC is {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDC *AmperageDCType

// AmperageDCTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageDCTimeSeries is Time series of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTimeSeries *AmperageDCTimeSeriesType

// AmperageACType is {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACType struct {
	*CommonSampleType
}

// AmperageAC is {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageAC *AmperageACType

// AmperageACTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageACTimeSeries is Time series of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTimeSeries *AmperageACTimeSeriesType

// VoltageACType is {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACType struct {
	*CommonSampleType
}

// VoltageAC is {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageAC *VoltageACType

// VoltageACTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageACTimeSeries is Time series of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTimeSeries *VoltageACTimeSeriesType

// VoltageDCType is {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCType struct {
	*CommonSampleType
}

// VoltageDC is {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDC *VoltageDCType

// VoltageDCTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageDCTimeSeries is Time series of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTimeSeries *VoltageDCTimeSeriesType

// XDimensionType is {{def(SampleEnum:X_DIMENSION)}}
type XDimensionType struct {
	*CommonSampleType
}

// XDimension is {{def(SampleEnum:X_DIMENSION)}}
type XDimension *XDimensionType

// XDimensionTimeSeriesType is Time series of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// XDimensionTimeSeries is Time series of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTimeSeries *XDimensionTimeSeriesType

// YDimensionType is {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionType struct {
	*CommonSampleType
}

// YDimension is {{def(SampleEnum:Y_DIMENSION)}}
type YDimension *YDimensionType

// YDimensionTimeSeriesType is Time series of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// YDimensionTimeSeries is Time series of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTimeSeries *YDimensionTimeSeriesType

// ZDimensionType is {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionType struct {
	*CommonSampleType
}

// ZDimension is {{def(SampleEnum:Z_DIMENSION)}}
type ZDimension *ZDimensionType

// ZDimensionTimeSeriesType is Time series of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// ZDimensionTimeSeries is Time series of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTimeSeries *ZDimensionTimeSeriesType

// DiameterType is {{def(SampleEnum:DIAMETER)}}
type DiameterType struct {
	*CommonSampleType
}

// Diameter is {{def(SampleEnum:DIAMETER)}}
type Diameter *DiameterType

// DiameterTimeSeriesType is Time series of {{def(SampleEnum:DIAMETER)}}
type DiameterTimeSeriesType struct {
	*TimeSeriesType
}

// DiameterTimeSeries is Time series of {{def(SampleEnum:DIAMETER)}}
type DiameterTimeSeries *DiameterTimeSeriesType

// OrientationType is {{def(SampleEnum:ORIENTATION)}}
type OrientationType struct {
	*ThreeSpaceSampleType
}

// Orientation is {{def(SampleEnum:ORIENTATION)}}
type Orientation *OrientationType

// HumidityRelativeType is {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeType struct {
	*CommonSampleType
}

// HumidityRelative is {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelative *HumidityRelativeType

// HumidityRelativeTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityRelativeTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTimeSeries *HumidityRelativeTimeSeriesType

// HumidityAbsoluteType is {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteType struct {
	*CommonSampleType
}

// HumidityAbsolute is {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsolute *HumidityAbsoluteType

// HumidityAbsoluteTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityAbsoluteTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTimeSeries *HumidityAbsoluteTimeSeriesType

// HumiditySpecificType is {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificType struct {
	*CommonSampleType
}

// HumiditySpecific is {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecific *HumiditySpecificType

// HumiditySpecificTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTimeSeriesType struct {
	*TimeSeriesType
}

// HumiditySpecificTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTimeSeries *HumiditySpecificTimeSeriesType

// PressurizationRateType is {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateType struct {
	*CommonSampleType
}

// PressurizationRate is {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRate *PressurizationRateType

// PressurizationRateTimeSeriesType is Time series of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTimeSeriesType struct {
	*TimeSeriesType
}

// PressurizationRateTimeSeries is Time series of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTimeSeries *PressurizationRateTimeSeriesType

// DecelerationType is {{def(SampleEnum:DECELERATION)}}
type DecelerationType struct {
	*CommonSampleType
}

// Deceleration is {{def(SampleEnum:DECELERATION)}}
type Deceleration *DecelerationType

// DecelerationTimeSeriesType is Time series of {{def(SampleEnum:DECELERATION)}}
type DecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// DecelerationTimeSeries is Time series of {{def(SampleEnum:DECELERATION)}}
type DecelerationTimeSeries *DecelerationTimeSeriesType

// AssetUpdateRateType is {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateType struct {
	*CommonSampleType
}

// AssetUpdateRate is {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRate *AssetUpdateRateType

// AssetUpdateRateTimeSeriesType is Time series of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// AssetUpdateRateTimeSeries is Time series of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTimeSeries *AssetUpdateRateTimeSeriesType

// AngularDecelerationType is {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationType struct {
	*CommonSampleType
}

// AngularDeceleration is {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDeceleration *AngularDecelerationType

// AngularDecelerationTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularDecelerationTimeSeries is Time series of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTimeSeries *AngularDecelerationTimeSeriesType

// ObservationUpdateRateType is {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateType struct {
	*CommonSampleType
}

// ObservationUpdateRate is {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRate *ObservationUpdateRateType

// ObservationUpdateRateTimeSeriesType is Time series of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// ObservationUpdateRateTimeSeries is Time series of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTimeSeries *ObservationUpdateRateTimeSeriesType

// PressureAbsoluteType is The force per unit area measured relative to a vacuum.
type PressureAbsoluteType struct {
	*CommonSampleType
}

// PressureAbsolute is The force per unit area measured relative to a vacuum.
type PressureAbsolute *PressureAbsoluteType

// PressureAbsoluteTimeSeriesType is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// PressureAbsoluteTimeSeries is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeries *PressureAbsoluteTimeSeriesType

// OpennessType is {{def(SampleEnum:OPENNESS)}}
type OpennessType struct {
	*CommonSampleType
}

// Openness is {{def(SampleEnum:OPENNESS)}}
type Openness *OpennessType

// OpennessTimeSeriesType is Time series of {{def(SampleEnum:OPENNESS)}}
type OpennessTimeSeriesType struct {
	*TimeSeriesType
}

// OpennessTimeSeries is Time series of {{def(SampleEnum:OPENNESS)}}
type OpennessTimeSeries *OpennessTimeSeriesType

// ConditionDescriptionType is The description of the Condition
type ConditionDescriptionType string

// NativeSeverityType is The device's severity
type NativeSeverityType string

// QualifierType is The value is too low
type QualifierType string

// ConditionType is Description
type ConditionType struct {
	ObservationType    *ObservationType
	TypeAttr           *DataItemEnumType       `xml:"type,attr"`
	NativeCodeAttr     string                  `xml:"nativeCode,attr,omitempty"`
	NativeSeverityAttr string                  `xml:"nativeSeverity,attr,omitempty"`
	QualifierAttr      string                  `xml:"qualifier,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	Value              string                  `xml:",chardata"`
}

// Condition is Description
type Condition *ConditionType

// UnavailableType is The conditon can not be determined.
type UnavailableType struct {
	*ConditionType
}

// Unavailable is The conditon can not be determined.
type Unavailable *UnavailableType

// NormalType is {{term(condition state)}} that indicates operation within specified
//         limits.
type NormalType struct {
	*ConditionType
}

// Normal is {{term(condition state)}} that indicates operation within specified
//         limits.
type Normal *NormalType

// WarningType is {{term(condition state)}} that requires concern and supervision and may
//         become hazardous if no action is taken.
type WarningType struct {
	*ConditionType
}

// Warning is {{term(condition state)}} that requires concern and supervision and may
//         become hazardous if no action is taken.
type Warning *WarningType

// FaultType is {{term(condition state)}} that requires intervention to continue
//         operation to function properly.
type FaultType struct {
	*ConditionType
}

// Fault is {{term(condition state)}} that requires intervention to continue
//         operation to function properly.
type Fault *FaultType

// LocationValueType is The tool location
type LocationValueType int

// ProgramToolNumberType is The number referenced in the program for this tool
type ProgramToolNumberType int

// ReconditionCountValueType is The number of times the cutter has been reconditioned
type ReconditionCountValueType int

// ConnectionCodeMachineSideType is The code for the connection to the machine
type ConnectionCodeMachineSideType string

// ProgramToolGroupType is The tool group associated with the tool
type ProgramToolGroupType string

// SpeedType is A speed in RPM or mm/s
type SpeedType string

// MeasurementValueType is A measurement value
type MeasurementValueType string

// LocationSizeType is The number of location units required to hold this tool
type LocationSizeType int

// MeasurementAttrType is A measurement value
type MeasurementAttrType float32

// CuttingToolIdType is The tool identifier
type CuttingToolIdType string

// EdgeCountType is The number of cutting edges
type EdgeCountType int

// OverlapType is The number of additional locations taken by a tool
type OverlapType int

// ToolLifeValueType is The life of the tool in time, wear, or parts
type ToolLifeValueType float32

// ItemIdType is An identifier for the insert
type ItemIdType string

// IndexRangeType is A single or range of indexes. A range can be a comma separated set of
//         individual elements as in "1,2,3,4", or as a inclusive range
//         of values as in "1-10" or multiple ranges "1-4,6-10"
type IndexRangeType string

// MinimumType is A minimum value
type MinimumType float32

// MaximumType is A maximum value
type MaximumType float32

// NominalType is A nominal value
type NominalType float32

// GradeType is The material for a cutting item
type GradeType string

// MaximumCountType is A maximum count value
type MaximumCountType int

// MeasurementCodeType is A application specific code
type MeasurementCodeType string

// ManufacturersType is A comman delimited list of manufactures
type ManufacturersType string

// LocationRelationType is A relationship
type LocationRelationType string

// DefinitionFormatType is The definition will be provided in an unspecified format
type DefinitionFormatType string

// CutterStatusValueType is The status of this cutter is undetermined
type CutterStatusValueType string

// ToolLifeDirectionType is The tool life counts down from maximum to 0
type ToolLifeDirectionType string

// ToolLifeTypeType is Measurement of tool life in tool wear
type ToolLifeTypeType string

// LocationsTypeType is A location associated with an end effector
type LocationsTypeType string

// CuttingToolDefinitionType is Any elements
type CuttingToolDefinitionType struct {
	FormatAttr string `xml:"format,attr,omitempty"`
}

// CuttingToolType is data regarding the application or use of the tool. This data
//                   is provided by various pieces of equipment (i.e. machine tool,
//                   presetter) and statistical process control applications. Life
//                   cycle data will not remain static, but will change
//                   periodically when a tool is used or measured.
type CuttingToolType struct {
	SerialNumberAttr      string                     `xml:"serialNumber,attr"`
	ManufacturersAttr     string                     `xml:"manufacturers,attr,omitempty"`
	ToolIdAttr            string                     `xml:"toolId,attr"`
	Description           *AssetDescriptionType      `xml:"Description"`
	CuttingToolDefinition *CuttingToolDefinitionType `xml:"CuttingToolDefinition"`
	CuttingToolLifeCycle  *CuttingToolLifeCycleType  `xml:"CuttingToolLifeCycle"`
	*AssetType
}

// CuttingTool is {{block(Asset)}} that physically removes the material from the workpiece
//         by shear deformation.
type CuttingTool *CuttingToolType

// CuttingToolArchetypeType is data regarding the application or use of the tool. This data
//                   is provided by various pieces of equipment (i.e. machine tool,
//                   presetter) and statistical process control applications. Life
//                   cycle data will not remain static, but will change
//                   periodically when a tool is used or measured.
type CuttingToolArchetypeType struct {
	ToolIdAttr            string                             `xml:"toolId,attr,omitempty"`
	Description           *AssetDescriptionType              `xml:"Description"`
	CuttingToolDefinition *CuttingToolDefinitionType         `xml:"CuttingToolDefinition"`
	CuttingToolLifeCycle  *CuttingToolLifeCycleArchetypeType `xml:"CuttingToolLifeCycle"`
	*AssetType
}

// CuttingToolArchetype is {{block(Asset)}} that describes the static cutting tool geometries and
//         nominal values as one would expect from a tool catalog.
type CuttingToolArchetype *CuttingToolArchetypeType

// CuttingToolLifeCycleArchetypeType is {{block(CuttingItems)}} groups one or more {{block(CuttingItem)}}
//             entities. See {{sect(CuttingItem)}} and {{package(Cutting Item)}}
//             for more detail.
type CuttingToolLifeCycleArchetypeType struct {
	ReconditionCount          *ReconditionCountType     `xml:"ReconditionCount"`
	CuttingToolLife           []*LifeType               `xml:"CuttingToolLife"`
	ProgramToolGroup          string                    `xml:"ProgramToolGroup"`
	ProgramToolNumber         int                       `xml:"ProgramToolNumber"`
	ProcessSpindleSpeed       *ProcessSpindleSpeedType  `xml:"ProcessSpindleSpeed"`
	ProcessFeedRate           *ProcessFeedRateType      `xml:"ProcessFeedRate"`
	ConnectionCodeMachineSide string                    `xml:"ConnectionCodeMachineSide"`
	Measurements              *AssemblyMeasurementsType `xml:"Measurements"`
	CuttingItems              *CuttingItemsType         `xml:"CuttingItems"`
}

// CuttingToolLifeCycleType is {{block(CuttingItems)}} groups one or more {{block(CuttingItem)}}
//             entities. See {{sect(CuttingItem)}} and {{package(Cutting Item)}}
//             for more detail.
type CuttingToolLifeCycleType struct {
	CutterStatus              *CutterStatusType         `xml:"CutterStatus"`
	ReconditionCount          *ReconditionCountType     `xml:"ReconditionCount"`
	ToolLife                  []*LifeType               `xml:"ToolLife"`
	ProgramToolGroup          string                    `xml:"ProgramToolGroup"`
	ProgramToolNumber         int                       `xml:"ProgramToolNumber"`
	Location                  *LocationType             `xml:"Location"`
	ProcessSpindleSpeed       *ProcessSpindleSpeedType  `xml:"ProcessSpindleSpeed"`
	ProcessFeedRate           *ProcessFeedRateType      `xml:"ProcessFeedRate"`
	ConnectionCodeMachineSide string                    `xml:"ConnectionCodeMachineSide"`
	Measurements              *AssemblyMeasurementsType `xml:"Measurements"`
	CuttingItems              *CuttingItemsType         `xml:"CuttingItems"`
}

// CuttingToolArchetypeReferenceType is reference information about the {{property(assetId)}} and/or the URL of
//         the data source of {{block(CuttingToolArchetype)}}.
type CuttingToolArchetypeReferenceType struct {
	SourceAttr string `xml:"source,attr,omitempty"`
	Value      string `xml:",chardata"`
}

// CutterStatusType is status of the cutting tool.
type CutterStatusType struct {
	Status []string `xml:"Status"`
}

// LocationType is Description
type LocationType struct {
	TypeAttr                 string `xml:"type,attr"`
	NegativeOverlapAttr      int    `xml:"negativeOverlap,attr,omitempty"`
	PositiveOverlapAttr      int    `xml:"positiveOverlap,attr,omitempty"`
	TurretAttr               string `xml:"turret,attr,omitempty"`
	ToolMagazineAttr         string `xml:"toolMagazine,attr,omitempty"`
	ToolRackAttr             string `xml:"toolRack,attr,omitempty"`
	ToolBarAttr              string `xml:"toolBar,attr,omitempty"`
	AutomaticToolChangerAttr string `xml:"automaticToolChanger,attr,omitempty"`
	Value                    int    `xml:",chardata"`
}

// ReconditionCountType is Description
type ReconditionCountType struct {
	MaximumCountAttr int `xml:"maximumCount,attr,omitempty"`
	Value            int `xml:",chardata"`
}

// ProcessSpindleSpeedType is constrained process spindle speed for the tool in revolutions/minute.
//         The {{property(value)}} **MAY** contain the nominal process target
//         spindle speed if available. If {{block(ProcessSpindleSpeed)}} is
//         provided, at least one value of {{property(maximum)}},
//         {{property(nominal)}}, or {{property(minimum)}} **MUST** be specified.
type ProcessSpindleSpeedType struct {
	MaximumAttr float32 `xml:"maximum,attr,omitempty"`
	MinimumAttr float32 `xml:"minimum,attr,omitempty"`
	NominalAttr float32 `xml:"nominal,attr,omitempty"`
	Value       string  `xml:",chardata"`
}

// ProcessFeedRateType is constrained process feed rate for the tool in mm/s. The
//         {{property(value)}} **MAY** contain the nominal process target feed rate
//         if available. If {{block(ProcessFeedRate)}} is provided, at least one
//         value of {{property(maximum)}}, {{property(nominal)}}, or
//         {{property(minimum)}} **MUST** be specified.
type ProcessFeedRateType struct {
	MaximumAttr float32 `xml:"maximum,attr,omitempty"`
	MinimumAttr float32 `xml:"minimum,attr,omitempty"`
	NominalAttr float32 `xml:"nominal,attr,omitempty"`
	Value       string  `xml:",chardata"`
}

// MeasurementType is Description
type MeasurementType struct {
	SignificantDigitsAttr int              `xml:"significantDigits,attr,omitempty"`
	UnitsAttr             *UnitsType       `xml:"units,attr,omitempty"`
	NativeUnitsAttr       *NativeUnitsType `xml:"nativeUnits,attr,omitempty"`
	CodeAttr              string           `xml:"code,attr,omitempty"`
	MaximumAttr           float32          `xml:"maximum,attr,omitempty"`
	MinimumAttr           float32          `xml:"minimum,attr,omitempty"`
	NominalAttr           float32          `xml:"nominal,attr,omitempty"`
	Value                 string           `xml:",chardata"`
}

// Measurement is Description
type Measurement *MeasurementType

// CommonMeasurementType is Measurements for both the assembly and the cutting item
type CommonMeasurementType struct {
	*MeasurementType
}

// CommonMeasurement is Measurements for both the assembly and the cutting item
type CommonMeasurement *CommonMeasurementType

// AssemblyMeasurementType is Measurements for the assembly
type AssemblyMeasurementType struct {
	*MeasurementType
}

// AssemblyMeasurement is Measurements for the assembly
type AssemblyMeasurement *AssemblyMeasurementType

// CuttingItemMeasurementType is Measurements for the cutting item
type CuttingItemMeasurementType struct {
	*MeasurementType
}

// CuttingItemMeasurement is Measurements for the cutting item
type CuttingItemMeasurement *CuttingItemMeasurementType

// AssemblyMeasurementsType is A collection of assembly measurements
type AssemblyMeasurementsType struct {
	CommonMeasurement   []*CommonMeasurementType   `xml:"CommonMeasurement"`
	AssemblyMeasurement []*AssemblyMeasurementType `xml:"AssemblyMeasurement"`
}

// ProtrudingLengthType is dimension from the yz-plane to the furthest point of the tool item or
//         adaptive item measured in the -X direction.
type ProtrudingLengthType struct {
	*CommonMeasurementType
}

// ProtrudingLength is dimension from the yz-plane to the furthest point of the tool item or
//         adaptive item measured in the -X direction.
type ProtrudingLength *ProtrudingLengthType

// WeightType is total weight of the cutting tool in grams. The force exerted by the mass
//         of the cutting tool.
type WeightType struct {
	*CommonMeasurementType
}

// Weight is total weight of the cutting tool in grams. The force exerted by the mass
//         of the cutting tool.
type Weight *WeightType

// FunctionalLengthType is distance from the gauge plane or from the end of the shank to the
//         furthest point on the tool, if a gauge plane does not exist, to the
//         cutting reference point determined by the main function of the tool. The
//         {{block(CuttingTool)}} functional length will be the length of the
//         entire tool, not a single cutting item. Each {{block(CuttingItem)}} can
//         have an independent {{block(FunctionalLength)}} represented in its
//         measurements.
type FunctionalLengthType struct {
	*CommonMeasurementType
}

// FunctionalLength is distance from the gauge plane or from the end of the shank to the
//         furthest point on the tool, if a gauge plane does not exist, to the
//         cutting reference point determined by the main function of the tool. The
//         {{block(CuttingTool)}} functional length will be the length of the
//         entire tool, not a single cutting item. Each {{block(CuttingItem)}} can
//         have an independent {{block(FunctionalLength)}} represented in its
//         measurements.
type FunctionalLength *FunctionalLengthType

// BodyDiameterMaxType is largest diameter of the body of a tool item.
type BodyDiameterMaxType struct {
	*AssemblyMeasurementType
}

// BodyDiameterMax is largest diameter of the body of a tool item.
type BodyDiameterMax *BodyDiameterMaxType

// BodyLengthMaxType is distance measured along the X axis from that point of the item closest
//         to the workpiece, including the cutting item for a tool item but
//         excluding a protruding locking mechanism for an adaptive item, to either
//         the front of the flange on a flanged body or the beginning of the
//         connection interface feature on the machine side for cylindrical or
//         prismatic shanks.
type BodyLengthMaxType struct {
	*AssemblyMeasurementType
}

// BodyLengthMax is distance measured along the X axis from that point of the item closest
//         to the workpiece, including the cutting item for a tool item but
//         excluding a protruding locking mechanism for an adaptive item, to either
//         the front of the flange on a flanged body or the beginning of the
//         connection interface feature on the machine side for cylindrical or
//         prismatic shanks.
type BodyLengthMax *BodyLengthMaxType

// CuttingDiameterMaxType is maximum diameter of a circle on which the defined point Pk of each of
//         the master inserts is located on a tool item. The normal of the machined
//         peripheral surface points towards the axis of the cutting tool.
type CuttingDiameterMaxType struct {
	*AssemblyMeasurementType
}

// CuttingDiameterMax is maximum diameter of a circle on which the defined point Pk of each of
//         the master inserts is located on a tool item. The normal of the machined
//         peripheral surface points towards the axis of the cutting tool.
type CuttingDiameterMax *CuttingDiameterMaxType

// FlangeDiameterMaxType is dimension between two parallel tangents on the outside edge of a flange.
type FlangeDiameterMaxType struct {
	*AssemblyMeasurementType
}

// FlangeDiameterMax is dimension between two parallel tangents on the outside edge of a flange.
type FlangeDiameterMax *FlangeDiameterMaxType

// DepthOfCutMaxType is maximum engagement of the cutting edge or edges with the workpiece
//         measured perpendicular to the feed motion.
type DepthOfCutMaxType struct {
	*AssemblyMeasurementType
}

// DepthOfCutMax is maximum engagement of the cutting edge or edges with the workpiece
//         measured perpendicular to the feed motion.
type DepthOfCutMax *DepthOfCutMaxType

// OverallToolLengthType is largest length dimension of the cutting tool including the master insert
//         where applicable.
type OverallToolLengthType struct {
	*AssemblyMeasurementType
}

// OverallToolLength is largest length dimension of the cutting tool including the master insert
//         where applicable.
type OverallToolLength *OverallToolLengthType

// ShankDiameterType is dimension of the diameter of a cylindrical portion of a tool item or an
//         adaptive item that can participate in a connection.
type ShankDiameterType struct {
	*AssemblyMeasurementType
}

// ShankDiameter is dimension of the diameter of a cylindrical portion of a tool item or an
//         adaptive item that can participate in a connection.
type ShankDiameter *ShankDiameterType

// ShankHeightType is dimension of the height of the shank.
type ShankHeightType struct {
	*AssemblyMeasurementType
}

// ShankHeight is dimension of the height of the shank.
type ShankHeight *ShankHeightType

// ShankLengthType is dimension of the length of the shank.
type ShankLengthType struct {
	*AssemblyMeasurementType
}

// ShankLength is dimension of the length of the shank.
type ShankLength *ShankLengthType

// UsableLengthMaxType is maximum length of a cutting tool that can be used in a particular
//         cutting operation including the non-cutting portions of the tool.
type UsableLengthMaxType struct {
	*AssemblyMeasurementType
}

// UsableLengthMax is maximum length of a cutting tool that can be used in a particular
//         cutting operation including the non-cutting portions of the tool.
type UsableLengthMax *UsableLengthMaxType

// LifeType is Abstract cutter life
type LifeType struct {
	TypeAttr           string  `xml:"type,attr"`
	CountDirectionAttr string  `xml:"countDirection,attr"`
	WarningAttr        float32 `xml:"warning,attr,omitempty"`
	LimitAttr          float32 `xml:"limit,attr,omitempty"`
	InitialAttr        float32 `xml:"initial,attr,omitempty"`
	Value              float32 `xml:",chardata"`
}

// CuttingItemMeasurementsType is A collection of assembly measurements
type CuttingItemMeasurementsType struct {
	CommonMeasurement      []*CommonMeasurementType      `xml:"CommonMeasurement"`
	CuttingItemMeasurement []*CuttingItemMeasurementType `xml:"CuttingItemMeasurement"`
}

// CuttingDiameterType is diameter of a circle on which the defined point Pk located on this
//         cutting tool. The normal of the machined peripheral surface points
//         towards the axis of the cutting tool.
type CuttingDiameterType struct {
	*CuttingItemMeasurementType
}

// CuttingDiameter is diameter of a circle on which the defined point Pk located on this
//         cutting tool. The normal of the machined peripheral surface points
//         towards the axis of the cutting tool.
type CuttingDiameter *CuttingDiameterType

// CornerRadiusType is nominal radius of a rounded corner measured in the X Y-plane.
type CornerRadiusType struct {
	*CuttingItemMeasurementType
}

// CornerRadius is nominal radius of a rounded corner measured in the X Y-plane.
type CornerRadius *CornerRadiusType

// CuttingEdgeLengthType is theoretical length of the cutting edge of a cutting item over sharp
//         corners.
type CuttingEdgeLengthType struct {
	*CuttingItemMeasurementType
}

// CuttingEdgeLength is theoretical length of the cutting edge of a cutting item over sharp
//         corners.
type CuttingEdgeLength *CuttingEdgeLengthType

// CuttingHeightType is distance from the basal plane of the tool item to the cutting point.
type CuttingHeightType struct {
	*CuttingItemMeasurementType
}

// CuttingHeight is distance from the basal plane of the tool item to the cutting point.
type CuttingHeight *CuttingHeightType

// CuttingReferencePointType is theoretical sharp point of the cutting tool from which the major
//         functional dimensions are taken.
type CuttingReferencePointType struct {
	*CuttingItemMeasurementType
}

// CuttingReferencePoint is theoretical sharp point of the cutting tool from which the major
//         functional dimensions are taken.
type CuttingReferencePoint *CuttingReferencePointType

// FlangeDiameterType is dimension between two parallel tangents on the outside edge of a flange.
type FlangeDiameterType struct {
	*CuttingItemMeasurementType
}

// FlangeDiameter is dimension between two parallel tangents on the outside edge of a flange.
type FlangeDiameter *FlangeDiameterType

// FunctionalWidthType is distance between the cutting reference point and the rear backing
//         surface of a turning tool or the axis of a boring bar.
type FunctionalWidthType struct {
	*CuttingItemMeasurementType
}

// FunctionalWidth is distance between the cutting reference point and the rear backing
//         surface of a turning tool or the axis of a boring bar.
type FunctionalWidth *FunctionalWidthType

// InclinationAngleType is angle between the tool rake plane and a plane parallel to the xy-plane
//         measured in the tool cutting edge plane
type InclinationAngleType struct {
	*CuttingItemMeasurementType
}

// InclinationAngle is angle between the tool rake plane and a plane parallel to the xy-plane
//         measured in the tool cutting edge plane
type InclinationAngle *InclinationAngleType

// IncribedCircleDiameterType is diameter of a circle to which all edges of a equilateral and round
//         regular insert are tangential.
type IncribedCircleDiameterType struct {
	*CuttingItemMeasurementType
}

// IncribedCircleDiameter is diameter of a circle to which all edges of a equilateral and round
//         regular insert are tangential.
type IncribedCircleDiameter *IncribedCircleDiameterType

// PointAngleType is angle between the major cutting edge and the same cutting edge rotated
//         by 180 degrees about the tool axis.
type PointAngleType struct {
	*CuttingItemMeasurementType
}

// PointAngle is angle between the major cutting edge and the same cutting edge rotated
//         by 180 degrees about the tool axis.
type PointAngle *PointAngleType

// StepDiameterLengthType is length of a portion of a stepped tool that is related to a corresponding
//         cutting diameter measured from the cutting reference point of that
//         cutting diameter to the point on the next cutting edge at which the
//         diameter starts to change.
type StepDiameterLengthType struct {
	*CuttingItemMeasurementType
}

// StepDiameterLength is length of a portion of a stepped tool that is related to a corresponding
//         cutting diameter measured from the cutting reference point of that
//         cutting diameter to the point on the next cutting edge at which the
//         diameter starts to change.
type StepDiameterLength *StepDiameterLengthType

// StepIncludedAngleType is angle between a major edge on a step of a stepped tool and the same
//         cutting edge rotated 180 degrees about its tool axis.
type StepIncludedAngleType struct {
	*CuttingItemMeasurementType
}

// StepIncludedAngle is angle between a major edge on a step of a stepped tool and the same
//         cutting edge rotated 180 degrees about its tool axis.
type StepIncludedAngle *StepIncludedAngleType

// ToolCuttingEdgeAngleType is angle between the tool cutting edge plane and the tool feed plane
//         measured in a plane parallel the xy-plane.
type ToolCuttingEdgeAngleType struct {
	*CuttingItemMeasurementType
}

// ToolCuttingEdgeAngle is angle between the tool cutting edge plane and the tool feed plane
//         measured in a plane parallel the xy-plane.
type ToolCuttingEdgeAngle *ToolCuttingEdgeAngleType

// ToolLeadAngleType is angle between the tool cutting edge plane and a plane perpendicular to
//         the tool feed plane measured in a plane parallel the xy-plane.
type ToolLeadAngleType struct {
	*CuttingItemMeasurementType
}

// ToolLeadAngle is angle between the tool cutting edge plane and a plane perpendicular to
//         the tool feed plane measured in a plane parallel the xy-plane.
type ToolLeadAngle *ToolLeadAngleType

// WiperEdgeLengthType is measure of the length of a wiper edge of a cutting item.
type WiperEdgeLengthType struct {
	*CuttingItemMeasurementType
}

// WiperEdgeLength is measure of the length of a wiper edge of a cutting item.
type WiperEdgeLength *WiperEdgeLengthType

// ToolOrientationType is angle of the tool with respect to the workpiece for a given process. The
//         value is application specific.
type ToolOrientationType struct {
	Value string `xml:",chardata"`
}

// DriveAngleType is angle between the driving mechanism locator on a tool item and the main
//         cutting edge.
type DriveAngleType struct {
	Value string `xml:",chardata"`
}

// LocusType is The location of the cutting item - not yet restricted.
type LocusType string

// CuttingItemsType is part of of the tool that physically removes the material from the
//             workpiece by shear deformation.
type CuttingItemsType struct {
	CountAttr   int                `xml:"count,attr"`
	CuttingItem []*CuttingItemType `xml:"CuttingItem"`
}

// CuttingItemType is {{block(Measurements)}} groups one or more {{block(Measurement)}}
//             subtypes. See {{sect(Measurement)}}.
type CuttingItemType struct {
	IndicesAttr       string                       `xml:"indices,attr"`
	ItemIdAttr        string                       `xml:"itemId,attr,omitempty"`
	GradeAttr         string                       `xml:"grade,attr,omitempty"`
	ManufacturersAttr string                       `xml:"manufacturers,attr,omitempty"`
	Description       *AssetDescriptionType        `xml:"Description"`
	CutterStatus      *CutterStatusType            `xml:"CutterStatus"`
	Locus             string                       `xml:"Locus"`
	ItemLife          []*LifeType                  `xml:"ItemLife"`
	ProgramToolGroup  string                       `xml:"ProgramToolGroup"`
	Measurements      *CuttingItemMeasurementsType `xml:"Measurements"`
}

// VersionIdType is The version of the file
type VersionIdType string

// FileMimeTypeType is The mime type of the file
type FileMimeTypeType string

// FileSizeType is The size in bytes of the file
type FileSizeType int

// FileNameType is The name of the file
type FileNameType string

// ApplicationCategoryExtType is Extended tyoe for The category of application that will use this file
type ApplicationCategoryExtType string

// ApplicationCategoryEnum is Files related to the setup of a process
type ApplicationCategoryEnum string

// ApplicationCategoryType is The category of application that will use this file
type ApplicationCategoryType struct {
	ApplicationCategoryExtType string
	ApplicationCategoryEnum    string
}

// ApplicationTypeExtType is Extended tyoe for The type classification of a file
type ApplicationTypeExtType string

// ApplicationTypeEnum is Machine instructions to perform a process
type ApplicationTypeEnum string

// ApplicationTypeType is The type classification of a file
type ApplicationTypeType struct {
	ApplicationTypeExtType string
	ApplicationTypeEnum    string
}

// FileArchetypeType is {{block(FileComments)}} groups one or more
//                 {{block(FileComment)}} entities for a {{block(File)}}. See
//                 {{sect(FileComment)}}.
type FileArchetypeType struct {
	NameAttr                string                   `xml:"name,attr"`
	MediaTypeAttr           string                   `xml:"mediaType,attr"`
	ApplicationCategoryAttr *ApplicationCategoryType `xml:"applicationCategory,attr"`
	ApplicationTypeAttr     *ApplicationTypeType     `xml:"applicationType,attr"`
	FileProperties          *FilePropertiesType      `xml:"FileProperties"`
	FileComments            *FileCommentsType        `xml:"FileComments"`
	*AssetType
}

// FileArchetype is {{block(AbstractFile)}} type that provides information common to all
//         versions of a file.
type FileArchetype *FileArchetypeType

// FilePropertiesType is key-value pair providing additional metadata about a
//             {{block(File)}}.
type FilePropertiesType struct {
	FileProperty []*FilePropertyType `xml:"FileProperty"`
}

// FilePropertyValueType is The value of a file property
type FilePropertyValueType string

// FilePropertyType is key-value pair providing additional metadata about a {{block(File)}}.
type FilePropertyType struct {
	NameAttr string `xml:"name,attr"`
	Value    string `xml:",chardata"`
}

// FileStateType is the content is modified from PRODUCTION or EXPERIMENTAL (Note: To
//             capture northbound changes. execution -> prod engineering)
type FileStateType string

// PublicKeyType is An X501 Public Key
type PublicKeyType string

// SignatureType is A secure hash
type SignatureType string

// FileTimeType is A file time
type FileTimeType string

// FileType is time the file was modified.
type FileType struct {
	NameAttr                string                   `xml:"name,attr"`
	MediaTypeAttr           string                   `xml:"mediaType,attr"`
	ApplicationCategoryAttr *ApplicationCategoryType `xml:"applicationCategory,attr"`
	ApplicationTypeAttr     *ApplicationTypeType     `xml:"applicationType,attr"`
	SizeAttr                int                      `xml:"size,attr"`
	VersionIdAttr           string                   `xml:"versionId,attr"`
	StateAttr               string                   `xml:"state,attr"`
	FileProperties          *FilePropertiesType      `xml:"FileProperties"`
	FileComments            *FileCommentsType        `xml:"FileComments"`
	FileLocation            *FileLocationType        `xml:"FileLocation"`
	Signature               string                   `xml:"Signature"`
	PublicKey               string                   `xml:"PublicKey"`
	Destinations            *FileDestinationsType    `xml:"Destinations"`
	CreationTime            string                   `xml:"CreationTime"`
	ModificationTime        string                   `xml:"ModificationTime"`
	*AssetType
}

// File is {{block(AbstractFile)}} type that provides information about the
//         {{block(File)}} instance and its {{term(URL)}}.
type File *FileType

// FileLocationType is {{term(URL)}} reference to the file location.
type FileLocationType struct {
	HrefAttr      string `xml:"href,attr"`
	XlinkTypeAttr string `xml:"xlink:type,attr,omitempty"`
	Value         string `xml:",chardata"`
}

// FileDestinationsType is reference to the target {{block(Device)}} for this {{block(File)}}.
type FileDestinationsType struct {
	Destination []*FileDestinationType `xml:"Destination"`
}

// FileDestinationType is The Destination is a reference to the target Device for this File
type FileDestinationType struct {
	Value string `xml:",chardata"`
}

// FileCommentsType is remark or interpretation for human interpretation associated with a
//             {{block(File)}} or {{block(FileArchetype)}}.
type FileCommentsType struct {
	FileComment []*FileCommentType `xml:"FileComment"`
}

// CommentTextType is the text of the comment
type CommentTextType string

// FileCommentType is remark or interpretation for human interpretation associated with a
//         {{block(File)}} or {{block(FileArchetype)}}.
type FileCommentType struct {
	TimestampAttr string `xml:"timestamp,attr"`
	Value         string `xml:",chardata"`
}
