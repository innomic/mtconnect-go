// Code generated by xgen. DO NOT EDIT.

package mtdevices

// MTConnectDevices is The root node for MTConnect
type MTConnectDevices *MTConnectDevicesType

// SenderType is The sender of the message
type SenderType string

// CreationTimeType is The date and time the document was created
type CreationTimeType string

// SequenceType is A sequence number
type SequenceType int

// TestIndicatorType is A debugging flag for testing.
type TestIndicatorType bool

// InstanceIdType is The instance number of the agent, used for fault tolerance
type InstanceIdType int

// BufferSizeType is The size of the agents buffer
type BufferSizeType int

// TimestampType is The time the sample was reported
type TimestampType string

// OccurrenceTimeType is The time a sample occurred
type OccurrenceTimeType string

// VersionType is A version number
type VersionType string

// NameType is A short name for any element
type NameType string

// UuidType is A universally unique id that uniquely identifies the element for
//         it's entire life
type UuidType string

// SerialNumberAttrType is A serial number for a piece of equipment
type SerialNumberAttrType string

// ItemSourceType is The measurement source
type ItemSourceType string

// RateType is A sample rate in milliseconds per sample
type RateType float32

// ComponentIdType is The id of the component (maps to the id from probe)
type ComponentIdType string

// IDType is An identifier
type IDType string

// SignificantDigitsValueType is The number significant digits
type SignificantDigitsValueType int

// CompositionIdType is The item's reference to the Device model composition
type CompositionIdType string

// DurationTimeType is A length of time in seconds
type DurationTimeType float32

// RemovedType is A flag indicating the item has been removed
type RemovedType bool

// KeyType is The key for adata set
type KeyType string

// DeviceModelChangeTimeType is A timestamp in 8601 format of the last update of the Device information
//         for any device
type DeviceModelChangeTimeType string

// AssetIdType is The unique id of the asset
type AssetIdType string

// AssetAttrTypeType is An asset type
type AssetAttrTypeType string

// AssetBufferSizeType is The maximum number of assets
type AssetBufferSizeType int

// AssetCountAttrType is The number of assets
type AssetCountAttrType int

// FloatListValueType is Common floating point sample value
type FloatListValueType []float32

// ThreeSpaceValueType is A three dimensional value 'X Y Z' or 'A B C'
type ThreeSpaceValueType *FloatListValueType

// DescriptionTextType is A description
type DescriptionTextType string

// DataItemEnumExtType is Extended tyoe for The types of measurements available
type DataItemEnumExtType string

// DataItemEnumEnum is A user variable
type DataItemEnumEnum string

// DataItemEnumType is The types of measurements available
type DataItemEnumType struct {
	DataItemEnumExtType string
	DataItemEnumEnum    string
}

// DataItemSubEnumExtType is Extended tyoe for The sub-types for a measurement
type DataItemSubEnumExtType string

// DataItemSubEnumEnum is Reported or measured value of amount included in the {{term(part)}}.
type DataItemSubEnumEnum string

// DataItemSubEnumType is The sub-types for a measurement
type DataItemSubEnumType struct {
	DataItemSubEnumExtType string
	DataItemSubEnumEnum    string
}

// DataItemStatisticsExtType is Extended tyoe for Statistical operations on data
type DataItemStatisticsExtType string

// DataItemStatisticsEnum is Statistical Standard Deviation value calculated for the data item
//             during the calculation period.
type DataItemStatisticsEnum string

// DataItemStatisticsType is Statistical operations on data
type DataItemStatisticsType struct {
	DataItemStatisticsExtType string
	DataItemStatisticsEnum    string
}

// UnitsExtType is Extended tyoe for The units supported
type UnitsExtType string

// UnitsEnum is A 3D Unit Vector. Space delimited list of three floating point
//             numbers.
type UnitsEnum string

// UnitsType is The units supported
type UnitsType struct {
	UnitsExtType string
	UnitsEnum    string
}

// NativeUnitsExtType is Extended tyoe for The units supported for the source equipment that can
//         be converted into MTC Units.
type NativeUnitsExtType string

// NativeUnitsEnum is Pascal per minute.
type NativeUnitsEnum string

// NativeUnitsType is The units supported for the source equipment that can be converted into
//         MTC Units.
type NativeUnitsType struct {
	NativeUnitsExtType string
	NativeUnitsEnum    string
}

// CoordinateSystemEnumType is The coordinate system that represents the working area for a
//             particular workpiece whose origin is shifted within the `MACHINE`
//             coordinate system. If the `WORK` coordinates are not currently
//             defined in the piece of equipment, the `MACHINE` coordinates will be
//             used.
type CoordinateSystemEnumType string

// DataItemResetValueExtType is Extended tyoe for The reset intervals
type DataItemResetValueExtType string

// DataItemResetValueEnum is The value of the {{term(Data Item)}} is to be reset at the end of a
//             7-day period.
type DataItemResetValueEnum string

// DataItemResetValueType is The reset intervals
type DataItemResetValueType struct {
	DataItemResetValueExtType string
	DataItemResetValueEnum    string
}

// HeaderAttributesType is A timestamp in 8601 format of the last update of the Device
//           information for any device
type HeaderAttributesType struct {
	VersionAttr               string `xml:"version,attr"`
	CreationTimeAttr          string `xml:"creationTime,attr"`
	TestIndicatorAttr         bool   `xml:"testIndicator,attr,omitempty"`
	InstanceIdAttr            int    `xml:"instanceId,attr"`
	SenderAttr                string `xml:"sender,attr"`
	DeviceModelChangeTimeAttr string `xml:"deviceModelChangeTime,attr"`
}

// AssetCountValueType is The number of assets
type AssetCountValueType int

// AssetTypeType is Type of mtconnect asset
type AssetTypeType string

// AssetCountType is List of the count of all mtconnect assets in the agent buffer.
type AssetCountType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	Value         int    `xml:",chardata"`
}

// AssetCountsType is Count of an mtconnect asset
type AssetCountsType struct {
	AssetCount []*AssetCountType `xml:"AssetCount"`
}

// HeaderType is List of the count of all mtconnect assets in the agent buffer.
type HeaderType struct {
	HeaderAttributesType *HeaderAttributesType
	BufferSizeAttr       int              `xml:"bufferSize,attr"`
	AssetBufferSizeAttr  int              `xml:"assetBufferSize,attr"`
	AssetCountAttr       int              `xml:"assetCount,attr"`
	AssetCounts          *AssetCountsType `xml:"AssetCounts"`
}

// MTConnectDevicesType is {{block(Devices)}} **MUST** {{term(organize)}} one or more
//             {{block(Device)}} elements.
type MTConnectDevicesType struct {
	Header  *HeaderType  `xml:"Header"`
	Devices *DevicesType `xml:"Devices"`
}

// StationType is The station id for this device
type StationType string

// Iso841ClassType is The ISO 841 classification for the device
type Iso841ClassType int

// ModelType is The model name
type ModelType string

// DevicesType is A {{term(Device)}} is a {{term(Component)}} representing a piece of
//             equipment or a manufacturing system that produces observations about
//             itself or publishes data. It organizes its parts as
//             {{termplural(Component)}}.
type DevicesType struct {
	Agent  *AgentType    `xml:"Agent"`
	Device []*DeviceType `xml:"Device"`
}

// ComponentType is References Model
type ComponentType struct {
	IdAttr             string                      `xml:"id,attr"`
	NativeNameAttr     string                      `xml:"nativeName,attr,omitempty"`
	SampleIntervalAttr float32                     `xml:"sampleInterval,attr,omitempty"`
	SampleRateAttr     float32                     `xml:"sampleRate,attr,omitempty"`
	Description        *ComponentDescriptionType   `xml:"Description"`
	Configuration      *ComponentConfigurationType `xml:"Configuration"`
	DataItems          *DataItemsType              `xml:"DataItems"`
	Components         *ComponentsType             `xml:"Components"`
	Compositions       *CompositionsType           `xml:"Compositions"`
	References         *ReferencesType             `xml:"References"`
}

// Component is A {{term(Structural Element)}} that represents a physical or logical
//         part or subpart of a piece of equipment.
type Component *ComponentType

// ComponentDescriptionType is The content of the description can text or XML elements
type ComponentDescriptionType struct {
	ManufacturerAttr string `xml:"manufacturer,attr,omitempty"`
	ModelAttr        string `xml:"model,attr,omitempty"`
	SerialNumberAttr string `xml:"serialNumber,attr,omitempty"`
	StationAttr      string `xml:"station,attr,omitempty"`
}

// CommonComponentType is An abstract component that has an optional uuid
type CommonComponentType struct {
	UuidAttr string `xml:"uuid,attr,omitempty"`
	NameAttr string `xml:"name,attr,omitempty"`
	*ComponentType
}

// CommonComponent is An abstract component that has an optional uuid
type CommonComponent *CommonComponentType

// ComponentsType is {{block(Components)}} {{termplural(organize)}} {{block(Component)}}
//         elements.
type ComponentsType struct {
	Component []*ComponentType `xml:"Component"`
}

// DeviceType is A {{term(Device)}} is a {{term(Component)}} representing a piece of
//         equipment or a manufacturing system that produces observations about
//         itself or publishes data. It organizes its parts as
//         {{termplural(Component)}}.
type DeviceType struct {
	Iso841ClassAttr      int    `xml:"iso841Class,attr,omitempty"`
	UuidAttr             string `xml:"uuid,attr"`
	NameAttr             string `xml:"name,attr"`
	MtconnectVersionAttr string `xml:"mtconnectVersion,attr,omitempty"`
	*ComponentType
}

// Device is A {{term(Device)}} is a {{term(Component)}} representing a piece of
//         equipment or a manufacturing system that produces observations about
//         itself or publishes data. It organizes its parts as
//         {{termplural(Component)}}.
type Device *DeviceType

// AgentType is Software that collects data published from one or more piece(s) of
//         equipment, organizes that data in a structured manner, and responds to
//         requests for data from client software systems by providing a structured
//         response in the form of a {{term(Response Document)}} that is
//         constructed using the {{term(semantic data model)}} of a Standard.
type AgentType struct {
	*DeviceType
}

// Agent is Software that collects data published from one or more piece(s) of
//         equipment, organizes that data in a structured manner, and responds to
//         requests for data from client software systems by providing a structured
//         response in the form of a {{term(Response Document)}} that is
//         constructed using the {{term(semantic data model)}} of a Standard.
type Agent *AgentType

// ActuatorType is A mechanism for moving or controlling a mechanical part of a piece of
//         equipment. It takes energy usually provided by air, electric current, or
//         liquid and converts the energy into some kind of motion.
type ActuatorType struct {
	*CommonComponentType
}

// Actuator is A mechanism for moving or controlling a mechanical part of a piece of
//         equipment. It takes energy usually provided by air, electric current, or
//         liquid and converts the energy into some kind of motion.
type Actuator *ActuatorType

// AuxiliaryType is {{block(Auxiliary)}} is an abstract {{block(Component)}} that represents
//         removable part(s) of a piece of equipment providing supplementary or
//         extended functionality.
type AuxiliaryType struct {
	*CommonComponentType
}

// Auxiliary is {{block(Auxiliary)}} is an abstract {{block(Component)}} that represents
//         removable part(s) of a piece of equipment providing supplementary or
//         extended functionality.
type Auxiliary *AuxiliaryType

// AxisType is Description
type AxisType struct {
	*CommonComponentType
}

// Axis is Description
type Axis *AxisType

// BarFeederType is {{block(BarFeeder)}} is a {{block(Loader)}} involved in delivering bar
//         stock to a piece of equipment.
type BarFeederType struct {
	*LoaderType
}

// BarFeeder is {{block(BarFeeder)}} is a {{block(Loader)}} involved in delivering bar
//         stock to a piece of equipment.
type BarFeeder *BarFeederType

// ChuckType is A mechanism that holds a part, stock material, or any other item in
//         place.
type ChuckType struct {
	*CommonComponentType
}

// Chuck is A mechanism that holds a part, stock material, or any other item in
//         place.
type Chuck *ChuckType

// ControllerType is {{block(Controller)}} represents the computational regulation and
//         management function of a piece of equipment.
type ControllerType struct {
	*SystemType
}

// Controller is {{block(Controller)}} represents the computational regulation and
//         management function of a piece of equipment.
type Controller *ControllerType

// CoolantType is {{block(Coolant)}} represents the information for a system comprised of
//         all the parts involved in distribution and management of fluids that
//         remove heat from a piece of equipment.
type CoolantType struct {
	*SystemType
}

// Coolant is {{block(Coolant)}} represents the information for a system comprised of
//         all the parts involved in distribution and management of fluids that
//         remove heat from a piece of equipment.
type Coolant *CoolantType

// DepositionType is {{block(Deposition)}} represents the information for a system that
//         manages the addition of material or state change of material being
//         performed in an additive manufacturing process. For example, this could
//         describe the portion of a piece of equipment that manages a material
//         extrusion process or a vat polymerization process.
type DepositionType struct {
	*SystemType
}

// Deposition is {{block(Deposition)}} represents the information for a system that
//         manages the addition of material or state change of material being
//         performed in an additive manufacturing process. For example, this could
//         describe the portion of a piece of equipment that manages a material
//         extrusion process or a vat polymerization process.
type Deposition *DepositionType

// DielectricType is {{block(Dielectric)}} represents the information for a system that
//         manages a chemical mixture used in a manufacturing process being
//         performed at that piece of equipment.
type DielectricType struct {
	*SystemType
}

// Dielectric is {{block(Dielectric)}} represents the information for a system that
//         manages a chemical mixture used in a manufacturing process being
//         performed at that piece of equipment.
type Dielectric *DielectricType

// DoorType is A mechanical mechanism or closure that can cover a physical access
//         portal into a piece of equipment allowing or restricting access to other
//         parts of the equipment.
type DoorType struct {
	*CommonComponentType
}

// Door is A mechanical mechanism or closure that can cover a physical access
//         portal into a piece of equipment allowing or restricting access to other
//         parts of the equipment.
type Door *DoorType

// ElectricType is {{block(Electric)}} represents the information for the main power supply
//         for device piece of equipment and the distribution of that power
//         throughout the equipment.
type ElectricType struct {
	*SystemType
}

// Electric is {{block(Electric)}} represents the information for the main power supply
//         for device piece of equipment and the distribution of that power
//         throughout the equipment.
type Electric *ElectricType

// EnclosureType is {{block(Enclosure)}} represents the information for a structure used to
//         contain or isolate a piece of equipment or area.
type EnclosureType struct {
	*SystemType
}

// Enclosure is {{block(Enclosure)}} represents the information for a structure used to
//         contain or isolate a piece of equipment or area.
type Enclosure *EnclosureType

// EndEffectorType is {{block(EndEffector)}} represents the information for those functions
//         that form the last link segment of a piece of equipment. It is the part
//         of a piece of equipment that interacts with the manufacturing process.
type EndEffectorType struct {
	*SystemType
}

// EndEffector is {{block(EndEffector)}} represents the information for those functions
//         that form the last link segment of a piece of equipment. It is the part
//         of a piece of equipment that interacts with the manufacturing process.
type EndEffector *EndEffectorType

// EnvironmentalType is {{block(Environmental)}} represents the information for a unit or
//         function involved in monitoring, managing, or conditioning the
//         environment around or within a piece of equipment.
type EnvironmentalType struct {
	*SystemType
}

// Environmental is {{block(Environmental)}} represents the information for a unit or
//         function involved in monitoring, managing, or conditioning the
//         environment around or within a piece of equipment.
type Environmental *EnvironmentalType

// FeederType is {{block(Feeder)}} represents the information for a system that manages
//         the delivery of materials within a piece of equipment.
type FeederType struct {
	*SystemType
}

// Feeder is {{block(Feeder)}} represents the information for a system that manages
//         the delivery of materials within a piece of equipment.
type Feeder *FeederType

// HydraulicType is {{block(Hydraulic)}} represents the information for a system comprised
//         of all the parts involved in moving and distributing pressurized liquid
//         throughout the piece of equipment.
type HydraulicType struct {
	*SystemType
}

// Hydraulic is {{block(Hydraulic)}} represents the information for a system comprised
//         of all the parts involved in moving and distributing pressurized liquid
//         throughout the piece of equipment.
type Hydraulic *HydraulicType

// InterfaceType is The means by which communication is achieved between independent
//         systems.
type InterfaceType struct {
	*CommonComponentType
}

// Interface is The means by which communication is achieved between independent
//         systems.
type Interface *InterfaceType

// LinearType is A {{block(Linear)}} axis represents the movement of a physical piece of
//         equipment, or a portion of the equipment, in a straight line.
type LinearType struct {
	*AxisType
}

// Linear is A {{block(Linear)}} axis represents the movement of a physical piece of
//         equipment, or a portion of the equipment, in a straight line.
type Linear *LinearType

// LoaderType is {{block(Loader)}} is an {{block(Auxiliary)}} comprised of all the parts
//         involved in moving and distributing materials, parts, tooling, and other
//         items to or from a piece of equipment.
type LoaderType struct {
	*AuxiliaryType
}

// Loader is {{block(Loader)}} is an {{block(Auxiliary)}} comprised of all the parts
//         involved in moving and distributing materials, parts, tooling, and other
//         items to or from a piece of equipment.
type Loader *LoaderType

// LubricationType is {{block(Lubrication)}} represents the information for a system comprised
//         of all the parts involved in distribution and management of fluids used
//         to lubricate portions of the piece of equipment.
type LubricationType struct {
	*SystemType
}

// Lubrication is {{block(Lubrication)}} represents the information for a system comprised
//         of all the parts involved in distribution and management of fluids used
//         to lubricate portions of the piece of equipment.
type Lubrication *LubricationType

// MaterialType is {{block(Material)}} provides information about materials or other items
//         consumed or used by the piece of equipment for production of parts,
//         materials, or other types of goods.
type MaterialType struct {
	*ResourceType
}

// Material is {{block(Material)}} provides information about materials or other items
//         consumed or used by the piece of equipment for production of parts,
//         materials, or other types of goods.
type Material *MaterialType

// PathType is {{block(Path)}} represents the information for an independent operation
//         or function within a {{block(Controller)}}.
type PathType struct {
	*CommonComponentType
}

// Path is {{block(Path)}} represents the information for an independent operation
//         or function within a {{block(Controller)}}.
type Path *PathType

// PersonnelType is {{block(Personnel)}} provides information about an individual or
//         individuals who either control, support, or otherwise interface with a
//         piece of equipment.
type PersonnelType struct {
	*ResourceType
}

// Personnel is {{block(Personnel)}} provides information about an individual or
//         individuals who either control, support, or otherwise interface with a
//         piece of equipment.
type Personnel *PersonnelType

// PneumaticType is {{block(Pneumatic)}} is a system that uses compressed gasses to actuate
//         components or do work within the piece of equipment. Note: Actuation is
//         usually performed using a cylinder.
type PneumaticType struct {
	*SystemType
}

// Pneumatic is {{block(Pneumatic)}} is a system that uses compressed gasses to actuate
//         components or do work within the piece of equipment. Note: Actuation is
//         usually performed using a cylinder.
type Pneumatic *PneumaticType

// PowerType is {{block(Power)}} was **DEPRECATED** in *MTConnect Version 1.1* and was
//         replaced by {{block(Availability)}}.
type PowerType struct {
	*CommonComponentType
}

// Power is {{block(Power)}} was **DEPRECATED** in *MTConnect Version 1.1* and was
//         replaced by {{block(Availability)}}.
type Power *PowerType

// ProcessPowerType is {{block(ProcessPower)}} represents the information for a power source
//         associated with a piece of equipment that supplies energy to the
//         manufacturing process separate from the {{block(Electric)}} system.
type ProcessPowerType struct {
	*SystemType
}

// ProcessPower is {{block(ProcessPower)}} represents the information for a power source
//         associated with a piece of equipment that supplies energy to the
//         manufacturing process separate from the {{block(Electric)}} system.
type ProcessPower *ProcessPowerType

// ProtectiveType is {{block(Protective)}} represents the information for those functions
//         that detect or prevent harm or damage to equipment or personnel.
type ProtectiveType struct {
	*SystemType
}

// Protective is {{block(Protective)}} represents the information for those functions
//         that detect or prevent harm or damage to equipment or personnel.
type Protective *ProtectiveType

// ResourceType is {{block(Resource)}} is an abstract {{block(Component)}} that represents
//         materials or personnel involved in a manufacturing process.
type ResourceType struct {
	*CommonComponentType
}

// Resource is {{block(Resource)}} is an abstract {{block(Component)}} that represents
//         materials or personnel involved in a manufacturing process.
type Resource *ResourceType

// RotaryType is A {{block(Rotary)}} axis represents any non-linear or rotary movement of
//         a physical piece of equipment or a portion of the equipment.
type RotaryType struct {
	*AxisType
}

// Rotary is A {{block(Rotary)}} axis represents any non-linear or rotary movement of
//         a physical piece of equipment or a portion of the equipment.
type Rotary *RotaryType

// SensorType is A {{term(sensing element)}} that responds to a physical stimulus and
//         transmits a resulting signal.
type SensorType struct {
	*AuxiliaryType
}

// Sensor is A {{term(sensing element)}} that responds to a physical stimulus and
//         transmits a resulting signal.
type Sensor *SensorType

// StockType is {{block(Stock)}} represents the information for the material that is
//         used in a manufacturing process and to which work is applied in a
//         machine or piece of equipment to produce parts.
type StockType struct {
	*MaterialType
}

// Stock is {{block(Stock)}} represents the information for the material that is
//         used in a manufacturing process and to which work is applied in a
//         machine or piece of equipment to produce parts.
type Stock *StockType

// SystemType is {{block(System)}} is an abstract {{block(Component)}} that represents
//         part(s) of a piece of equipment that is permanently integrated into the
//         piece of equipment.
type SystemType struct {
	*CommonComponentType
}

// System is {{block(System)}} is an abstract {{block(Component)}} that represents
//         part(s) of a piece of equipment that is permanently integrated into the
//         piece of equipment.
type System *SystemType

// ToolingDeliveryType is {{block(ToolingDelivery)}} represents the information for a unit
//         involved in managing, positioning, storing, and delivering tooling
//         within a piece of equipment.
type ToolingDeliveryType struct {
	*AuxiliaryType
}

// ToolingDelivery is {{block(ToolingDelivery)}} represents the information for a unit
//         involved in managing, positioning, storing, and delivering tooling
//         within a piece of equipment.
type ToolingDelivery *ToolingDeliveryType

// WasteDisposalType is {{block(WasteDisposal)}} represents the information for a unit comprised
//         of all the parts involved in removing manufacturing byproducts from a
//         piece of equipment.
type WasteDisposalType struct {
	*AuxiliaryType
}

// WasteDisposal is {{block(WasteDisposal)}} represents the information for a unit comprised
//         of all the parts involved in removing manufacturing byproducts from a
//         piece of equipment.
type WasteDisposal *WasteDisposalType

// StructureType is {{block(Structure)}} is a {{block(Component)}} that represents the
//         part(s) comprising the rigid bodies of the piece of equipment.
type StructureType struct {
	*CommonComponentType
}

// Structure is {{block(Structure)}} is a {{block(Component)}} that represents the
//         part(s) comprising the rigid bodies of the piece of equipment.
type Structure *StructureType

// LinkType is {{block(Link)}} is a structural {{block(Component)}} providing a
//         connection between {{block(Component)}}s.
type LinkType struct {
	*StructureType
}

// Link is {{block(Link)}} is a structural {{block(Component)}} providing a
//         connection between {{block(Component)}}s.
type Link *LinkType

// TableType is A surface for holding an object or material
type TableType struct {
	*StructureType
}

// Table is A surface for holding an object or material
type Table *TableType

// WorkEnvelopeType ...
type WorkEnvelopeType struct {
	*SystemType
}

// WorkEnvelope ...
type WorkEnvelope *WorkEnvelopeType

// GangToolBarType is A tool mounting mechanism that holds any number of tools. Tools are
//         located in {{block(Station)}}s. Tools are positioned for use in the
//         manufacturing process by linearly positioning the
//         {{block(GangToolBar)}}.
type GangToolBarType struct {
	*ToolingDeliveryType
}

// GangToolBar is A tool mounting mechanism that holds any number of tools. Tools are
//         located in {{block(Station)}}s. Tools are positioned for use in the
//         manufacturing process by linearly positioning the
//         {{block(GangToolBar)}}.
type GangToolBar *GangToolBarType

// HeatingType is {{block(Heating)}} is a system used to deliver controlled amounts of
//         heat to achieve a target temperature at a specified heating rate. Note:
//         As an example, Energy Delivery Method can be either through Electric
//         heaters or Gas burners.
type HeatingType struct {
	*EnvironmentalType
}

// Heating is {{block(Heating)}} is a system used to deliver controlled amounts of
//         heat to achieve a target temperature at a specified heating rate. Note:
//         As an example, Energy Delivery Method can be either through Electric
//         heaters or Gas burners.
type Heating *HeatingType

// AutomaticToolChangerType is A tool delivery mechanism that moves tools between a
//         {{block(ToolMagazine)}} and a {{term(Spindle)}} a {{block(Turret)}}. An
//         {{block(AutomaticToolChanger)}} may also transfer tools between a
//         location outside of a piece of equipment and a {{block(ToolMagazine)}}
//         or {{block(Turret)}}.
type AutomaticToolChangerType struct {
	*ToolingDeliveryType
}

// AutomaticToolChanger is A tool delivery mechanism that moves tools between a
//         {{block(ToolMagazine)}} and a {{term(Spindle)}} a {{block(Turret)}}. An
//         {{block(AutomaticToolChanger)}} may also transfer tools between a
//         location outside of a piece of equipment and a {{block(ToolMagazine)}}
//         or {{block(Turret)}}.
type AutomaticToolChanger *AutomaticToolChangerType

// ProcessType is {{block(Process)}} is an abstract {{block(Component)}} type that
//         represents the manufacturing process being executed on a piece of
//         equipment.
type ProcessType struct {
	*CommonComponentType
}

// Process is {{block(Process)}} is an abstract {{block(Component)}} type that
//         represents the manufacturing process being executed on a piece of
//         equipment.
type Process *ProcessType

// ToolMagazineType is A tool storage mechanism that holds any number of tools. Tools are
//         located in {{block(Pot)}}s. {{block(Pot)}}s are moved into position to
//         transfer tools into or out of the {{block(ToolMagazine)}} by an
//         {{block(AutomaticToolChanger)}}.
type ToolMagazineType struct {
	*ToolingDeliveryType
}

// ToolMagazine is A tool storage mechanism that holds any number of tools. Tools are
//         located in {{block(Pot)}}s. {{block(Pot)}}s are moved into position to
//         transfer tools into or out of the {{block(ToolMagazine)}} by an
//         {{block(AutomaticToolChanger)}}.
type ToolMagazine *ToolMagazineType

// PartOccurrenceType is {{block(PartOccurrence)}} {{term(organize)}} information about a
//         specific part as it exists at a specific place and time, such as a
//         specific instance of a bracket at a specific timestamp.
type PartOccurrenceType struct {
	*PartType
}

// PartOccurrence is {{block(PartOccurrence)}} {{term(organize)}} information about a
//         specific part as it exists at a specific place and time, such as a
//         specific instance of a bracket at a specific timestamp.
type PartOccurrence *PartOccurrenceType

// AdapterType is An optional piece of hardware or software that transforms information
//         provided by a piece of equipment into a form that can be received by an
//         {{term(Agent)}}.
type AdapterType struct {
	*CommonComponentType
}

// Adapter is An optional piece of hardware or software that transforms information
//         provided by a piece of equipment into a form that can be received by an
//         {{term(Agent)}}.
type Adapter *AdapterType

// ToolRackType is A linear or matrixed tool storage mechanism that holds any number of
//         tools. Tools are located in {{block(Station)}}s.
type ToolRackType struct {
	*ToolingDeliveryType
}

// ToolRack is A linear or matrixed tool storage mechanism that holds any number of
//         tools. Tools are located in {{block(Station)}}s.
type ToolRack *ToolRackType

// TurretType is A tool mounting mechanism that holds any number of tools. Tools are
//         located in {{block(Station)}}s . Tools are positioned for use in the
//         manufacturing process by rotating the {{block(Turret)}}.
type TurretType struct {
	*ToolingDeliveryType
}

// Turret is A tool mounting mechanism that holds any number of tools. Tools are
//         located in {{block(Station)}}s . Tools are positioned for use in the
//         manufacturing process by rotating the {{block(Turret)}}.
type Turret *TurretType

// VacuumType is {{block(Vacuum)}} is a system that evacuates gases and liquids from an
//         enclosed and sealed space to a controlled negative pressure or a
//         molecular density below the prevailing atmospheric level.
type VacuumType struct {
	*EnvironmentalType
}

// Vacuum is {{block(Vacuum)}} is a system that evacuates gases and liquids from an
//         enclosed and sealed space to a controlled negative pressure or a
//         molecular density below the prevailing atmospheric level.
type Vacuum *VacuumType

// CoolingType is {{block(Cooling)}} is a system used to to extract controlled amounts of
//         heat to achieve a target temperature at a specified cooling rate. Note:
//         As an example, Energy Extraction Method can be via cooling water pipes
//         running through the chamber.
type CoolingType struct {
	*EnvironmentalType
}

// Cooling is {{block(Cooling)}} is a system used to to extract controlled amounts of
//         heat to achieve a target temperature at a specified cooling rate. Note:
//         As an example, Energy Extraction Method can be via cooling water pipes
//         running through the chamber.
type Cooling *CoolingType

// OrganizerType is {{Organizer}} is an abstract {{block(Component)}} that
//         {{termplural(organize)}} similar {{block(Component)}} types together.
type OrganizerType struct {
	*CommonComponentType
}

// Organizer is {{Organizer}} is an abstract {{block(Component)}} that
//         {{termplural(organize)}} similar {{block(Component)}} types together.
type Organizer *OrganizerType

// ProcessOccurrenceType is {{block(ProcessOccurrence)}} {{termplural(organize)}} information about
//         the execution of a specific process that takes place at a specific place
//         and time, such as a specific instance of part-milling occurring at a
//         specific timestamp.
type ProcessOccurrenceType struct {
	*ProcessType
}

// ProcessOccurrence is {{block(ProcessOccurrence)}} {{termplural(organize)}} information about
//         the execution of a specific process that takes place at a specific place
//         and time, such as a specific instance of part-milling occurring at a
//         specific timestamp.
type ProcessOccurrence *ProcessOccurrenceType

// PressureType is {{block(Pressure)}} is a system that delivers compressed gas or fluid
//         and controls the pressure and rate of pressure change to a desired
//         target set-point. Note: For example, Delivery Method can be a Compressed
//         Air or N2 tank that is piped via an inlet valve to the chamber.
type PressureType struct {
	*EnvironmentalType
}

// Pressure is {{block(Pressure)}} is a system that delivers compressed gas or fluid
//         and controls the pressure and rate of pressure change to a desired
//         target set-point. Note: For example, Delivery Method can be a Compressed
//         Air or N2 tank that is piped via an inlet valve to the chamber.
type Pressure *PressureType

// PartType is {{term(Part)}} is a discrete item that has both defined and measurable
//         physical characteristics including mass, material, and features, and is
//         created by applying one or more manufacturing process steps to a
//         workpiece
type PartType struct {
	*CommonComponentType
}

// Part is {{term(Part)}} is a discrete item that has both defined and measurable
//         physical characteristics including mass, material, and features, and is
//         created by applying one or more manufacturing process steps to a
//         workpiece
type Part *PartType

// LockType is {{block(Lock)}} is a {{block(Component)}} that represents a mechanism
//         which physically prohibits a device or component from opening or
//         operating.
type LockType struct {
	*CommonComponentType
}

// Lock is {{block(Lock)}} is a {{block(Component)}} that represents a mechanism
//         which physically prohibits a device or component from opening or
//         operating.
type Lock *LockType

// StructuresType is {{block(Structures)}} {{termplural(organize)}} {{block(Structure)}}
//         component types.
type StructuresType struct {
	*CommonComponentType
}

// Structures is {{block(Structures)}} {{termplural(organize)}} {{block(Structure)}}
//         component types.
type Structures *StructuresType

// AxesType is {{block(Axes)}} {{termplural(organize)}} {{block(Axis)}} component
//         types.
type AxesType struct {
	*CommonComponentType
}

// Axes is {{block(Axes)}} {{termplural(organize)}} {{block(Axis)}} component
//         types.
type Axes *AxesType

// InterfacesType is {{block(Interfaces)}} {{termplural(organize)}} {{block(Interface)}}
//         component types.
type InterfacesType struct {
	*CommonComponentType
}

// Interfaces is {{block(Interfaces)}} {{termplural(organize)}} {{block(Interface)}}
//         component types.
type Interfaces *InterfacesType

// SystemsType is {{block(Systems)}} {{termplural(organize)}} {{block(System)}} component
//         types.
type SystemsType struct {
	*CommonComponentType
}

// Systems is {{block(Systems)}} {{termplural(organize)}} {{block(System)}} component
//         types.
type Systems *SystemsType

// ResourcesType is {{block(Resources)}} {{termplural(organize)}} {{block(Resource)}}
//         component types.
type ResourcesType struct {
	*CommonComponentType
}

// Resources is {{block(Resources)}} {{termplural(organize)}} {{block(Resource)}}
//         component types.
type Resources *ResourcesType

// AuxiliariesType is {{block(Auxiliaries)}} {{termplural(organize)}} {{block(Auxiliary)}}
//         component types.
type AuxiliariesType struct {
	*CommonComponentType
}

// Auxiliaries is {{block(Auxiliaries)}} {{termplural(organize)}} {{block(Auxiliary)}}
//         component types.
type Auxiliaries *AuxiliariesType

// ProcessesType is {{block(Processes)}} {{termplural(organize)}} {{block(Process)}}
//         component types.
type ProcessesType struct {
	*CommonComponentType
}

// Processes is {{block(Processes)}} {{termplural(organize)}} {{block(Process)}}
//         component types.
type Processes *ProcessesType

// AdaptersType is {{block(Adapters)}} {{termplural(organize)}} {{block(Adapter)}}
//         component types.
type AdaptersType struct {
	*CommonComponentType
}

// Adapters is {{block(Adapters)}} {{termplural(organize)}} {{block(Adapter)}}
//         component types.
type Adapters *AdaptersType

// PartsType is {{block(Parts)}} {{termplural(organize)}} information for
//         {{termplural(Part)}} being processed by a piece of equipment.
type PartsType struct {
	*CommonComponentType
}

// Parts is {{block(Parts)}} {{termplural(organize)}} information for
//         {{termplural(Part)}} being processed by a piece of equipment.
type Parts *PartsType

// MaterialsType is {{block(Materials)}} {{termplural(organize)}} {{block(Material)}}
//         component types.
type MaterialsType struct {
	*CommonComponentType
}

// Materials is {{block(Materials)}} {{termplural(organize)}} {{block(Material)}}
//         component types.
type Materials *MaterialsType

// CompositionsType is {{block(Composition)}} is a functional part of a piece of equipment
//             contained within a {{block(Component)}} that **MUST NOT** be further
//             decomposed into {{block(Component)}}s or {{block(Composition)}}s.
type CompositionsType struct {
	Composition []*CompositionType `xml:"Composition"`
}

// CompositionEnumTypeExtType is Extended tyoe for The vocab for the type of composition
type CompositionEnumTypeExtType string

// CompositionEnumTypeEnum is A {{block(Pot)}} for a tool that is no longer useable for removal
//             from a {{block(ToolMagazine)}} or {{block(Turret)}}.
type CompositionEnumTypeEnum string

// CompositionEnumTypeType is The vocab for the type of composition
type CompositionEnumTypeType struct {
	CompositionEnumTypeExtType string
	CompositionEnumTypeEnum    string
}

// CompositionType is {{block(Configuration)}} contains technical information about a
//             piece of equipment describing its physical layout, functional
//             characteristics, and relationships with other pieces of equipment.
//             See {{sect(Configuration)}} for details on {{block(Configuration)}}
//             model.
type CompositionType struct {
	IdAttr        string                      `xml:"id,attr"`
	UuidAttr      string                      `xml:"uuid,attr,omitempty"`
	NameAttr      string                      `xml:"name,attr,omitempty"`
	TypeAttr      *CompositionEnumTypeType    `xml:"type,attr"`
	Description   *ComponentDescriptionType   `xml:"Description"`
	Configuration *ComponentConfigurationType `xml:"Configuration"`
}

// IdRefType is A reference to an identifier
type IdRefType string

// ReferencesType is References Model
type ReferencesType struct {
	Reference []*ReferenceType `xml:"Reference"`
}

// ReferenceType is {{block(Reference)}} is a pointer to information that is associated with
//         another {{term(Structural Element)}}.
type ReferenceType struct {
	IdRefAttr string `xml:"idRef,attr"`
	NameAttr  string `xml:"name,attr,omitempty"`
}

// Reference is {{block(Reference)}} is a pointer to information that is associated with
//         another {{term(Structural Element)}}.
type Reference *ReferenceType

// DataItemRefType is {{block(DataItemRef)}} is a pointer to a {{term(Data Entity)}}
//         associated with another {{term(Structural Element)}} defined for a piece
//         of equipment. {{block(DataItemRef)}} allows the data associated with a
//         data item defined in another {{term(Structural Element)}} to be directly
//         associated with this element.
type DataItemRefType struct {
	*ReferenceType
}

// DataItemRef is {{block(DataItemRef)}} is a pointer to a {{term(Data Entity)}}
//         associated with another {{term(Structural Element)}} defined for a piece
//         of equipment. {{block(DataItemRef)}} allows the data associated with a
//         data item defined in another {{term(Structural Element)}} to be directly
//         associated with this element.
type DataItemRef *DataItemRefType

// ComponentRefType is {{block(ComponentRef)}} is a pointer to all of the information
//         associated with another {{term(Structural Element)}} defined for a piece
//         of equipment. {{block(ComponentRef)}} allows all of the information
//         ({{term(Lower Level)}} {{block(Components)}} and all {{termplural(Data
//         Entity)}}) that is associated with the other {{term(Structural
//         Element)}} to be directly associated with this element.
type ComponentRefType struct {
	*ReferenceType
}

// ComponentRef is {{block(ComponentRef)}} is a pointer to all of the information
//         associated with another {{term(Structural Element)}} defined for a piece
//         of equipment. {{block(ComponentRef)}} allows all of the information
//         ({{term(Lower Level)}} {{block(Components)}} and all {{termplural(Data
//         Entity)}}) that is associated with the other {{term(Structural
//         Element)}} to be directly associated with this element.
type ComponentRef *ComponentRefType

// AbstractConfigurationType is Abstract configuration
type AbstractConfigurationType struct {
}

// AbstractConfiguration is Abstract configuration
type AbstractConfiguration *AbstractConfigurationType

// ComponentConfigurationType is The configuration data associated with this component.
type ComponentConfigurationType struct {
	AbstractConfiguration []*AbstractConfigurationType `xml:"AbstractConfiguration"`
}

// CalibrationDateType is The time the calibration was preformed
type CalibrationDateType string

// NextCalibrationDateType is The time the next calibration should be preformed
type NextCalibrationDateType string

// CalibrationInitialsType is The initials of the person doing the calibration
type CalibrationInitialsType string

// FirmwareVersionType is The firmware version of this sensor
type FirmwareVersionType string

// ChannelNumberType is The channel number
type ChannelNumberType int

// SensorConfigurationType is {{block(Channels)}} {{termplural(organize)}} {{block(Channel)}}
//                 elements.
type SensorConfigurationType struct {
	FirmwareVersion     string        `xml:"FirmwareVersion"`
	CalibrationDate     string        `xml:"CalibrationDate"`
	NextCalibrationDate string        `xml:"NextCalibrationDate"`
	CalibrationInitials string        `xml:"CalibrationInitials"`
	Channels            *ChannelsType `xml:"Channels"`
	*AbstractConfigurationType
}

// SensorConfiguration is {{block(SensorConfiguration)}} contains configuration information about
//         a {{block(Sensor)}}.
type SensorConfiguration *SensorConfigurationType

// ChannelsType is When {{block(Sensor)}} represents multiple {{termplural(sensing
//             element)}}, each {{term(sensing element)}} is represented by a
//             {{block(Channel)}} for the {{block(Sensor)}}.
type ChannelsType struct {
	Channel []*ChannelType `xml:"Channel"`
}

// ChannelType is The initials of the person verifying the validity of the calibration
//             data.
type ChannelType struct {
	NumberAttr          int    `xml:"number,attr"`
	NameAttr            string `xml:"name,attr,omitempty"`
	Description         string `xml:"Description"`
	CalibrationDate     string `xml:"CalibrationDate"`
	NextCalibrationDate string `xml:"NextCalibrationDate"`
	CalibrationInitials string `xml:"CalibrationInitials"`
}

// LimitValueType is The limit of a value
type LimitValueType float32

// PeakType is The peak value
type PeakType float32

// SpecificationsType is {{block(Specifications)}} {{termplural(organize)}}
//         {{block(Specification)}} elements for a {{block(Component)}}.
type SpecificationsType struct {
	AbstractSpecification []*AbstractSpecificationType `xml:"AbstractSpecification"`
	*AbstractConfigurationType
}

// Specifications is {{block(Specifications)}} {{termplural(organize)}}
//         {{block(Specification)}} elements for a {{block(Component)}}.
type Specifications *SpecificationsType

// OriginatorEnumExtType is Extended tyoe for A reference to the creator of the Specification
type OriginatorEnumExtType string

// OriginatorEnumEnum is The owner or implementer of a piece of equipment or component.
type OriginatorEnumEnum string

// OriginatorEnumType is A reference to the creator of the Specification
type OriginatorEnumType struct {
	OriginatorEnumExtType string
	OriginatorEnumEnum    string
}

// AbstractSpecificationType is A specification
type AbstractSpecificationType struct {
	IdAttr                    string               `xml:"id,attr"`
	TypeAttr                  *DataItemEnumType    `xml:"type,attr"`
	OriginatorAttr            *OriginatorEnumType  `xml:"originator,attr,omitempty"`
	SubTypeAttr               *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	NameAttr                  string               `xml:"name,attr,omitempty"`
	DataItemIdRefAttr         string               `xml:"dataItemIdRef,attr,omitempty"`
	CompositionIdRefAttr      string               `xml:"compositionIdRef,attr,omitempty"`
	CoordinateSystemIdRefAttr string               `xml:"coordinateSystemIdRef,attr,omitempty"`
	UnitsAttr                 *UnitsType           `xml:"units,attr,omitempty"`
}

// AbstractSpecification is A specification
type AbstractSpecification *AbstractSpecificationType

// SpecificationType is The lower conformance boundary for a variable. Note to Entry:
//                 immediate concern or action may be required.
type SpecificationType struct {
	Maximum      *MaximumType      `xml:"Maximum"`
	Minimum      *MinimumType      `xml:"Minimum"`
	Nominal      *NominalType      `xml:"Nominal"`
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
	*AbstractSpecificationType
}

// Specification is {{block(Specification)}} elements define information describing the
//         design characteristics for a piece of equipment.
type Specification *SpecificationType

// ConstraintType is The limit of a constraint
type ConstraintType struct {
	Value float32 `xml:",chardata"`
}

// Constraint is The limit of a constraint
type Constraint *ConstraintType

// MaximumType is If the data reported for a data item is a range of numeric values, the
//         expected value reported **MAY** be described with an upper limit defined
//         by this constraint.
type MaximumType struct {
	*ConstraintType
}

// Maximum is If the data reported for a data item is a range of numeric values, the
//         expected value reported **MAY** be described with an upper limit defined
//         by this constraint.
type Maximum *MaximumType

// MinimumType is If the data reported for a data item is a range of numeric values, the
//         expected value reported **MAY** be described with a lower limit defined
//         by this constraint.
type MinimumType struct {
	*ConstraintType
}

// Minimum is If the data reported for a data item is a range of numeric values, the
//         expected value reported **MAY** be described with a lower limit defined
//         by this constraint.
type Minimum *MinimumType

// NominalType is The target or expected value for this data item.
type NominalType struct {
	*ConstraintType
}

// Nominal is The target or expected value for this data item.
type Nominal *NominalType

// UpperLimitType is The upper conformance boundary for a variable. Note to Entry: immediate
//         concern or action may be required.
type UpperLimitType struct {
	*ConstraintType
}

// UpperLimit is The upper conformance boundary for a variable. Note to Entry: immediate
//         concern or action may be required.
type UpperLimit *UpperLimitType

// UpperWarningType is The upper boundary indicating increased concern and supervision may be
//         required.
type UpperWarningType struct {
	*ConstraintType
}

// UpperWarning is The upper boundary indicating increased concern and supervision may be
//         required.
type UpperWarning *UpperWarningType

// LowerWarningType is The lower boundary indicating increased concern and supervision may be
//         required.
type LowerWarningType struct {
	*ConstraintType
}

// LowerWarning is The lower boundary indicating increased concern and supervision may be
//         required.
type LowerWarning *LowerWarningType

// LowerLimitType is The lower conformance boundary for a variable. Note to Entry: immediate
//         concern or action may be required.
type LowerLimitType struct {
	*ConstraintType
}

// LowerLimit is The lower conformance boundary for a variable. Note to Entry: immediate
//         concern or action may be required.
type LowerLimit *LowerLimitType

// ProcessSpecificationType is A set of limits defining a range of values designating
//                 acceptable performance for a variable.
type ProcessSpecificationType struct {
	ControlLimits       *ControlLimitsType       `xml:"ControlLimits"`
	AlarmLimits         *AlarmLimitsType         `xml:"AlarmLimits"`
	SpecificationLimits *SpecificationLimitsType `xml:"SpecificationLimits"`
	*AbstractSpecificationType
}

// ProcessSpecification is {{block(ProcessSpecification)}} provides information used to assess the
//         conformance of a variable to process requirements. See {{sect(Limits for
//         ProcessSpecification)}} for details on the
//         {{block(ProcessSpecification)}} model.
type ProcessSpecification *ProcessSpecificationType

// ControlLimitsType is The lower conformance boundary for a variable. Note to Entry:
//             immediate concern or action may be required.
type ControlLimitsType struct {
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	Nominal      *NominalType      `xml:"Nominal"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
}

// AlarmLimitsType is The lower conformance boundary for a variable. Note to Entry:
//             immediate concern or action may be required.
type AlarmLimitsType struct {
	UpperLimit   *UpperLimitType   `xml:"UpperLimit"`
	UpperWarning *UpperWarningType `xml:"UpperWarning"`
	LowerWarning *LowerWarningType `xml:"LowerWarning"`
	LowerLimit   *LowerLimitType   `xml:"LowerLimit"`
}

// SpecificationLimitsType is The lower conformance boundary for a variable. Note to Entry:
//             immediate concern or action may be required.
type SpecificationLimitsType struct {
	UpperLimit *UpperLimitType `xml:"UpperLimit"`
	Nominal    *NominalType    `xml:"Nominal"`
	LowerLimit *LowerLimitType `xml:"LowerLimit"`
}

// RelationshipsType is {{block(Relationships)}} {{termplural(organize)}} one or more
//         {{block(DataItemRelationship)}} and
//         {{block(SpecificationRelationship)}}.
type RelationshipsType struct {
	Relationship []*RelationshipType `xml:"Relationship"`
	*AbstractConfigurationType
}

// Relationships is {{block(Relationships)}} {{termplural(organize)}} one or more
//         {{block(DataItemRelationship)}} and
//         {{block(SpecificationRelationship)}}.
type Relationships *RelationshipsType

// RelationshipTypeEnumType is The related entity is a peer
type RelationshipTypeEnumType string

// DeviceRoleEnumType is an auxiliary
type DeviceRoleEnumType string

// CriticalityEnumType is Not critical
type CriticalityEnumType string

// RelationshipType is {{block(Relationship)}} describes the association between two pieces of
//         equipment that function independently but together perform a
//         manufacturing operation.
type RelationshipType struct {
	IdAttr          string `xml:"id,attr"`
	NameAttr        string `xml:"name,attr,omitempty"`
	TypeAttr        string `xml:"type,attr"`
	CriticalityAttr string `xml:"criticality,attr,omitempty"`
}

// Relationship is {{block(Relationship)}} describes the association between two pieces of
//         equipment that function independently but together perform a
//         manufacturing operation.
type Relationship *RelationshipType

// ComponentRelationshipType is {{block(ComponentRelationship)}} describes the association between two
//         components within a piece of equipment that function independently but
//         together perform a capability or service within a piece of equipment.
type ComponentRelationshipType struct {
	IdRefAttr string `xml:"idRef,attr"`
	*RelationshipType
}

// ComponentRelationship is {{block(ComponentRelationship)}} describes the association between two
//         components within a piece of equipment that function independently but
//         together perform a capability or service within a piece of equipment.
type ComponentRelationship *ComponentRelationshipType

// DeviceRelationshipType is {{block(DeviceRelationship)}} describes the association between two
//         pieces of equipment that function independently but together perform a
//         manufacturing operation.
type DeviceRelationshipType struct {
	DeviceUuidRefAttr string `xml:"deviceUuidRef,attr"`
	RoleAttr          string `xml:"role,attr,omitempty"`
	HrefAttr          string `xml:"href,attr,omitempty"`
	XlinkTypeAttr     string `xml:"xlink:type,attr,omitempty"`
	*RelationshipType
}

// DeviceRelationship is {{block(DeviceRelationship)}} describes the association between two
//         pieces of equipment that function independently but together perform a
//         manufacturing operation.
type DeviceRelationship *DeviceRelationshipType

// CoordinateSystemTypeEnumType is For machine tools, the coordinate system in the work area
type CoordinateSystemTypeEnumType string

// CoordinateSystemsType is A {{block(CoordinateSystem)}} is a reference system that
//                 associates a unique set of n parameters with each point in an
//                 n-dimensional space. {{cite(Ref: ISO 10303-218:2004)}}
type CoordinateSystemsType struct {
	CoordinateSystem []*CoordinateSystemType `xml:"CoordinateSystem"`
	*AbstractConfigurationType
}

// CoordinateSystems is {{block(CoordinateSystems)}} {{termplural(organize)}}
//         {{block(CoordinateSystem)}} elements for a {{block(Component)}} and its
//         children.
type CoordinateSystems *CoordinateSystemsType

// CoordinateSystemType is The translation of the origin to the position and orientation. At a
//             minimum, a {{block(Translation)}} or {{block(Rotation)}} **MUST** be
//             given.
type CoordinateSystemType struct {
	IdAttr          string              `xml:"id,attr"`
	NameAttr        string              `xml:"name,attr,omitempty"`
	NativeNameAttr  string              `xml:"nativeName,attr,omitempty"`
	ParentIdRefAttr string              `xml:"parentIdRef,attr,omitempty"`
	TypeAttr        string              `xml:"type,attr"`
	Origin          *OriginType         `xml:"Origin"`
	Transformation  *TransformationType `xml:"Transformation"`
}

// OriginType is A fixed point from which measurement or motion commences.
type OriginType struct {
	*FloatListValueType
}

// TransformationType is A three space angular rotation relative to a coordinate system.
type TransformationType struct {
	Translation *FloatListValueType `xml:"Translation"`
	Rotation    *FloatListValueType `xml:"Rotation"`
}

// MotionTypeEnumType is The axis does not move.
type MotionTypeEnumType string

// ActuationTypeEnumType is There is no actuation of this Axis.
type ActuationTypeEnumType string

// MotionAxisType is The unit vector along which the motion occurs
type MotionAxisType struct {
	*FloatListValueType
}

// MotionDescriptionType is Any elements
type MotionDescriptionType struct {
}

// MotionType is Description
type MotionType struct {
	IdAttr                    string                 `xml:"id,attr"`
	ParentIdRefAttr           string                 `xml:"parentIdRef,attr,omitempty"`
	CoordinateSystemIdRefAttr string                 `xml:"coordinateSystemIdRef,attr"`
	TypeAttr                  string                 `xml:"type,attr"`
	ActuationAttr             string                 `xml:"actuation,attr"`
	Description               *MotionDescriptionType `xml:"Description"`
	Origin                    *OriginType            `xml:"Origin"`
	Transformation            *TransformationType    `xml:"Transformation"`
	Axis                      *MotionAxisType        `xml:"Axis"`
	*AbstractConfigurationType
}

// Motion is {{block(Motion)}} defines the movement of the component relative to a
//         coordinate system. {{block(Motion)}} specifies the kinematic chain of
//         the components.
type Motion *MotionType

// SolidModelIdRefType is A reference to another model
type SolidModelIdRefType string

// ItemRefType is A reference to an item in a model
type ItemRefType string

// SolidModelType is The {{block(SolidModel)}} {{block(Scale)}} is either a single
//                 multiplier applied to all three dimensions or a three space
//                 multiplier given in the X, Y, and Z dimensions in the coordinate
//                 system used for the {{block(SolidModel)}}.
type SolidModelType struct {
	IdAttr                    string                   `xml:"id,attr"`
	SolidModelIdRefAttr       string                   `xml:"solidModelIdRef,attr,omitempty"`
	HrefAttr                  string                   `xml:"href,attr,omitempty"`
	XlinkTypeAttr             string                   `xml:"xlink:type,attr,omitempty"`
	ItemRefAttr               string                   `xml:"itemRef,attr,omitempty"`
	MediaTypeAttr             *SolidModelMediaTypeType `xml:"mediaType,attr"`
	CoordinateSystemIdRefAttr string                   `xml:"coordinateSystemIdRef,attr,omitempty"`
	Transformation            *TransformationType      `xml:"Transformation"`
	Scale                     *SolidModelScaleType     `xml:"Scale"`
	*AbstractConfigurationType
}

// SolidModel is {{block(SolidModel)}} is a {{block(Configuration)}} that references a
//         file with the three-dimensional geometry of the {{block(Component)}} or
//         {{block(Composition)}}.
type SolidModel *SolidModelType

// ScaleValueType is A three dimensional value 'X Y Z' or 'A B C'
type ScaleValueType *FloatListValueType

// SolidModelScaleType is The unit vector to scale the model
type SolidModelScaleType struct {
	*FloatListValueType
}

// SolidModelMediaTypeExtType is Extended tyoe for Solid model media types
type SolidModelMediaTypeExtType string

// SolidModelMediaTypeEnum is Parasolid XT Siemens data interchange format
type SolidModelMediaTypeEnum string

// SolidModelMediaTypeType is Solid model media types
type SolidModelMediaTypeType struct {
	SolidModelMediaTypeExtType string
	SolidModelMediaTypeEnum    string
}

// SampleIntervalType is The interval between adjacent sampleing of data
type SampleIntervalType float32

// DataItemSampleRateType is The frequency a measurement is sampled
type DataItemSampleRateType float32

// DataItemOptionType is The constrained value for this data item
type DataItemOptionType string

// DataItemValueType is The constrained value for this data item
type DataItemValueType string

// DataItemNumericValueType is The constrained value for this data item
type DataItemNumericValueType float32

// SourceComponentIdType is An idref to the component id
type SourceComponentIdType string

// SourceDataItemIdType is An idref to the data item id
type SourceDataItemIdType string

// ReferenceIdType is The item's reference to the data item or specificatiton
type ReferenceIdType string

// ComponentNameType is The name of a related component
type ComponentNameType string

// CoordinateSystemIdRefType is The id reference for the coordinate system associated with this data
//         item
type CoordinateSystemIdRefType string

// DiscreteType is An discrete event
type DiscreteType bool

// DataItemDescriptionType is Any elements
type DataItemDescriptionType struct {
}

// FilterValueType is The minimum limit on the change in a value
type FilterValueType float32

// CategoryType is The condition of the device
type CategoryType string

// NativeScaleType is The multiplier for the native value. Conversion divides by this value
type NativeScaleType float32

// RepresentationType is A {{term(Table)}} is a two dimensional set of {{termplural(key-value
//             pair)}} where the {{block(Entry)}} represents a row, and the value
//             is a set of {{term(key-value pair)}} {{block(Cell)}} elements. The
//             {{term(Table)}} follows the same behavior as the {{term(Data Set)}}
//             for change tracking, clearing, and history. When an {{block(Entry)}}
//             changes, all {{block(Cell)}} elements update as a single unit
//             following the behavior of a {{term(Data Set)}}. Note 1 to Entry: It
//             is best to use the {{block(Variable)}} {{block(DataItem)}}
//             {{property(type)}} if the {{block(Cell)}} elements represent
//             multiple semantic types. Each {{block(Entry)}} in the
//             {{term(Table)}} **MUST** have a unique key. Each {{block(Cell)}} of
//             each {{block(Entry)}} in the {{term(Table)}} **MUST** have a unique
//             key. See {{cite(Section 5.6.5)}} of {{citetitle(MTCPart3)}}, for a
//             description of {{block(Entry)}} and {{block(Cell)}} elements.
type RepresentationType string

// DataItemFilterEnumType is For a `PERIOD` type {{block(Filter)}}, the data reported for a data
//             item is provided on a periodic basis. The `PERIOD` for reporting
//             data is defined in the value of the {{block(Filter)}}. The value of
//             {{block(Filter)}} **MUST** be an absolute value reported in seconds
//             representing the time between reported samples of the value of the
//             data item.
type DataItemFilterEnumType string

// DataItemsType is {{block(DataItem)}} describes a piece of information reported about
//             a piece of equipment.
type DataItemsType struct {
	DataItem []*DataItemType `xml:"DataItem"`
}

// DataItemType is {{block(Relationships)}} {{termplural(organize)}} one or more
//             {{block(DataItemRelationship)}} and
//             {{block(SpecificationRelationship)}}.
type DataItemType struct {
	NameAttr                  string                     `xml:"name,attr,omitempty"`
	IdAttr                    string                     `xml:"id,attr"`
	TypeAttr                  *DataItemEnumType          `xml:"type,attr"`
	SubTypeAttr               *DataItemSubEnumType       `xml:"subType,attr,omitempty"`
	StatisticAttr             *DataItemStatisticsType    `xml:"statistic,attr,omitempty"`
	UnitsAttr                 *UnitsType                 `xml:"units,attr,omitempty"`
	NativeUnitsAttr           *NativeUnitsType           `xml:"nativeUnits,attr,omitempty"`
	NativeScaleAttr           float32                    `xml:"nativeScale,attr,omitempty"`
	CategoryAttr              string                     `xml:"category,attr"`
	CoordinateSystemAttr      string                     `xml:"coordinateSystem,attr,omitempty"`
	CoordinateSystemIdRefAttr string                     `xml:"coordinateSystemIdRef,attr,omitempty"`
	CompositionIdAttr         string                     `xml:"compositionId,attr,omitempty"`
	SampleRateAttr            float32                    `xml:"sampleRate,attr,omitempty"`
	RepresentationAttr        string                     `xml:"representation,attr,omitempty"`
	SignificantDigitsAttr     int                        `xml:"significantDigits,attr,omitempty"`
	DiscreteAttr              bool                       `xml:"discrete,attr,omitempty"`
	Source                    *DataItemSourceType        `xml:"Source"`
	Constraints               *DataItemConstraintsType   `xml:"Constraints"`
	Filters                   *FiltersType               `xml:"Filters"`
	InitialValue              float32                    `xml:"InitialValue"`
	ResetTrigger              *DataItemResetValueType    `xml:"ResetTrigger"`
	Definition                *DataItemDefinitionType    `xml:"Definition"`
	Relationships             *DataItemRelationshipsType `xml:"Relationships"`
}

// DataItemConstraintsType is Any substance or structure through which liquids or gases are passed
//             to remove suspended impurities or to recover solids.
type DataItemConstraintsType struct {
	Value   []*DataItemValueElementType `xml:"Value"`
	Minimum float32                     `xml:"Minimum"`
	Maximum float32                     `xml:"Maximum"`
	Nominal float32                     `xml:"Nominal"`
	Filter  *DataItemFilterType         `xml:"Filter"`
}

// FiltersType is Any substance or structure through which liquids or gases are passed
//             to remove suspended impurities or to recover solids.
type FiltersType struct {
	Filter []*DataItemFilterType `xml:"Filter"`
}

// DataItemBaseType is A starting point for a data item
type DataItemBaseType struct {
	Value string `xml:",chardata"`
}

// DataItemValueElementType is The value element
type DataItemValueElementType struct {
	Value string `xml:",chardata"`
}

// DataItemFilterType is The filter for the data item
type DataItemFilterType struct {
	TypeAttr string  `xml:"type,attr"`
	Value    float32 `xml:",chardata"`
}

// DataItemSourceType is A native data source
type DataItemSourceType struct {
	DataItemIdAttr    string `xml:"dataItemId,attr,omitempty"`
	ComponentIdAttr   string `xml:"componentId,attr,omitempty"`
	CompositionIdAttr string `xml:"compositionId,attr,omitempty"`
	Value             string `xml:",chardata"`
}

// DataItemDefinitionType is {{block(CellDefinitions)}} {{termplural(organize)}}
//             {{block(CellDefinition)}} elements.
type DataItemDefinitionType struct {
	Description      *DataItemDescriptionType `xml:"Description"`
	EntryDefinitions *EntryDefinitionsType    `xml:"EntryDefinitions"`
	CellDefinitions  *CellDefinitionsType     `xml:"CellDefinitions"`
}

// EntryDefinitionsType is The semantic definition of an {{block(Entry)}}.
type EntryDefinitionsType struct {
	EntryDefinition []*EntryDefinitionType `xml:"EntryDefinition"`
}

// DefinitionAttrsType is The units of the measurement
type DefinitionAttrsType struct {
	KeyAttr     string               `xml:"key,attr,omitempty"`
	TypeAttr    *DataItemEnumType    `xml:"type,attr,omitempty"`
	KeyTypeAttr *DataItemEnumType    `xml:"keyType,attr,omitempty"`
	SubTypeAttr *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	UnitsAttr   *UnitsType           `xml:"units,attr,omitempty"`
}

// EntryDefinitionType is {{block(CellDefinitions)}} {{termplural(organize)}}
//             {{block(CellDefinition)}} elements.
type EntryDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
	CellDefinitions     *CellDefinitionsType     `xml:"CellDefinitions"`
}

// CellDefinitionsType is The semantic definition of a {{block(Cell)}}.
type CellDefinitionsType struct {
	CellDefinition []*CellDefinitionType `xml:"CellDefinition"`
}

// CellDefinitionType is The {{block(Description)}} of the {{block(Definition)}}. See
//             {{block(Component)}} {{block(Description)}}.
type CellDefinitionType struct {
	DefinitionAttrsType *DefinitionAttrsType
	Description         *DataItemDescriptionType `xml:"Description"`
}

// DataItemRelationshipsType is Organizes DataItemRelationship and SpecificationRelationship
type DataItemRelationshipsType struct {
	AbstractDataItemRelationship []*AbstractDataItemRelationshipType `xml:"AbstractDataItemRelationship"`
}

// AbstractDataItemRelationshipType is Common base for data item relationship
type AbstractDataItemRelationshipType struct {
	NameAttr  string `xml:"name,attr"`
	IdRefAttr string `xml:"idRef,attr"`
}

// AbstractDataItemRelationship is Common base for data item relationship
type AbstractDataItemRelationship *AbstractDataItemRelationshipType

// DataItemRelationshipTypeEnumType is The referenced DataItem provides the observed values.
type DataItemRelationshipTypeEnumType string

// DataItemRelationshipType is A {{block(Relationship)}} providing a semantic reference to another
//         {{block(DataItem)}} described by the {{property(type)}} property.
type DataItemRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// DataItemRelationship is A {{block(Relationship)}} providing a semantic reference to another
//         {{block(DataItem)}} described by the {{property(type)}} property.
type DataItemRelationship *DataItemRelationshipType

// SpecificationRelationshipTypeEnumType is The referenced DataItem provides process limits.
type SpecificationRelationshipTypeEnumType string

// SpecificationRelationshipType is A {{block(Relationship)}} providing a semantic reference to another
//         {{block(Specification)}} described by the {{property(type)}} and
//         {{property(idRef)}} property.
type SpecificationRelationshipType struct {
	TypeAttr string `xml:"type,attr"`
	*AbstractDataItemRelationshipType
}

// SpecificationRelationship is A {{block(Relationship)}} providing a semantic reference to another
//         {{block(Specification)}} described by the {{property(type)}} and
//         {{property(idRef)}} property.
type SpecificationRelationship *SpecificationRelationshipType
