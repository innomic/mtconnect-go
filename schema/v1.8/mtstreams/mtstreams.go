// Code generated by xgen. DO NOT EDIT.

package mtstreams

// MTConnectStreams is The root node for MTConnect
type MTConnectStreams *MTConnectStreamsType

// SenderType is The sender of the message
type SenderType string

// CreationTimeType is The date and time the document was created
type CreationTimeType string

// SequenceType is A sequence number
type SequenceType int

// TestIndicatorType is A debugging flag for testing.
type TestIndicatorType bool

// InstanceIdType is The instance number of the agent, used for fault tolerance
type InstanceIdType int

// BufferSizeType is The size of the agents buffer
type BufferSizeType int

// TimestampType is The time the sample was reported
type TimestampType string

// OccurrenceTimeType is The time a sample occurred
type OccurrenceTimeType string

// VersionType is A version number
type VersionType string

// NameType is A short name for any element
type NameType string

// UuidType is A universally unique id that uniquely identifies the element for
//         it's entire life
type UuidType string

// SerialNumberAttrType is A serial number for a piece of equipment
type SerialNumberAttrType string

// ItemSourceType is The measurement source
type ItemSourceType string

// RateType is A sample rate in milliseconds per sample
type RateType float32

// ComponentIdType is The id of the component (maps to the id from probe)
type ComponentIdType string

// IDType is An identifier
type IDType string

// SignificantDigitsValueType is The number significant digits
type SignificantDigitsValueType int

// CompositionIdType is The item's reference to the Device model composition
type CompositionIdType string

// DurationTimeType is A length of time in seconds
type DurationTimeType float32

// RemovedType is A flag indicating the item has been removed
type RemovedType bool

// KeyType is The key for adata set
type KeyType string

// DeviceModelChangeTimeType is A timestamp in 8601 format of the last update of the Device information
//         for any device
type DeviceModelChangeTimeType string

// AssetIdType is The unique id of the asset
type AssetIdType string

// AssetAttrTypeType is An asset type
type AssetAttrTypeType string

// AssetBufferSizeType is The maximum number of assets
type AssetBufferSizeType int

// AssetCountAttrType is The number of assets
type AssetCountAttrType int

// FloatListValueType is Common floating point sample value
type FloatListValueType []float32

// ThreeSpaceValueType is A three dimensional value 'X Y Z' or 'A B C'
type ThreeSpaceValueType *FloatListValueType

// DescriptionTextType is A description
type DescriptionTextType string

// DataItemEnumExtType is Extended tyoe for The types of measurements available
type DataItemEnumExtType string

// DataItemEnumEnum is A user variable
type DataItemEnumEnum string

// DataItemEnumType is The types of measurements available
type DataItemEnumType struct {
	DataItemEnumExtType string
	DataItemEnumEnum    string
}

// DataItemSubEnumExtType is Extended tyoe for The sub-types for a measurement
type DataItemSubEnumExtType string

// DataItemSubEnumEnum is Reported or measured value of amount included in the {{term(part)}}.
type DataItemSubEnumEnum string

// DataItemSubEnumType is The sub-types for a measurement
type DataItemSubEnumType struct {
	DataItemSubEnumExtType string
	DataItemSubEnumEnum    string
}

// DataItemStatisticsExtType is Extended tyoe for Statistical operations on data
type DataItemStatisticsExtType string

// DataItemStatisticsEnum is Statistical Standard Deviation value calculated for the data item
//             during the calculation period.
type DataItemStatisticsEnum string

// DataItemStatisticsType is Statistical operations on data
type DataItemStatisticsType struct {
	DataItemStatisticsExtType string
	DataItemStatisticsEnum    string
}

// UnitsExtType is Extended tyoe for The units supported
type UnitsExtType string

// UnitsEnum is A 3D Unit Vector. Space delimited list of three floating point
//             numbers.
type UnitsEnum string

// UnitsType is The units supported
type UnitsType struct {
	UnitsExtType string
	UnitsEnum    string
}

// NativeUnitsExtType is Extended tyoe for The units supported for the source equipment that can
//         be converted into MTC Units.
type NativeUnitsExtType string

// NativeUnitsEnum is Pascal per minute.
type NativeUnitsEnum string

// NativeUnitsType is The units supported for the source equipment that can be converted into
//         MTC Units.
type NativeUnitsType struct {
	NativeUnitsExtType string
	NativeUnitsEnum    string
}

// CoordinateSystemEnumType is The coordinate system that represents the working area for a
//             particular workpiece whose origin is shifted within the `MACHINE`
//             coordinate system. If the `WORK` coordinates are not currently
//             defined in the piece of equipment, the `MACHINE` coordinates will be
//             used.
type CoordinateSystemEnumType string

// DataItemResetValueExtType is Extended tyoe for The reset intervals
type DataItemResetValueExtType string

// DataItemResetValueEnum is The value of the {{term(Data Item)}} is to be reset at the end of a
//             7-day period.
type DataItemResetValueEnum string

// DataItemResetValueType is The reset intervals
type DataItemResetValueType struct {
	DataItemResetValueExtType string
	DataItemResetValueEnum    string
}

// HeaderAttributesType is A timestamp in 8601 format of the last update of the Device
//           information for any device
type HeaderAttributesType struct {
	VersionAttr               string `xml:"version,attr"`
	CreationTimeAttr          string `xml:"creationTime,attr"`
	TestIndicatorAttr         bool   `xml:"testIndicator,attr,omitempty"`
	InstanceIdAttr            int    `xml:"instanceId,attr"`
	SenderAttr                string `xml:"sender,attr"`
	DeviceModelChangeTimeAttr string `xml:"deviceModelChangeTime,attr"`
}

// StationType is The station id for this device
type StationType string

// HeaderType is Supplemental data usually placed at the beginning of a
//         {{term(Document)}}.
type HeaderType struct {
	HeaderAttributesType *HeaderAttributesType
	BufferSizeAttr       int    `xml:"bufferSize,attr"`
	NextSequenceAttr     int    `xml:"nextSequence,attr"`
	LastSequenceAttr     int    `xml:"lastSequence,attr"`
	FirstSequenceAttr    int    `xml:"firstSequence,attr"`
	Value                string `xml:",chardata"`
}

// MTConnectStreamsType is Structural Elements for MTConnectStreams
type MTConnectStreamsType struct {
	Header  *HeaderType  `xml:"Header"`
	Streams *StreamsType `xml:"Streams"`
}

// ResultValueType is An events data
type ResultValueType string

// DataItemIdType is The item's unique ID that references the data item id from probe
type DataItemIdType string

// NativeCodeType is An Condition code as defined by the component
type NativeCodeType string

// StreamsType is {{block(DeviceStream)}} {{termplural(organize)}} data reported from
//             a single piece of equipment. A {{block(DeviceStream)}} element
//             **MUST** be provided for each piece of equipment reporting data in
//             an {{block(MTConnectStreams)}} {{term(Response Document)}}.
type StreamsType struct {
	DeviceStream []*DeviceStreamType `xml:"DeviceStream"`
}

// DeviceStreamType is See the following {{sect(ComponentStream)}} for details.
type DeviceStreamType struct {
	NameAttr        string                 `xml:"name,attr"`
	UuidAttr        string                 `xml:"uuid,attr"`
	ComponentStream []*ComponentStreamType `xml:"ComponentStream"`
}

// ComponentStreamType is An indicator of the ability of a piece of equipment or
//             {{term(Component)}} to function to specification.
type ComponentStreamType struct {
	ComponentIdAttr string             `xml:"componentId,attr"`
	NameAttr        string             `xml:"name,attr,omitempty"`
	NativeNameAttr  string             `xml:"nativeName,attr,omitempty"`
	ComponentAttr   string             `xml:"component,attr"`
	UuidAttr        string             `xml:"uuid,attr,omitempty"`
	Samples         *SamplesType       `xml:"Samples"`
	Events          *EventsType        `xml:"Events"`
	Condition       *ConditionListType `xml:"Condition"`
}

// SamplesType is {{block(Samples)}} {{termplural(organize)}} the {{block(Sample)}}
//         elements. See {{sect(Sample)}} for details on the {{block(Sample)}}
//         model.
type SamplesType struct {
	Sample []*SampleType `xml:"Sample"`
}

// EventsType is {{block(Events)}} {{termplural(organize)}} the {{block(Event)}}
//         elements. See {{sect(Event)}} for details on the {{block(Event)}} model.
type EventsType struct {
	Event []*EventType `xml:"Event"`
}

// ConditionListType is A collection of conditions
type ConditionListType struct {
	Condition []*ConditionType `xml:"Condition"`
}

// UnavailableValueType is Data is unavailable
type UnavailableValueType string

// ObservationType is The identifier of the sub-element this result is in reference to
type ObservationType struct {
	SequenceAttr      int                  `xml:"sequence,attr"`
	SubTypeAttr       *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	TimestampAttr     string               `xml:"timestamp,attr"`
	NameAttr          string               `xml:"name,attr,omitempty"`
	DataItemIdAttr    string               `xml:"dataItemId,attr"`
	CompositionIdAttr string               `xml:"compositionId,attr,omitempty"`
}

// SampleRateType is The target rate a value can be sampled
type SampleRateType float32

// CountValueType is The number of items in the list
type CountValueType int

// FloatSampleValueType is Common floating point sample value
type FloatSampleValueType struct {
	Float                float32
	UnavailableValueType string
}

// ThreeSpaceSampleValueType is Common floating point sample value
type ThreeSpaceSampleValueType struct {
	ThreeSpaceValueType  *FloatListValueType
	UnavailableValueType string
}

// SampleType is The collection of one or more pieces of information.
type SampleType struct {
	ObservationType    *ObservationType
	SampleRateAttr     float32                 `xml:"sampleRate,attr,omitempty"`
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	DurationAttr       float32                 `xml:"duration,attr,omitempty"`
}

// Sample is The collection of one or more pieces of information.
type Sample *SampleType

// CommonSampleType is A sample with a single floating point value
type CommonSampleType struct {
}

// CommonSample is A sample with a single floating point value
type CommonSample *CommonSampleType

// ThreeSpaceSampleType is A sample with a three tuple floating point value
type ThreeSpaceSampleType struct {
}

// ThreeSpaceSample is A sample with a three tuple floating point value
type ThreeSpaceSample *ThreeSpaceSampleType

// AbsTimeSeriesType is The abstract waveform
type AbsTimeSeriesType struct {
	SampleCountAttr int `xml:"sampleCount,attr"`
	*SampleType
}

// AbsTimeSeries is The abstract waveform
type AbsTimeSeries *AbsTimeSeriesType

// TimeSeriesType is A {{block(DataItem)}} with `TIME_SERIES` {{property(representation)}}
//         **MUST** have a {{property(category)}} of `SAMPLE`. A *Time Series*
//         {{term(observation)}} **MUST** have a {{property(sampleCount)}}
//         attribute. *Time Series* {{term(observation)}} **MUST** report multiple
//         values at fixed intervals in a single {{term(observation)}}. At minimum,
//         one of DataItem or {{term(observation)}} **MUST** specify the
//         {{property(sampleRate)}} in Hertz (values/second); fractional rates are
//         permitted. When the {{term(observation)}} and the {{block(DataItem)}}
//         specify the {{property(sampleRate)}}, the {{term(observation)}}
//         {{property(sampleRate)}} supersedes the {{block(DataItem)}}. The
//         {{term(observation)}} **MUST** set the {{property(timestamp)}} to the
//         time the last value was observed. The {{property(duration)}} **MAY**
//         indicate the time interval from the first to the last value in the
//         series. {{sect(Attributes of TimeSeries)}} defines additional attributes
//         provided for a {{block(DataItem)}} of `category` `SAMPLE` with a
//         {{property(representation)}} attribute of `TIME_SERIES`.
type TimeSeriesType struct {
}

// TimeSeries is A {{block(DataItem)}} with `TIME_SERIES` {{property(representation)}}
//         **MUST** have a {{property(category)}} of `SAMPLE`. A *Time Series*
//         {{term(observation)}} **MUST** have a {{property(sampleCount)}}
//         attribute. *Time Series* {{term(observation)}} **MUST** report multiple
//         values at fixed intervals in a single {{term(observation)}}. At minimum,
//         one of DataItem or {{term(observation)}} **MUST** specify the
//         {{property(sampleRate)}} in Hertz (values/second); fractional rates are
//         permitted. When the {{term(observation)}} and the {{block(DataItem)}}
//         specify the {{property(sampleRate)}}, the {{term(observation)}}
//         {{property(sampleRate)}} supersedes the {{block(DataItem)}}. The
//         {{term(observation)}} **MUST** set the {{property(timestamp)}} to the
//         time the last value was observed. The {{property(duration)}} **MAY**
//         indicate the time interval from the first to the last value in the
//         series. {{sect(Attributes of TimeSeries)}} defines additional attributes
//         provided for a {{block(DataItem)}} of `category` `SAMPLE` with a
//         {{property(representation)}} attribute of `TIME_SERIES`.
type TimeSeries *TimeSeriesType

// AccelerationType is Positive rate of change of velocity.
type AccelerationType struct {
	*CommonSampleType
}

// Acceleration is Positive rate of change of velocity.
type Acceleration *AccelerationType

// AccelerationTimeSeriesType is Time series of Positive rate of change of velocity.
type AccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AccelerationTimeSeries is Time series of Positive rate of change of velocity.
type AccelerationTimeSeries *AccelerationTimeSeriesType

// AccumulatedTimeType is The measurement of accumulated time for an activity or event.
type AccumulatedTimeType struct {
	*CommonSampleType
}

// AccumulatedTime is The measurement of accumulated time for an activity or event.
type AccumulatedTime *AccumulatedTimeType

// AccumulatedTimeTimeSeriesType is Time series of The measurement of accumulated time for an activity or
//         event.
type AccumulatedTimeTimeSeriesType struct {
	*TimeSeriesType
}

// AccumulatedTimeTimeSeries is Time series of The measurement of accumulated time for an activity or
//         event.
type AccumulatedTimeTimeSeries *AccumulatedTimeTimeSeriesType

// AmperageType is **DEPRECATED** in *Version 1.6*. Replaced by {{block(AmperageAC)}} and
//         {{block(AmperageDC)}}. The measurement of electrical current.
type AmperageType struct {
	*CommonSampleType
}

// Amperage is **DEPRECATED** in *Version 1.6*. Replaced by {{block(AmperageAC)}} and
//         {{block(AmperageDC)}}. The measurement of electrical current.
type Amperage *AmperageType

// AmperageTimeSeriesType is Time series of **DEPRECATED** in *Version 1.6*. Replaced by
//         {{block(AmperageAC)}} and {{block(AmperageDC)}}. The measurement of
//         electrical current.
type AmperageTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageTimeSeries is Time series of **DEPRECATED** in *Version 1.6*. Replaced by
//         {{block(AmperageAC)}} and {{block(AmperageDC)}}. The measurement of
//         electrical current.
type AmperageTimeSeries *AmperageTimeSeriesType

// AngleType is The measurement of angular position.
type AngleType struct {
	*CommonSampleType
}

// Angle is The measurement of angular position.
type Angle *AngleType

// AngleTimeSeriesType is Time series of The measurement of angular position.
type AngleTimeSeriesType struct {
	*TimeSeriesType
}

// AngleTimeSeries is Time series of The measurement of angular position.
type AngleTimeSeries *AngleTimeSeriesType

// AngularAccelerationType is Positive rate of change of angular velocity.
type AngularAccelerationType struct {
	*CommonSampleType
}

// AngularAcceleration is Positive rate of change of angular velocity.
type AngularAcceleration *AngularAccelerationType

// AngularAccelerationTimeSeriesType is Time series of Positive rate of change of angular velocity.
type AngularAccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularAccelerationTimeSeries is Time series of Positive rate of change of angular velocity.
type AngularAccelerationTimeSeries *AngularAccelerationTimeSeriesType

// AngularVelocityType is The measurement of the rate of change of angular position.
type AngularVelocityType struct {
	*CommonSampleType
}

// AngularVelocity is The measurement of the rate of change of angular position.
type AngularVelocity *AngularVelocityType

// AngularVelocityTimeSeriesType is Time series of The measurement of the rate of change of angular
//         position.
type AngularVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// AngularVelocityTimeSeries is Time series of The measurement of the rate of change of angular
//         position.
type AngularVelocityTimeSeries *AngularVelocityTimeSeriesType

// AxisFeedrateType is The measurement of the feedrate of a linear axis.
type AxisFeedrateType struct {
	*CommonSampleType
}

// AxisFeedrate is The measurement of the feedrate of a linear axis.
type AxisFeedrate *AxisFeedrateType

// AxisFeedrateTimeSeriesType is Time series of The measurement of the feedrate of a linear axis.
type AxisFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// AxisFeedrateTimeSeries is Time series of The measurement of the feedrate of a linear axis.
type AxisFeedrateTimeSeries *AxisFeedrateTimeSeriesType

// CapacityFluidType is The fluid capacity of an object or container.
type CapacityFluidType struct {
	*CommonSampleType
}

// CapacityFluid is The fluid capacity of an object or container.
type CapacityFluid *CapacityFluidType

// CapacityFluidTimeSeriesType is Time series of The fluid capacity of an object or container.
type CapacityFluidTimeSeriesType struct {
	*TimeSeriesType
}

// CapacityFluidTimeSeries is Time series of The fluid capacity of an object or container.
type CapacityFluidTimeSeries *CapacityFluidTimeSeriesType

// CapacitySpatialType is The geometric capacity of an object or container.
type CapacitySpatialType struct {
	*CommonSampleType
}

// CapacitySpatial is The geometric capacity of an object or container.
type CapacitySpatial *CapacitySpatialType

// CapacitySpatialTimeSeriesType is Time series of The geometric capacity of an object or container.
type CapacitySpatialTimeSeriesType struct {
	*TimeSeriesType
}

// CapacitySpatialTimeSeries is Time series of The geometric capacity of an object or container.
type CapacitySpatialTimeSeries *CapacitySpatialTimeSeriesType

// ClockTimeType is The value provided by a timing device at a specific point in time.
type ClockTimeType struct {
	*CommonSampleType
}

// ClockTime is The value provided by a timing device at a specific point in time.
type ClockTime *ClockTimeType

// ClockTimeTimeSeriesType is Time series of The value provided by a timing device at a specific point
//         in time.
type ClockTimeTimeSeriesType struct {
	*TimeSeriesType
}

// ClockTimeTimeSeries is Time series of The value provided by a timing device at a specific point
//         in time.
type ClockTimeTimeSeries *ClockTimeTimeSeriesType

// ConcentrationType is The measurement of the percentage of one component within a mixture of
//         components
type ConcentrationType struct {
	*CommonSampleType
}

// Concentration is The measurement of the percentage of one component within a mixture of
//         components
type Concentration *ConcentrationType

// ConcentrationTimeSeriesType is Time series of The measurement of the percentage of one component within
//         a mixture of components
type ConcentrationTimeSeriesType struct {
	*TimeSeriesType
}

// ConcentrationTimeSeries is Time series of The measurement of the percentage of one component within
//         a mixture of components
type ConcentrationTimeSeries *ConcentrationTimeSeriesType

// ConductivityType is The measurement of the ability of a material to conduct electricity.
type ConductivityType struct {
	*CommonSampleType
}

// Conductivity is The measurement of the ability of a material to conduct electricity.
type Conductivity *ConductivityType

// ConductivityTimeSeriesType is Time series of The measurement of the ability of a material to conduct
//         electricity.
type ConductivityTimeSeriesType struct {
	*TimeSeriesType
}

// ConductivityTimeSeries is Time series of The measurement of the ability of a material to conduct
//         electricity.
type ConductivityTimeSeries *ConductivityTimeSeriesType

// CuttingSpeedType is The speed difference (relative velocity) between the cutting mechanism
//         and the surface of the workpiece it is operating on.
type CuttingSpeedType struct {
	*CommonSampleType
}

// CuttingSpeed is The speed difference (relative velocity) between the cutting mechanism
//         and the surface of the workpiece it is operating on.
type CuttingSpeed *CuttingSpeedType

// CuttingSpeedTimeSeriesType is Time series of The speed difference (relative velocity) between the
//         cutting mechanism and the surface of the workpiece it is operating on.
type CuttingSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// CuttingSpeedTimeSeries is Time series of The speed difference (relative velocity) between the
//         cutting mechanism and the surface of the workpiece it is operating on.
type CuttingSpeedTimeSeries *CuttingSpeedTimeSeriesType

// DensityType is The volumetric mass of a material per unit volume of that material.
type DensityType struct {
	*CommonSampleType
}

// Density is The volumetric mass of a material per unit volume of that material.
type Density *DensityType

// DensityTimeSeriesType is Time series of The volumetric mass of a material per unit volume of that
//         material.
type DensityTimeSeriesType struct {
	*TimeSeriesType
}

// DensityTimeSeries is Time series of The volumetric mass of a material per unit volume of that
//         material.
type DensityTimeSeries *DensityTimeSeriesType

// DepositionAccelerationVolumetricType is The rate of change in spatial volume of material deposited in an
//         additive manufacturing process.
type DepositionAccelerationVolumetricType struct {
	*CommonSampleType
}

// DepositionAccelerationVolumetric is The rate of change in spatial volume of material deposited in an
//         additive manufacturing process.
type DepositionAccelerationVolumetric *DepositionAccelerationVolumetricType

// DepositionAccelerationVolumetricTimeSeriesType is Time series of The rate of change in spatial volume of material
//         deposited in an additive manufacturing process.
type DepositionAccelerationVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionAccelerationVolumetricTimeSeries is Time series of The rate of change in spatial volume of material
//         deposited in an additive manufacturing process.
type DepositionAccelerationVolumetricTimeSeries *DepositionAccelerationVolumetricTimeSeriesType

// DepositionDensityType is The density of the material deposited in an additive manufacturing
//         process per unit of volume.
type DepositionDensityType struct {
	*CommonSampleType
}

// DepositionDensity is The density of the material deposited in an additive manufacturing
//         process per unit of volume.
type DepositionDensity *DepositionDensityType

// DepositionDensityTimeSeriesType is Time series of The density of the material deposited in an additive
//         manufacturing process per unit of volume.
type DepositionDensityTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionDensityTimeSeries is Time series of The density of the material deposited in an additive
//         manufacturing process per unit of volume.
type DepositionDensityTimeSeries *DepositionDensityTimeSeriesType

// DepositionMassType is The mass of the material deposited in an additive manufacturing process.
type DepositionMassType struct {
	*CommonSampleType
}

// DepositionMass is The mass of the material deposited in an additive manufacturing process.
type DepositionMass *DepositionMassType

// DepositionMassTimeSeriesType is Time series of The mass of the material deposited in an additive
//         manufacturing process.
type DepositionMassTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionMassTimeSeries is Time series of The mass of the material deposited in an additive
//         manufacturing process.
type DepositionMassTimeSeries *DepositionMassTimeSeriesType

// DepositionRateVolumetricType is The rate at which a spatial volume of material is deposited in an
//         additive manufacturing process.
type DepositionRateVolumetricType struct {
	*CommonSampleType
}

// DepositionRateVolumetric is The rate at which a spatial volume of material is deposited in an
//         additive manufacturing process.
type DepositionRateVolumetric *DepositionRateVolumetricType

// DepositionRateVolumetricTimeSeriesType is Time series of The rate at which a spatial volume of material is
//         deposited in an additive manufacturing process.
type DepositionRateVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionRateVolumetricTimeSeries is Time series of The rate at which a spatial volume of material is
//         deposited in an additive manufacturing process.
type DepositionRateVolumetricTimeSeries *DepositionRateVolumetricTimeSeriesType

// DepositionVolumeType is The spatial volume of material to be deposited in an additive
//         manufacturing process.
type DepositionVolumeType struct {
	*CommonSampleType
}

// DepositionVolume is The spatial volume of material to be deposited in an additive
//         manufacturing process.
type DepositionVolume *DepositionVolumeType

// DepositionVolumeTimeSeriesType is Time series of The spatial volume of material to be deposited in an
//         additive manufacturing process.
type DepositionVolumeTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionVolumeTimeSeries is Time series of The spatial volume of material to be deposited in an
//         additive manufacturing process.
type DepositionVolumeTimeSeries *DepositionVolumeTimeSeriesType

// DisplacementType is The measurement of the change in position of an object.
type DisplacementType struct {
	*CommonSampleType
}

// Displacement is The measurement of the change in position of an object.
type Displacement *DisplacementType

// DisplacementTimeSeriesType is Time series of The measurement of the change in position of an object.
type DisplacementTimeSeriesType struct {
	*TimeSeriesType
}

// DisplacementTimeSeries is Time series of The measurement of the change in position of an object.
type DisplacementTimeSeries *DisplacementTimeSeriesType

// ElectricalEnergyType is The value of the {{block(Wattage)}} used or generated by a
//         {{block(Component)}} over an interval of time.
type ElectricalEnergyType struct {
	*CommonSampleType
}

// ElectricalEnergy is The value of the {{block(Wattage)}} used or generated by a
//         {{block(Component)}} over an interval of time.
type ElectricalEnergy *ElectricalEnergyType

// ElectricalEnergyTimeSeriesType is Time series of The value of the {{block(Wattage)}} used or generated by
//         a {{block(Component)}} over an interval of time.
type ElectricalEnergyTimeSeriesType struct {
	*TimeSeriesType
}

// ElectricalEnergyTimeSeries is Time series of The value of the {{block(Wattage)}} used or generated by
//         a {{block(Component)}} over an interval of time.
type ElectricalEnergyTimeSeries *ElectricalEnergyTimeSeriesType

// EquipmentTimerType is The measurement of the amount of time a piece of equipment or a sub-part
//         of a piece of equipment has performed specific activities.
type EquipmentTimerType struct {
	*CommonSampleType
}

// EquipmentTimer is The measurement of the amount of time a piece of equipment or a sub-part
//         of a piece of equipment has performed specific activities.
type EquipmentTimer *EquipmentTimerType

// EquipmentTimerTimeSeriesType is Time series of The measurement of the amount of time a piece of
//         equipment or a sub-part of a piece of equipment has performed specific
//         activities.
type EquipmentTimerTimeSeriesType struct {
	*TimeSeriesType
}

// EquipmentTimerTimeSeries is Time series of The measurement of the amount of time a piece of
//         equipment or a sub-part of a piece of equipment has performed specific
//         activities.
type EquipmentTimerTimeSeries *EquipmentTimerTimeSeriesType

// FillLevelType is The measurement of the amount of a substance remaining compared to the
//         planned maximum amount of that substance.
type FillLevelType struct {
	*CommonSampleType
}

// FillLevel is The measurement of the amount of a substance remaining compared to the
//         planned maximum amount of that substance.
type FillLevel *FillLevelType

// FillLevelTimeSeriesType is Time series of The measurement of the amount of a substance remaining
//         compared to the planned maximum amount of that substance.
type FillLevelTimeSeriesType struct {
	*TimeSeriesType
}

// FillLevelTimeSeries is Time series of The measurement of the amount of a substance remaining
//         compared to the planned maximum amount of that substance.
type FillLevelTimeSeries *FillLevelTimeSeriesType

// FlowType is The measurement of the rate of flow of a fluid.
type FlowType struct {
	*CommonSampleType
}

// Flow is The measurement of the rate of flow of a fluid.
type Flow *FlowType

// FlowTimeSeriesType is Time series of The measurement of the rate of flow of a fluid.
type FlowTimeSeriesType struct {
	*TimeSeriesType
}

// FlowTimeSeries is Time series of The measurement of the rate of flow of a fluid.
type FlowTimeSeries *FlowTimeSeriesType

// FrequencyType is The measurement of the number of occurrences of a repeating event per
//         unit time.
type FrequencyType struct {
	*CommonSampleType
}

// Frequency is The measurement of the number of occurrences of a repeating event per
//         unit time.
type Frequency *FrequencyType

// FrequencyTimeSeriesType is Time series of The measurement of the number of occurrences of a
//         repeating event per unit time.
type FrequencyTimeSeriesType struct {
	*TimeSeriesType
}

// FrequencyTimeSeries is Time series of The measurement of the number of occurrences of a
//         repeating event per unit time.
type FrequencyTimeSeries *FrequencyTimeSeriesType

// GlobalPositionType is **DEPRECATED** in Version 1.1
type GlobalPositionType struct {
	*CommonSampleType
}

// GlobalPosition is **DEPRECATED** in Version 1.1
type GlobalPosition *GlobalPositionType

// GlobalPositionTimeSeriesType is Time series of **DEPRECATED** in Version 1.1
type GlobalPositionTimeSeriesType struct {
	*TimeSeriesType
}

// GlobalPositionTimeSeries is Time series of **DEPRECATED** in Version 1.1
type GlobalPositionTimeSeries *GlobalPositionTimeSeriesType

// LengthType is The measurement of the length of an object.
type LengthType struct {
	*CommonSampleType
}

// Length is The measurement of the length of an object.
type Length *LengthType

// LengthTimeSeriesType is Time series of The measurement of the length of an object.
type LengthTimeSeriesType struct {
	*TimeSeriesType
}

// LengthTimeSeries is Time series of The measurement of the length of an object.
type LengthTimeSeries *LengthTimeSeriesType

// LevelType is **DEPRECATED** in *Version 1.2*. See {{block(FillLevel)}}. Represents
//         the level of a resource.
type LevelType struct {
	*CommonSampleType
}

// Level is **DEPRECATED** in *Version 1.2*. See {{block(FillLevel)}}. Represents
//         the level of a resource.
type Level *LevelType

// LevelTimeSeriesType is Time series of **DEPRECATED** in *Version 1.2*. See
//         {{block(FillLevel)}}. Represents the level of a resource.
type LevelTimeSeriesType struct {
	*TimeSeriesType
}

// LevelTimeSeries is Time series of **DEPRECATED** in *Version 1.2*. See
//         {{block(FillLevel)}}. Represents the level of a resource.
type LevelTimeSeries *LevelTimeSeriesType

// LinearForceType is The measurement of the push or pull introduced by an actuator or exerted
//         on an object.
type LinearForceType struct {
	*CommonSampleType
}

// LinearForce is The measurement of the push or pull introduced by an actuator or exerted
//         on an object.
type LinearForce *LinearForceType

// LinearForceTimeSeriesType is Time series of The measurement of the push or pull introduced by an
//         actuator or exerted on an object.
type LinearForceTimeSeriesType struct {
	*TimeSeriesType
}

// LinearForceTimeSeries is Time series of The measurement of the push or pull introduced by an
//         actuator or exerted on an object.
type LinearForceTimeSeries *LinearForceTimeSeriesType

// LoadType is The measurement of the actual versus the standard rating of a piece of
//         equipment.
type LoadType struct {
	*CommonSampleType
}

// Load is The measurement of the actual versus the standard rating of a piece of
//         equipment.
type Load *LoadType

// LoadTimeSeriesType is Time series of The measurement of the actual versus the standard rating
//         of a piece of equipment.
type LoadTimeSeriesType struct {
	*TimeSeriesType
}

// LoadTimeSeries is Time series of The measurement of the actual versus the standard rating
//         of a piece of equipment.
type LoadTimeSeries *LoadTimeSeriesType

// MassType is The measurement of the mass of an object(s) or an amount of material.
type MassType struct {
	*CommonSampleType
}

// Mass is The measurement of the mass of an object(s) or an amount of material.
type Mass *MassType

// MassTimeSeriesType is Time series of The measurement of the mass of an object(s) or an amount
//         of material.
type MassTimeSeriesType struct {
	*TimeSeriesType
}

// MassTimeSeries is Time series of The measurement of the mass of an object(s) or an amount
//         of material.
type MassTimeSeries *MassTimeSeriesType

// PathFeedrateType is The measurement of the feedrate for the axes, or a single axis,
//         associated with a {{block(Path)}} component-a vector.
type PathFeedrateType struct {
	*CommonSampleType
}

// PathFeedrate is The measurement of the feedrate for the axes, or a single axis,
//         associated with a {{block(Path)}} component-a vector.
type PathFeedrate *PathFeedrateType

// PathFeedrateTimeSeriesType is Time series of The measurement of the feedrate for the axes, or a single
//         axis, associated with a {{block(Path)}} component-a vector.
type PathFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedrateTimeSeries is Time series of The measurement of the feedrate for the axes, or a single
//         axis, associated with a {{block(Path)}} component-a vector.
type PathFeedrateTimeSeries *PathFeedrateTimeSeriesType

// PathFeedratePerRevolutionType is The feedrate for the axes, or a single axis.
type PathFeedratePerRevolutionType struct {
	*CommonSampleType
}

// PathFeedratePerRevolution is The feedrate for the axes, or a single axis.
type PathFeedratePerRevolution *PathFeedratePerRevolutionType

// PathFeedratePerRevolutionTimeSeriesType is Time series of The feedrate for the axes, or a single axis.
type PathFeedratePerRevolutionTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedratePerRevolutionTimeSeries is Time series of The feedrate for the axes, or a single axis.
type PathFeedratePerRevolutionTimeSeries *PathFeedratePerRevolutionTimeSeriesType

// PathPositionType is A measured or calculated position of a control point associated with a
//         {{block(Controller)}} element, or {{block(Path)}} element if provided,
//         of a piece of equipment.
type PathPositionType struct {
	*ThreeSpaceSampleType
}

// PathPosition is A measured or calculated position of a control point associated with a
//         {{block(Controller)}} element, or {{block(Path)}} element if provided,
//         of a piece of equipment.
type PathPosition *PathPositionType

// PHType is A measure of the acidity or alkalinity of a solution.
type PHType struct {
	*CommonSampleType
}

// PH is A measure of the acidity or alkalinity of a solution.
type PH *PHType

// PHTimeSeriesType is Time series of A measure of the acidity or alkalinity of a solution.
type PHTimeSeriesType struct {
	*TimeSeriesType
}

// PHTimeSeries is Time series of A measure of the acidity or alkalinity of a solution.
type PHTimeSeries *PHTimeSeriesType

// PositionType is A measured or calculated position of a {{block(Component)}} element as
//         reported by a piece of equipment.
type PositionType struct {
	*CommonSampleType
}

// Position is A measured or calculated position of a {{block(Component)}} element as
//         reported by a piece of equipment.
type Position *PositionType

// PositionTimeSeriesType is Time series of A measured or calculated position of a
//         {{block(Component)}} element as reported by a piece of equipment.
type PositionTimeSeriesType struct {
	*TimeSeriesType
}

// PositionTimeSeries is Time series of A measured or calculated position of a
//         {{block(Component)}} element as reported by a piece of equipment.
type PositionTimeSeries *PositionTimeSeriesType

// PowerFactorType is The measurement of the ratio of real power flowing to a load to the
//         apparent power in that AC circuit.
type PowerFactorType struct {
	*CommonSampleType
}

// PowerFactor is The measurement of the ratio of real power flowing to a load to the
//         apparent power in that AC circuit.
type PowerFactor *PowerFactorType

// PowerFactorTimeSeriesType is Time series of The measurement of the ratio of real power flowing to a
//         load to the apparent power in that AC circuit.
type PowerFactorTimeSeriesType struct {
	*TimeSeriesType
}

// PowerFactorTimeSeries is Time series of The measurement of the ratio of real power flowing to a
//         load to the apparent power in that AC circuit.
type PowerFactorTimeSeries *PowerFactorTimeSeriesType

// PressureType is {{block(Pressure)}} is a system that delivers compressed gas or fluid
//         and controls the pressure and rate of pressure change to a desired
//         target set-point. Note: For example, Delivery Method can be a Compressed
//         Air or N2 tank that is piped via an inlet valve to the chamber.
type PressureType struct {
	*CommonSampleType
}

// Pressure is {{block(Pressure)}} is a system that delivers compressed gas or fluid
//         and controls the pressure and rate of pressure change to a desired
//         target set-point. Note: For example, Delivery Method can be a Compressed
//         Air or N2 tank that is piped via an inlet valve to the chamber.
type Pressure *PressureType

// PressureTimeSeriesType is Time series of The force per unit area measured relative to atmospheric
//         pressure. Commonly referred to as gauge pressure.
type PressureTimeSeriesType struct {
	*TimeSeriesType
}

// PressureTimeSeries is Time series of The force per unit area measured relative to atmospheric
//         pressure. Commonly referred to as gauge pressure.
type PressureTimeSeries *PressureTimeSeriesType

// ProcessTimerType is The measurement of the amount of time a piece of equipment has performed
//         different types of activities associated with the process being
//         performed at that piece of equipment.
type ProcessTimerType struct {
	*CommonSampleType
}

// ProcessTimer is The measurement of the amount of time a piece of equipment has performed
//         different types of activities associated with the process being
//         performed at that piece of equipment.
type ProcessTimer *ProcessTimerType

// ProcessTimerTimeSeriesType is Time series of The measurement of the amount of time a piece of
//         equipment has performed different types of activities associated with
//         the process being performed at that piece of equipment.
type ProcessTimerTimeSeriesType struct {
	*TimeSeriesType
}

// ProcessTimerTimeSeries is Time series of The measurement of the amount of time a piece of
//         equipment has performed different types of activities associated with
//         the process being performed at that piece of equipment.
type ProcessTimerTimeSeries *ProcessTimerTimeSeriesType

// ResistanceType is The measurement of the degree to which a substance opposes the passage
//         of an electric current.
type ResistanceType struct {
	*CommonSampleType
}

// Resistance is The measurement of the degree to which a substance opposes the passage
//         of an electric current.
type Resistance *ResistanceType

// ResistanceTimeSeriesType is Time series of The measurement of the degree to which a substance
//         opposes the passage of an electric current.
type ResistanceTimeSeriesType struct {
	*TimeSeriesType
}

// ResistanceTimeSeries is Time series of The measurement of the degree to which a substance
//         opposes the passage of an electric current.
type ResistanceTimeSeries *ResistanceTimeSeriesType

// RotaryVelocityType is The measurement of the rotational speed of a rotary axis.
type RotaryVelocityType struct {
	*CommonSampleType
}

// RotaryVelocity is The measurement of the rotational speed of a rotary axis.
type RotaryVelocity *RotaryVelocityType

// RotaryVelocityTimeSeriesType is Time series of The measurement of the rotational speed of a rotary axis.
type RotaryVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// RotaryVelocityTimeSeries is Time series of The measurement of the rotational speed of a rotary axis.
type RotaryVelocityTimeSeries *RotaryVelocityTimeSeriesType

// SoundLevelType is The measurement of a sound level or sound pressure level relative to
//         atmospheric pressure.
type SoundLevelType struct {
	*CommonSampleType
}

// SoundLevel is The measurement of a sound level or sound pressure level relative to
//         atmospheric pressure.
type SoundLevel *SoundLevelType

// SoundLevelTimeSeriesType is Time series of The measurement of a sound level or sound pressure level
//         relative to atmospheric pressure.
type SoundLevelTimeSeriesType struct {
	*TimeSeriesType
}

// SoundLevelTimeSeries is Time series of The measurement of a sound level or sound pressure level
//         relative to atmospheric pressure.
type SoundLevelTimeSeries *SoundLevelTimeSeriesType

// SpindleSpeedType is **DEPRECATED** in *Version 1.2*. Replaced by {{block(RotaryVelocity)}}.
//         The rotational speed of the rotary axis.
type SpindleSpeedType struct {
	*CommonSampleType
}

// SpindleSpeed is **DEPRECATED** in *Version 1.2*. Replaced by {{block(RotaryVelocity)}}.
//         The rotational speed of the rotary axis.
type SpindleSpeed *SpindleSpeedType

// SpindleSpeedTimeSeriesType is Time series of **DEPRECATED** in *Version 1.2*. Replaced by
//         {{block(RotaryVelocity)}}. The rotational speed of the rotary axis.
type SpindleSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// SpindleSpeedTimeSeries is Time series of **DEPRECATED** in *Version 1.2*. Replaced by
//         {{block(RotaryVelocity)}}. The rotational speed of the rotary axis.
type SpindleSpeedTimeSeries *SpindleSpeedTimeSeriesType

// StrainType is The measurement of the amount of deformation per unit length of an
//         object when a load is applied.
type StrainType struct {
	*CommonSampleType
}

// Strain is The measurement of the amount of deformation per unit length of an
//         object when a load is applied.
type Strain *StrainType

// StrainTimeSeriesType is Time series of The measurement of the amount of deformation per unit
//         length of an object when a load is applied.
type StrainTimeSeriesType struct {
	*TimeSeriesType
}

// StrainTimeSeries is Time series of The measurement of the amount of deformation per unit
//         length of an object when a load is applied.
type StrainTimeSeries *StrainTimeSeriesType

// TemperatureType is The measurement of temperature.
type TemperatureType struct {
	*CommonSampleType
}

// Temperature is The measurement of temperature.
type Temperature *TemperatureType

// TemperatureTimeSeriesType is Time series of The measurement of temperature.
type TemperatureTimeSeriesType struct {
	*TimeSeriesType
}

// TemperatureTimeSeries is Time series of The measurement of temperature.
type TemperatureTimeSeries *TemperatureTimeSeriesType

// TensionType is The measurement of a force that stretches or elongates an object.
type TensionType struct {
	*CommonSampleType
}

// Tension is The measurement of a force that stretches or elongates an object.
type Tension *TensionType

// TensionTimeSeriesType is Time series of The measurement of a force that stretches or elongates an
//         object.
type TensionTimeSeriesType struct {
	*TimeSeriesType
}

// TensionTimeSeries is Time series of The measurement of a force that stretches or elongates an
//         object.
type TensionTimeSeries *TensionTimeSeriesType

// TiltType is The measurement of angular displacement.
type TiltType struct {
	*CommonSampleType
}

// Tilt is The measurement of angular displacement.
type Tilt *TiltType

// TiltTimeSeriesType is Time series of The measurement of angular displacement.
type TiltTimeSeriesType struct {
	*TimeSeriesType
}

// TiltTimeSeries is Time series of The measurement of angular displacement.
type TiltTimeSeries *TiltTimeSeriesType

// TorqueType is The measurement of the turning force exerted on an object or by an
//         object.
type TorqueType struct {
	*CommonSampleType
}

// Torque is The measurement of the turning force exerted on an object or by an
//         object.
type Torque *TorqueType

// TorqueTimeSeriesType is Time series of The measurement of the turning force exerted on an object
//         or by an object.
type TorqueTimeSeriesType struct {
	*TimeSeriesType
}

// TorqueTimeSeries is Time series of The measurement of the turning force exerted on an object
//         or by an object.
type TorqueTimeSeries *TorqueTimeSeriesType

// VelocityType is The measurement of the rate of change of position of a
//         {{block(Component)}}.
type VelocityType struct {
	*CommonSampleType
}

// Velocity is The measurement of the rate of change of position of a
//         {{block(Component)}}.
type Velocity *VelocityType

// VelocityTimeSeriesType is Time series of The measurement of the rate of change of position of a
//         {{block(Component)}}.
type VelocityTimeSeriesType struct {
	*TimeSeriesType
}

// VelocityTimeSeries is Time series of The measurement of the rate of change of position of a
//         {{block(Component)}}.
type VelocityTimeSeries *VelocityTimeSeriesType

// ViscosityType is The measurement of a fluids resistance to flow.
type ViscosityType struct {
	*CommonSampleType
}

// Viscosity is The measurement of a fluids resistance to flow.
type Viscosity *ViscosityType

// ViscosityTimeSeriesType is Time series of The measurement of a fluids resistance to flow.
type ViscosityTimeSeriesType struct {
	*TimeSeriesType
}

// ViscosityTimeSeries is Time series of The measurement of a fluids resistance to flow.
type ViscosityTimeSeries *ViscosityTimeSeriesType

// VoltageType is **DEPRECATED** in *Version 1.6*. Replaced by {{block(VoltageAC)}} and
//         {{block(VoltageDC)}}. The measurement of electrical potential between
//         two points.
type VoltageType struct {
	*CommonSampleType
}

// Voltage is **DEPRECATED** in *Version 1.6*. Replaced by {{block(VoltageAC)}} and
//         {{block(VoltageDC)}}. The measurement of electrical potential between
//         two points.
type Voltage *VoltageType

// VoltageTimeSeriesType is Time series of **DEPRECATED** in *Version 1.6*. Replaced by
//         {{block(VoltageAC)}} and {{block(VoltageDC)}}. The measurement of
//         electrical potential between two points.
type VoltageTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageTimeSeries is Time series of **DEPRECATED** in *Version 1.6*. Replaced by
//         {{block(VoltageAC)}} and {{block(VoltageDC)}}. The measurement of
//         electrical potential between two points.
type VoltageTimeSeries *VoltageTimeSeriesType

// VoltAmpereType is The measurement of the apparent power in an electrical circuit, equal to
//         the product of root-mean-square (RMS) voltage and RMS current (commonly
//         referred to as VA).
type VoltAmpereType struct {
	*CommonSampleType
}

// VoltAmpere is The measurement of the apparent power in an electrical circuit, equal to
//         the product of root-mean-square (RMS) voltage and RMS current (commonly
//         referred to as VA).
type VoltAmpere *VoltAmpereType

// VoltAmpereTimeSeriesType is Time series of The measurement of the apparent power in an electrical
//         circuit, equal to the product of root-mean-square (RMS) voltage and RMS
//         current (commonly referred to as VA).
type VoltAmpereTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereTimeSeries is Time series of The measurement of the apparent power in an electrical
//         circuit, equal to the product of root-mean-square (RMS) voltage and RMS
//         current (commonly referred to as VA).
type VoltAmpereTimeSeries *VoltAmpereTimeSeriesType

// VoltAmpereReactiveType is The measurement of reactive power in an AC electrical circuit (commonly
//         referred to as VAR).
type VoltAmpereReactiveType struct {
	*CommonSampleType
}

// VoltAmpereReactive is The measurement of reactive power in an AC electrical circuit (commonly
//         referred to as VAR).
type VoltAmpereReactive *VoltAmpereReactiveType

// VoltAmpereReactiveTimeSeriesType is Time series of The measurement of reactive power in an AC electrical
//         circuit (commonly referred to as VAR).
type VoltAmpereReactiveTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereReactiveTimeSeries is Time series of The measurement of reactive power in an AC electrical
//         circuit (commonly referred to as VAR).
type VoltAmpereReactiveTimeSeries *VoltAmpereReactiveTimeSeriesType

// VolumeFluidType is The fluid volume of an object or container.
type VolumeFluidType struct {
	*CommonSampleType
}

// VolumeFluid is The fluid volume of an object or container.
type VolumeFluid *VolumeFluidType

// VolumeFluidTimeSeriesType is Time series of The fluid volume of an object or container.
type VolumeFluidTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeFluidTimeSeries is Time series of The fluid volume of an object or container.
type VolumeFluidTimeSeries *VolumeFluidTimeSeriesType

// VolumeSpatialType is The geometric volume of an object or container.
type VolumeSpatialType struct {
	*CommonSampleType
}

// VolumeSpatial is The geometric volume of an object or container.
type VolumeSpatial *VolumeSpatialType

// VolumeSpatialTimeSeriesType is Time series of The geometric volume of an object or container.
type VolumeSpatialTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeSpatialTimeSeries is Time series of The geometric volume of an object or container.
type VolumeSpatialTimeSeries *VolumeSpatialTimeSeriesType

// WattageType is The measurement of power flowing through or dissipated by an electrical
//         circuit or piece of equipment.
type WattageType struct {
	*CommonSampleType
}

// Wattage is The measurement of power flowing through or dissipated by an electrical
//         circuit or piece of equipment.
type Wattage *WattageType

// WattageTimeSeriesType is Time series of The measurement of power flowing through or dissipated by
//         an electrical circuit or piece of equipment.
type WattageTimeSeriesType struct {
	*TimeSeriesType
}

// WattageTimeSeries is Time series of The measurement of power flowing through or dissipated by
//         an electrical circuit or piece of equipment.
type WattageTimeSeries *WattageTimeSeriesType

// AmperageDCType is The measurement of an electric current flowing in one direction only.
type AmperageDCType struct {
	*CommonSampleType
}

// AmperageDC is The measurement of an electric current flowing in one direction only.
type AmperageDC *AmperageDCType

// AmperageDCTimeSeriesType is Time series of The measurement of an electric current flowing in one
//         direction only.
type AmperageDCTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageDCTimeSeries is Time series of The measurement of an electric current flowing in one
//         direction only.
type AmperageDCTimeSeries *AmperageDCTimeSeriesType

// AmperageACType is The measurement of an electrical current that reverses direction at
//         regular short intervals.
type AmperageACType struct {
	*CommonSampleType
}

// AmperageAC is The measurement of an electrical current that reverses direction at
//         regular short intervals.
type AmperageAC *AmperageACType

// AmperageACTimeSeriesType is Time series of The measurement of an electrical current that reverses
//         direction at regular short intervals.
type AmperageACTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageACTimeSeries is Time series of The measurement of an electrical current that reverses
//         direction at regular short intervals.
type AmperageACTimeSeries *AmperageACTimeSeriesType

// VoltageACType is The measurement of the electrical potential between two points in an
//         electrical circuit in which the current periodically reverses direction.
type VoltageACType struct {
	*CommonSampleType
}

// VoltageAC is The measurement of the electrical potential between two points in an
//         electrical circuit in which the current periodically reverses direction.
type VoltageAC *VoltageACType

// VoltageACTimeSeriesType is Time series of The measurement of the electrical potential between two
//         points in an electrical circuit in which the current periodically
//         reverses direction.
type VoltageACTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageACTimeSeries is Time series of The measurement of the electrical potential between two
//         points in an electrical circuit in which the current periodically
//         reverses direction.
type VoltageACTimeSeries *VoltageACTimeSeriesType

// VoltageDCType is The measurement of the electrical potential between two points in an
//         electrical circuit in which the current is unidirectional.
type VoltageDCType struct {
	*CommonSampleType
}

// VoltageDC is The measurement of the electrical potential between two points in an
//         electrical circuit in which the current is unidirectional.
type VoltageDC *VoltageDCType

// VoltageDCTimeSeriesType is Time series of The measurement of the electrical potential between two
//         points in an electrical circuit in which the current is unidirectional.
type VoltageDCTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageDCTimeSeries is Time series of The measurement of the electrical potential between two
//         points in an electrical circuit in which the current is unidirectional.
type VoltageDCTimeSeries *VoltageDCTimeSeriesType

// XDimensionType is Measured dimension of an entity relative to the X direction of the
//         referenced coordinate system.
type XDimensionType struct {
	*CommonSampleType
}

// XDimension is Measured dimension of an entity relative to the X direction of the
//         referenced coordinate system.
type XDimension *XDimensionType

// XDimensionTimeSeriesType is Time series of Measured dimension of an entity relative to the X
//         direction of the referenced coordinate system.
type XDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// XDimensionTimeSeries is Time series of Measured dimension of an entity relative to the X
//         direction of the referenced coordinate system.
type XDimensionTimeSeries *XDimensionTimeSeriesType

// YDimensionType is Measured dimension of an entity relative to the Y direction of the
//         referenced coordinate system.
type YDimensionType struct {
	*CommonSampleType
}

// YDimension is Measured dimension of an entity relative to the Y direction of the
//         referenced coordinate system.
type YDimension *YDimensionType

// YDimensionTimeSeriesType is Time series of Measured dimension of an entity relative to the Y
//         direction of the referenced coordinate system.
type YDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// YDimensionTimeSeries is Time series of Measured dimension of an entity relative to the Y
//         direction of the referenced coordinate system.
type YDimensionTimeSeries *YDimensionTimeSeriesType

// ZDimensionType is Measured dimension of an entity relative to the Z direction of the
//         referenced coordinate system.
type ZDimensionType struct {
	*CommonSampleType
}

// ZDimension is Measured dimension of an entity relative to the Z direction of the
//         referenced coordinate system.
type ZDimension *ZDimensionType

// ZDimensionTimeSeriesType is Time series of Measured dimension of an entity relative to the Z
//         direction of the referenced coordinate system.
type ZDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// ZDimensionTimeSeries is Time series of Measured dimension of an entity relative to the Z
//         direction of the referenced coordinate system.
type ZDimensionTimeSeries *ZDimensionTimeSeriesType

// DiameterType is The measured dimension of a diameter.
type DiameterType struct {
	*CommonSampleType
}

// Diameter is The measured dimension of a diameter.
type Diameter *DiameterType

// DiameterTimeSeriesType is Time series of The measured dimension of a diameter.
type DiameterTimeSeriesType struct {
	*TimeSeriesType
}

// DiameterTimeSeries is Time series of The measured dimension of a diameter.
type DiameterTimeSeries *DiameterTimeSeriesType

// OrientationType is A measured or calculated orientation of a plane or vector relative to a
//         cartesian coordinate system.
type OrientationType struct {
	*ThreeSpaceSampleType
}

// Orientation is A measured or calculated orientation of a plane or vector relative to a
//         cartesian coordinate system.
type Orientation *OrientationType

// HumidityRelativeType is The amount of water vapor present expressed as a percent to reach
//         saturation at the same temperature.
type HumidityRelativeType struct {
	*CommonSampleType
}

// HumidityRelative is The amount of water vapor present expressed as a percent to reach
//         saturation at the same temperature.
type HumidityRelative *HumidityRelativeType

// HumidityRelativeTimeSeriesType is Time series of The amount of water vapor present expressed as a percent
//         to reach saturation at the same temperature.
type HumidityRelativeTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityRelativeTimeSeries is Time series of The amount of water vapor present expressed as a percent
//         to reach saturation at the same temperature.
type HumidityRelativeTimeSeries *HumidityRelativeTimeSeriesType

// HumidityAbsoluteType is The amount of water vapor expressed in grams per cubic meter.
type HumidityAbsoluteType struct {
	*CommonSampleType
}

// HumidityAbsolute is The amount of water vapor expressed in grams per cubic meter.
type HumidityAbsolute *HumidityAbsoluteType

// HumidityAbsoluteTimeSeriesType is Time series of The amount of water vapor expressed in grams per cubic
//         meter.
type HumidityAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityAbsoluteTimeSeries is Time series of The amount of water vapor expressed in grams per cubic
//         meter.
type HumidityAbsoluteTimeSeries *HumidityAbsoluteTimeSeriesType

// HumiditySpecificType is The ratio of the water vapor present over the total weight of the water
//         vapor and air present expressed as a percent.
type HumiditySpecificType struct {
	*CommonSampleType
}

// HumiditySpecific is The ratio of the water vapor present over the total weight of the water
//         vapor and air present expressed as a percent.
type HumiditySpecific *HumiditySpecificType

// HumiditySpecificTimeSeriesType is Time series of The ratio of the water vapor present over the total
//         weight of the water vapor and air present expressed as a percent.
type HumiditySpecificTimeSeriesType struct {
	*TimeSeriesType
}

// HumiditySpecificTimeSeries is Time series of The ratio of the water vapor present over the total
//         weight of the water vapor and air present expressed as a percent.
type HumiditySpecificTimeSeries *HumiditySpecificTimeSeriesType

// PressurizationRateType is The change of pressure per unit time.
type PressurizationRateType struct {
	*CommonSampleType
}

// PressurizationRate is The change of pressure per unit time.
type PressurizationRate *PressurizationRateType

// PressurizationRateTimeSeriesType is Time series of The change of pressure per unit time.
type PressurizationRateTimeSeriesType struct {
	*TimeSeriesType
}

// PressurizationRateTimeSeries is Time series of The change of pressure per unit time.
type PressurizationRateTimeSeries *PressurizationRateTimeSeriesType

// DecelerationType is Negative rate of change of velocity.
type DecelerationType struct {
	*CommonSampleType
}

// Deceleration is Negative rate of change of velocity.
type Deceleration *DecelerationType

// DecelerationTimeSeriesType is Time series of Negative rate of change of velocity.
type DecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// DecelerationTimeSeries is Time series of Negative rate of change of velocity.
type DecelerationTimeSeries *DecelerationTimeSeriesType

// AssetUpdateRateType is The average rate of change of values for assets in the MTConnect
//         streams. The average is computed over a rolling window defined by the
//         implementation.
type AssetUpdateRateType struct {
	*CommonSampleType
}

// AssetUpdateRate is The average rate of change of values for assets in the MTConnect
//         streams. The average is computed over a rolling window defined by the
//         implementation.
type AssetUpdateRate *AssetUpdateRateType

// AssetUpdateRateTimeSeriesType is Time series of The average rate of change of values for assets in the
//         MTConnect streams. The average is computed over a rolling window defined
//         by the implementation.
type AssetUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// AssetUpdateRateTimeSeries is Time series of The average rate of change of values for assets in the
//         MTConnect streams. The average is computed over a rolling window defined
//         by the implementation.
type AssetUpdateRateTimeSeries *AssetUpdateRateTimeSeriesType

// AngularDecelerationType is Negative rate of change of angular velocity.
type AngularDecelerationType struct {
	*CommonSampleType
}

// AngularDeceleration is Negative rate of change of angular velocity.
type AngularDeceleration *AngularDecelerationType

// AngularDecelerationTimeSeriesType is Time series of Negative rate of change of angular velocity.
type AngularDecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularDecelerationTimeSeries is Time series of Negative rate of change of angular velocity.
type AngularDecelerationTimeSeries *AngularDecelerationTimeSeriesType

// ObservationUpdateRateType is The average rate of change of values for data items in the MTConnect
//         streams. The average is computed over a rolling window defined by the
//         implementation.
type ObservationUpdateRateType struct {
	*CommonSampleType
}

// ObservationUpdateRate is The average rate of change of values for data items in the MTConnect
//         streams. The average is computed over a rolling window defined by the
//         implementation.
type ObservationUpdateRate *ObservationUpdateRateType

// ObservationUpdateRateTimeSeriesType is Time series of The average rate of change of values for data items in
//         the MTConnect streams. The average is computed over a rolling window
//         defined by the implementation.
type ObservationUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// ObservationUpdateRateTimeSeries is Time series of The average rate of change of values for data items in
//         the MTConnect streams. The average is computed over a rolling window
//         defined by the implementation.
type ObservationUpdateRateTimeSeries *ObservationUpdateRateTimeSeriesType

// PressureAbsoluteType is The force per unit area measured relative to a vacuum.
type PressureAbsoluteType struct {
	*CommonSampleType
}

// PressureAbsolute is The force per unit area measured relative to a vacuum.
type PressureAbsolute *PressureAbsoluteType

// PressureAbsoluteTimeSeriesType is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// PressureAbsoluteTimeSeries is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeries *PressureAbsoluteTimeSeriesType

// IntegerEventValueType is Integer event value
type IntegerEventValueType struct {
	Integer              int
	UnavailableValueType string
}

// FloatEventValueType is Integer event value
type FloatEventValueType struct {
	Float                float32
	UnavailableValueType string
}

// StringEventValueType is Srring event value
type StringEventValueType struct {
	String               string
	UnavailableValueType string
}

// StringListValueType is A list of axis names
type StringListValueType []string

// StringListEventValueType is A list of axis for an event
type StringListEventValueType struct {
	StringListValueType  *StringListValueType
	UnavailableValueType string
}

// EventType is Something that happens or takes place.
type EventType struct {
	ObservationType    *ObservationType
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
}

// Event is Something that happens or takes place.
type Event *EventType

// StringEventType is An unfaceted string event
type StringEventType struct {
}

// StringEvent is An unfaceted string event
type StringEvent *StringEventType

// StringListEventType is An unfaceted string event
type StringListEventType struct {
}

// StringListEvent is An unfaceted string event
type StringListEvent *StringListEventType

// IntegerEventType is An event with an integer value
type IntegerEventType struct {
}

// IntegerEvent is An event with an integer value
type IntegerEvent *IntegerEventType

// FloatEventType is An event with an integer value
type FloatEventType struct {
}

// FloatEvent is An event with an integer value
type FloatEvent *FloatEventType

// ActiveAxesType is The result is a space delimited list of axes names.
type ActiveAxesType struct {
	*StringEventType
}

// ActiveAxes is The result is a space delimited list of axes names.
type ActiveAxes *ActiveAxesType

// ActuatorStateValueType is Value is indeterminate
type ActuatorStateValueType string

// ActuatorStateType is Represents the operational state of an apparatus for moving or
//         controlling a mechanism or system.
type ActuatorStateType struct {
}

// ActuatorState is Represents the operational state of an apparatus for moving or
//         controlling a mechanism or system.
type ActuatorState *ActuatorStateType

// AssetChangedType is An {{term(MTConnect Asset)}} has been added or modified. The value
//         **MUST** be the {{property(assetId)}} of the {{block(Asset)}} that has
//         been modified.
type AssetChangedType struct {
	AssetTypeAttr string `xml:"assetType,attr,omitempty"`
	*StringEventType
}

// AssetChanged is An {{term(MTConnect Asset)}} has been added or modified. The value
//         **MUST** be the {{property(assetId)}} of the {{block(Asset)}} that has
//         been modified.
type AssetChanged *AssetChangedType

// AssetRemovedType is An {{term(MTConnect Asset)}} has been removed. The value **MUST** be the
//         {{property(assetId)}} of the {{block(Asset)}} that has been removed.
type AssetRemovedType struct {
	AssetTypeAttr string `xml:"assetType,attr,omitempty"`
	*StringEventType
}

// AssetRemoved is An {{term(MTConnect Asset)}} has been removed. The value **MUST** be the
//         {{property(assetId)}} of the {{block(Asset)}} that has been removed.
type AssetRemoved *AssetRemovedType

// AvailabilityValueType is Value is indeterminate
type AvailabilityValueType string

// AvailabilityType is Represents the {{term(Agent)}}'s ability to communicate with the
//         data source.
type AvailabilityType struct {
}

// Availability is Represents the {{term(Agent)}}'s ability to communicate with the
//         data source.
type Availability *AvailabilityType

// AxisCouplingValueType is Value is indeterminate
type AxisCouplingValueType string

// AxisCouplingType is Describes the way the axes will be associated to each other. This is
//         used in conjunction with {{block(CoupledAxis)}} to indicate the way they
//         are interacting.
type AxisCouplingType struct {
}

// AxisCoupling is Describes the way the axes will be associated to each other. This is
//         used in conjunction with {{block(CoupledAxis)}} to indicate the way they
//         are interacting.
type AxisCoupling *AxisCouplingType

// AxisFeedrateOverrideType is The value of a signal or calculation issued to adjust the feedrate of an
//         individual linear type axis.
type AxisFeedrateOverrideType struct {
	*FloatEventType
}

// AxisFeedrateOverride is The value of a signal or calculation issued to adjust the feedrate of an
//         individual linear type axis.
type AxisFeedrateOverride *AxisFeedrateOverrideType

// AxisInterlockValueType is Value is indeterminate
type AxisInterlockValueType string

// AxisInterlockType is An indicator of the state of the axis lockout function when power has
//         been removed and the axis is allowed to move freely.
type AxisInterlockType struct {
}

// AxisInterlock is An indicator of the state of the axis lockout function when power has
//         been removed and the axis is allowed to move freely.
type AxisInterlock *AxisInterlockType

// AxisStateValueType is Value is indeterminate
type AxisStateValueType string

// AxisStateType is An indicator of the controlled state of a {{block(Linear)}} or
//         {{block(Rotary)}} component representing an axis.
type AxisStateType struct {
}

// AxisState is An indicator of the controlled state of a {{block(Linear)}} or
//         {{block(Rotary)}} component representing an axis.
type AxisState *AxisStateType

// BlockType is The line of code or command being executed by a {{block(Controller)}}
//         {{term(Structural Element)}}.
type BlockType struct {
	*StringEventType
}

// Block is The line of code or command being executed by a {{block(Controller)}}
//         {{term(Structural Element)}}.
type Block *BlockType

// BlockCountType is The total count of the number of blocks of program code that have been
//         executed since execution started.
type BlockCountType struct {
	*IntegerEventType
}

// BlockCount is The total count of the number of blocks of program code that have been
//         executed since execution started.
type BlockCount *BlockCountType

// ChuckInterlockValueType is Value is indeterminate
type ChuckInterlockValueType string

// ChuckInterlockType is An indication of the operational condition of the interlock function for
//         an electronically controller chuck.
type ChuckInterlockType struct {
}

// ChuckInterlock is An indication of the operational condition of the interlock function for
//         an electronically controller chuck.
type ChuckInterlock *ChuckInterlockType

// ChuckStateValueType is Value is indeterminate
type ChuckStateValueType string

// ChuckStateType is An indication of the operating state of a mechanism that holds a part or
//         stock material during a manufacturing process. It may also represent a
//         mechanism that holds any other mechanism in place within a piece of
//         equipment.
type ChuckStateType struct {
}

// ChuckState is An indication of the operating state of a mechanism that holds a part or
//         stock material during a manufacturing process. It may also represent a
//         mechanism that holds any other mechanism in place within a piece of
//         equipment.
type ChuckState *ChuckStateType

// CloseChuckType is Service to close a chuck.
type CloseChuckType struct {
	*StringEventType
}

// CloseChuck is Service to close a chuck.
type CloseChuck *CloseChuckType

// CloseDoorType is Service to close a door.
type CloseDoorType struct {
	*StringEventType
}

// CloseDoor is Service to close a door.
type CloseDoor *CloseDoorType

// CodeType is **DEPRECATED** in *Version 1.1*. The programmatic code being executed.
type CodeType struct {
	*StringEventType
}

// Code is **DEPRECATED** in *Version 1.1*. The programmatic code being executed.
type Code *CodeType

// CompositionStateType is An indication of the operating condition of a mechanism represented by a
//         {{block(Composition)}} type element.
type CompositionStateType struct {
	*StringEventType
}

// CompositionState is An indication of the operating condition of a mechanism represented by a
//         {{block(Composition)}} type element.
type CompositionState *CompositionStateType

// ControllerModeValueType is Value is indeterminate
type ControllerModeValueType string

// ControllerModeType is The current operating mode of the {{block(Controller)}} component.
type ControllerModeType struct {
}

// ControllerMode is The current operating mode of the {{block(Controller)}} component.
type ControllerMode *ControllerModeType

// ControllerModeOverrideValueType is Value is indeterminate
type ControllerModeOverrideValueType string

// ControllerModeOverrideType is A setting or operator selection that changes the behavior of a piece of
//         equipment.
type ControllerModeOverrideType struct {
}

// ControllerModeOverride is A setting or operator selection that changes the behavior of a piece of
//         equipment.
type ControllerModeOverride *ControllerModeOverrideType

// CoupledAxesType is Refers to the set of associated axes.
type CoupledAxesType struct {
	*StringEventType
}

// CoupledAxes is Refers to the set of associated axes.
type CoupledAxes *CoupledAxesType

// DateCodeType is The time and date code associated with a material or other physical
//         item. {{block(DATE_CODE)}} **MUST** be reported in ISO 8601 format.
type DateCodeType struct {
	*StringEventType
}

// DateCode is The time and date code associated with a material or other physical
//         item. {{block(DATE_CODE)}} **MUST** be reported in ISO 8601 format.
type DateCode *DateCodeType

// DeviceUuidType is The identifier of another piece of equipment that is temporarily
//         associated with a component of this piece of equipment to perform a
//         particular function.
type DeviceUuidType struct {
	*StringEventType
}

// DeviceUuid is The identifier of another piece of equipment that is temporarily
//         associated with a component of this piece of equipment to perform a
//         particular function.
type DeviceUuid *DeviceUuidType

// DirectionType is An indication of a fault associated with the direction of motion of a
//         {{term(Structural Element)}}.
type DirectionType struct {
	*StringEventType
}

// Direction is An indication of a fault associated with the direction of motion of a
//         {{term(Structural Element)}}.
type Direction *DirectionType

// DoorStateValueType is Value is indeterminate
type DoorStateValueType string

// DoorStateType is The operational state of a {{block(Door)}} type component or composition
//         element.
type DoorStateType struct {
}

// DoorState is The operational state of a {{block(Door)}} type component or composition
//         element.
type DoorState *DoorStateType

// EmergencyStopValueType is Value is indeterminate
type EmergencyStopValueType string

// EmergencyStopType is The current state of the emergency stop signal for a piece of equipment,
//         controller path, or any other component or subsystem of a piece of
//         equipment.
type EmergencyStopType struct {
}

// EmergencyStop is The current state of the emergency stop signal for a piece of equipment,
//         controller path, or any other component or subsystem of a piece of
//         equipment.
type EmergencyStop *EmergencyStopType

// EndOfBarValueType is Value is indeterminate
type EndOfBarValueType string

// EndOfBarType is An indication that the end of a piece of bar stock has been reached.
type EndOfBarType struct {
}

// EndOfBar is An indication that the end of a piece of bar stock has been reached.
type EndOfBar *EndOfBarType

// EquipmentModeValueType is Value is indeterminate
type EquipmentModeValueType string

// EquipmentModeType is An indication that a piece of equipment, or a sub-part of a piece of
//         equipment, is performing specific types of activities.
type EquipmentModeType struct {
}

// EquipmentMode is An indication that a piece of equipment, or a sub-part of a piece of
//         equipment, is performing specific types of activities.
type EquipmentMode *EquipmentModeType

// ExecutionValueType is Value is indeterminate
type ExecutionValueType string

// ExecutionType is The execution status of the {{block(Component)}}.
type ExecutionType struct {
}

// Execution is The execution status of the {{block(Component)}}.
type Execution *ExecutionType

// FunctionalModeValueType is Value is indeterminate
type FunctionalModeValueType string

// FunctionalModeType is The current intended production status of the device or component.
type FunctionalModeType struct {
}

// FunctionalMode is The current intended production status of the device or component.
type FunctionalMode *FunctionalModeType

// HardnessType is The measurement of the hardness of a material.
type HardnessType struct {
	*FloatEventType
}

// Hardness is The measurement of the hardness of a material.
type Hardness *HardnessType

// InterfaceStateValueType is Value is indeterminate
type InterfaceStateValueType string

// InterfaceStateType is An indication of the operation condition of an {{block(Interface)}}
//         component.
type InterfaceStateType struct {
}

// InterfaceState is An indication of the operation condition of an {{block(Interface)}}
//         component.
type InterfaceState *InterfaceStateType

// LineType is **DEPRECATED** in *Version 1.4.0*. The current line of code being
//         executed.
type LineType struct {
	*StringEventType
}

// Line is **DEPRECATED** in *Version 1.4.0*. The current line of code being
//         executed.
type Line *LineType

// LineLabelType is An optional identifier for a {{block(Block)}} of code in a
//         {{block(Program)}}.
type LineLabelType struct {
	*StringEventType
}

// LineLabel is An optional identifier for a {{block(Block)}} of code in a
//         {{block(Program)}}.
type LineLabel *LineLabelType

// LineNumberType is A reference to the position of a block of program code within a control
//         program.
type LineNumberType struct {
	*IntegerEventType
}

// LineNumber is A reference to the position of a block of program code within a control
//         program.
type LineNumber *LineNumberType

// MaterialType is {{block(Material)}} provides information about materials or other items
//         consumed or used by the piece of equipment for production of parts,
//         materials, or other types of goods.
type MaterialType struct {
	*StringEventType
}

// Material is {{block(Material)}} provides information about materials or other items
//         consumed or used by the piece of equipment for production of parts,
//         materials, or other types of goods.
type Material *MaterialType

// MaterialChangeType is Service to change the type of material or product being loaded or fed to
//         a piece of equipment.
type MaterialChangeType struct {
	*StringEventType
}

// MaterialChange is Service to change the type of material or product being loaded or fed to
//         a piece of equipment.
type MaterialChange *MaterialChangeType

// MaterialFeedType is Service to advance material or feed product to a piece of equipment from
//         a continuous or bulk source.
type MaterialFeedType struct {
	*StringEventType
}

// MaterialFeed is Service to advance material or feed product to a piece of equipment from
//         a continuous or bulk source.
type MaterialFeed *MaterialFeedType

// MaterialLayerType is Identifies the layers of material applied to a part or product as part
//         of an additive manufacturing process.
type MaterialLayerType struct {
	*IntegerEventType
}

// MaterialLayer is Identifies the layers of material applied to a part or product as part
//         of an additive manufacturing process.
type MaterialLayer *MaterialLayerType

// MaterialLoadType is Service to load a piece of material or product.
type MaterialLoadType struct {
	*StringEventType
}

// MaterialLoad is Service to load a piece of material or product.
type MaterialLoad *MaterialLoadType

// MaterialRetractType is Service to remove or retract material or product.
type MaterialRetractType struct {
	*StringEventType
}

// MaterialRetract is Service to remove or retract material or product.
type MaterialRetract *MaterialRetractType

// MaterialUnloadType is Service to unload a piece of material or product.
type MaterialUnloadType struct {
	*StringEventType
}

// MaterialUnload is Service to unload a piece of material or product.
type MaterialUnload *MaterialUnloadType

// MessageType is A communication in writing, in speech, or by signals.
type MessageType struct {
	*StringEventType
}

// Message is A communication in writing, in speech, or by signals.
type Message *MessageType

// OpenChuckType is Service to open a chuck.
type OpenChuckType struct {
	*StringEventType
}

// OpenChuck is Service to open a chuck.
type OpenChuck *OpenChuckType

// OpenDoorType is Service to open a door.
type OpenDoorType struct {
	*StringEventType
}

// OpenDoor is Service to open a door.
type OpenDoor *OpenDoorType

// OperatorIdType is The identifier of the person currently responsible for operating the
//         piece of equipment.
type OperatorIdType struct {
	*StringEventType
}

// OperatorId is The identifier of the person currently responsible for operating the
//         piece of equipment.
type OperatorId *OperatorIdType

// PalletIdType is The identifier for a pallet.
type PalletIdType struct {
	*StringEventType
}

// PalletId is The identifier for a pallet.
type PalletId *PalletIdType

// PartChangeType is Service to change the part or product associated with a piece of
//         equipment to a different part or product.
type PartChangeType struct {
	*StringEventType
}

// PartChange is Service to change the part or product associated with a piece of
//         equipment to a different part or product.
type PartChange *PartChangeType

// PartCountType is The aggregate count of parts.
type PartCountType struct {
	*FloatEventType
}

// PartCount is The aggregate count of parts.
type PartCount *PartCountType

// PartDetectValueType is Value is indeterminate
type PartDetectValueType string

// PartDetectType is An indication designating whether a part or work piece has been detected
//         or is present.
type PartDetectType struct {
}

// PartDetect is An indication designating whether a part or work piece has been detected
//         or is present.
type PartDetect *PartDetectType

// PartIdType is An identifier of a part in a manufacturing operation.
type PartIdType struct {
	*StringEventType
}

// PartId is An identifier of a part in a manufacturing operation.
type PartId *PartIdType

// PartNumberType is **DEPRECATED** in *Version 1.7*. {{block(PartNumber)}} is now a
//         `subType` of {{block(PartKindId)}}. An identifier of a part or product
//         moving through the manufacturing process.
type PartNumberType struct {
	*StringEventType
}

// PartNumber is **DEPRECATED** in *Version 1.7*. {{block(PartNumber)}} is now a
//         `subType` of {{block(PartKindId)}}. An identifier of a part or product
//         moving through the manufacturing process.
type PartNumber *PartNumberType

// PathFeedrateOverrideType is The value of a signal or calculation issued to adjust the feedrate for
//         the axes associated with a {{block(Path)}} component that may represent
//         a single axis or the coordinated movement of multiple axes.
type PathFeedrateOverrideType struct {
	*FloatEventType
}

// PathFeedrateOverride is The value of a signal or calculation issued to adjust the feedrate for
//         the axes associated with a {{block(Path)}} component that may represent
//         a single axis or the coordinated movement of multiple axes.
type PathFeedrateOverride *PathFeedrateOverrideType

// PathModeValueType is Value is indeterminate
type PathModeValueType string

// PathModeType is Describes the operational relationship between a {{block(Path)}}
//         {{term(Structural Element)}} and another {{block(Path)}}
//         {{term(Structural Element)}} for pieces of equipment comprised of
//         multiple logical groupings of controlled axes or other logical
//         operations.
type PathModeType struct {
}

// PathMode is Describes the operational relationship between a {{block(Path)}}
//         {{term(Structural Element)}} and another {{block(Path)}}
//         {{term(Structural Element)}} for pieces of equipment comprised of
//         multiple logical groupings of controlled axes or other logical
//         operations.
type PathMode *PathModeType

// PowerStateValueType is Value is indeterminate
type PowerStateValueType string

// PowerStateType is The indication of the status of the source of energy for a
//         {{term(Structural Element)}} to allow it to perform its intended
//         function or the state of an enabling signal providing permission for the
//         {{term(Structural Element)}} to perform its functions.
type PowerStateType struct {
}

// PowerState is The indication of the status of the source of energy for a
//         {{term(Structural Element)}} to allow it to perform its intended
//         function or the state of an enabling signal providing permission for the
//         {{term(Structural Element)}} to perform its functions.
type PowerState *PowerStateType

// PowerStatusType is **DEPRECATED** in *Version 1.1.0*. The `ON` or `OFF` status of the
//         component.
type PowerStatusType struct {
	*StringEventType
}

// PowerStatus is **DEPRECATED** in *Version 1.1.0*. The `ON` or `OFF` status of the
//         component.
type PowerStatus *PowerStatusType

// ProcessTimeType is The time and date associated with an activity or event.
//         {{block(ProcessTime)}} **MUST** be reported in ISO 8601 format.
type ProcessTimeType struct {
	*StringEventType
}

// ProcessTime is The time and date associated with an activity or event.
//         {{block(ProcessTime)}} **MUST** be reported in ISO 8601 format.
type ProcessTime *ProcessTimeType

// ProgramType is The name of the logic or motion program being executed by the
//         {{block(Controller)}} component.
type ProgramType struct {
	*StringEventType
}

// Program is The name of the logic or motion program being executed by the
//         {{block(Controller)}} component.
type Program *ProgramType

// ProgramCommentType is A comment or non-executable statement in the control program.
type ProgramCommentType struct {
	*StringEventType
}

// ProgramComment is A comment or non-executable statement in the control program.
type ProgramComment *ProgramCommentType

// ProgramEditValueType is Value is indeterminate
type ProgramEditValueType string

// ProgramEditType is An indication of the status of the {{block(Controller)}} components
//         program editing mode. On many controls, a program can be edited while
//         another program is currently being executed.
type ProgramEditType struct {
}

// ProgramEdit is An indication of the status of the {{block(Controller)}} components
//         program editing mode. On many controls, a program can be edited while
//         another program is currently being executed.
type ProgramEdit *ProgramEditType

// ProgramEditNameType is The name of the program being edited. This is used in conjunction with
//         {{block(ProgramEdit)}} when in `ACTIVE` state.
type ProgramEditNameType struct {
	*StringEventType
}

// ProgramEditName is The name of the program being edited. This is used in conjunction with
//         {{block(ProgramEdit)}} when in `ACTIVE` state.
type ProgramEditName *ProgramEditNameType

// ProgramHeaderType is The non-executable header section of the control program.
type ProgramHeaderType struct {
	*StringEventType
}

// ProgramHeader is The non-executable header section of the control program.
type ProgramHeader *ProgramHeaderType

// ProgramLocationType is The Uniform Resource Identifier (URI) for the source file associated
//         with {{block(Program)}}.
type ProgramLocationType struct {
	*StringEventType
}

// ProgramLocation is The Uniform Resource Identifier (URI) for the source file associated
//         with {{block(Program)}}.
type ProgramLocation *ProgramLocationTypeType

// ProgramLocationTypeType is Defines whether the logic or motion program defined by
//         {{block(Program)}} is being executed from the local memory of the
//         controller or from an outside source.
type ProgramLocationTypeType struct {
	*StringEventType
}

// ProgramNestLevelType is An indication of the nesting level within a control program that is
//         associated with the code or instructions that is currently being
//         executed. If an Initial Value is not defined, the nesting level
//         associated with the highest or initial nesting level of the program
//         **MUST** default to zero (0).
type ProgramNestLevelType struct {
	*IntegerEventType
}

// ProgramNestLevel is An indication of the nesting level within a control program that is
//         associated with the code or instructions that is currently being
//         executed. If an Initial Value is not defined, the nesting level
//         associated with the highest or initial nesting level of the program
//         **MUST** default to zero (0).
type ProgramNestLevel *ProgramNestLevelType

// RotaryModeValueType is Value is indeterminate
type RotaryModeValueType string

// RotaryModeType is The current operating mode for a {{block(Rotary)}} type axis.
type RotaryModeType struct {
}

// RotaryMode is The current operating mode for a {{block(Rotary)}} type axis.
type RotaryMode *RotaryModeType

// RotaryVelocityOverrideType is The value of a command issued to adjust the programmed velocity for a
//         {{block(Rotary)}} type axis. This command represents a percentage change
//         to the velocity calculated by a logic or motion program or set by a
//         switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideType struct {
	*FloatEventType
}

// RotaryVelocityOverride is The value of a command issued to adjust the programmed velocity for a
//         {{block(Rotary)}} type axis. This command represents a percentage change
//         to the velocity calculated by a logic or motion program or set by a
//         switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverride *RotaryVelocityOverrideType

// SerialNumberType is The serial number associated with a {{block(Component)}},
//         {{block(Asset)}}, or {{block(Device)}}.
type SerialNumberType struct {
	*StringEventType
}

// SerialNumber is The serial number associated with a {{block(Component)}},
//         {{block(Asset)}}, or {{block(Device)}}.
type SerialNumber *SerialNumberType

// SpindleInterlockValueType is Value is indeterminate
type SpindleInterlockValueType string

// SpindleInterlockType is An indication of the status of the spindle for a piece of equipment when
//         power has been removed and it is free to rotate.
type SpindleInterlockType struct {
}

// SpindleInterlock is An indication of the status of the spindle for a piece of equipment when
//         power has been removed and it is free to rotate.
type SpindleInterlock *SpindleInterlockType

// ToolAssetIdType is The identifier of an individual tool asset.
type ToolAssetIdType struct {
	*StringEventType
}

// ToolAssetId is The identifier of an individual tool asset.
type ToolAssetId *ToolAssetIdType

// ToolGroupType is An identifier for the tool group associated with a specific tool.
//         Commonly used to designate spare tools.
type ToolGroupType struct {
	*StringEventType
}

// ToolGroup is An identifier for the tool group associated with a specific tool.
//         Commonly used to designate spare tools.
type ToolGroup *ToolGroupType

// ToolIdType is **DEPRECATED** in *Version 1.2.0*. See {{block(ToolAssetId)}}. The
//         identifier of the tool currently in use for a given `Path`.
type ToolIdType struct {
	*StringEventType
}

// ToolId is **DEPRECATED** in *Version 1.2.0*. See {{block(ToolAssetId)}}. The
//         identifier of the tool currently in use for a given `Path`.
type ToolId *ToolIdType

// ToolNumberType is The identifier assigned by the {{block(Controller)}} component to a
//         cutting tool when in use by a piece of equipment.
type ToolNumberType struct {
	*StringEventType
}

// ToolNumber is The identifier assigned by the {{block(Controller)}} component to a
//         cutting tool when in use by a piece of equipment.
type ToolNumber *ToolNumberType

// ToolOffsetType is A reference to the tool offset variables applied to the active cutting
//         tool associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type ToolOffsetType struct {
	*FloatEventType
}

// ToolOffset is A reference to the tool offset variables applied to the active cutting
//         tool associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type ToolOffset *ToolOffsetType

// UserType is The identifier of the person currently responsible for operating the
//         piece of equipment.
type UserType struct {
	*StringEventType
}

// User is The identifier of the person currently responsible for operating the
//         piece of equipment.
type User *UserType

// VariableType is A data value whose meaning may change over time due to changes in the
//         opertion of a piece of equipment or the process being executed on that
//         piece of equipment.
type VariableType struct {
	*StringEventType
}

// Variable is A data value whose meaning may change over time due to changes in the
//         opertion of a piece of equipment or the process being executed on that
//         piece of equipment.
type Variable *VariableType

// WaitStateValueType is Value is indeterminate
type WaitStateValueType string

// WaitStateType is An indication of the reason that {{block(Execution)}} is reporting a
//         value of `WAIT`.
type WaitStateType struct {
}

// WaitState is An indication of the reason that {{block(Execution)}} is reporting a
//         value of `WAIT`.
type WaitState *WaitStateType

// WireType is A string like piece or filament of relatively rigid or flexible material
//         provided in a variety of diameters.
type WireType struct {
	*StringEventType
}

// Wire is A string like piece or filament of relatively rigid or flexible material
//         provided in a variety of diameters.
type Wire *WireType

// WorkholdingIdType is The identifier for the current workholding or part clamp in use by a
//         piece of equipment.
type WorkholdingIdType struct {
	*StringEventType
}

// WorkholdingId is The identifier for the current workholding or part clamp in use by a
//         piece of equipment.
type WorkholdingId *WorkholdingIdType

// WorkOffsetType is A reference to the offset variables for a work piece or part associated
//         with a {{block(Path)}} in a {{block(Controller)}} type component.
type WorkOffsetType struct {
	*FloatEventType
}

// WorkOffset is A reference to the offset variables for a work piece or part associated
//         with a {{block(Path)}} in a {{block(Controller)}} type component.
type WorkOffset *WorkOffsetType

// OperatingSystemType is The Operating System of a component.
type OperatingSystemType struct {
	*StringEventType
}

// OperatingSystem is The Operating System of a component.
type OperatingSystem *OperatingSystemType

// FirmwareType is The embedded software of a component.
type FirmwareType struct {
	*StringEventType
}

// Firmware is The embedded software of a component.
type Firmware *FirmwareType

// ApplicationType is Software or a program that is specific to the solution of an application
//         problem. {{cite(ISO/IEC 20944-1:2013)}}
type ApplicationType struct {
	*StringEventType
}

// Application is Software or a program that is specific to the solution of an application
//         problem. {{cite(ISO/IEC 20944-1:2013)}}
type Application *ApplicationType

// LibraryType is The software library on a component.
type LibraryType struct {
	*StringEventType
}

// Library is The software library on a component.
type Library *LibraryType

// HardwareType is An indication of a fault associated with the hardware subsystem of the
//         {{term(Structural Element)}}.
type HardwareType struct {
	*StringEventType
}

// Hardware is An indication of a fault associated with the hardware subsystem of the
//         {{term(Structural Element)}}.
type Hardware *HardwareType

// NetworkType is Network details of a component.
type NetworkType struct {
	*StringEventType
}

// Network is Network details of a component.
type Network *NetworkType

// RotationType is A three space angular rotation relative to a coordinate system.
type RotationType struct {
	*StringEventType
}

// Rotation is A three space angular rotation relative to a coordinate system.
type Rotation *RotationType

// TranslationType is A three space linear translation relative to a coordinate system.
type TranslationType struct {
	*StringEventType
}

// Translation is A three space linear translation relative to a coordinate system.
type Translation *TranslationType

// ProcessKindIdType is Identifier given to link the individual occurrence to a class of
//         processes or process definition.
type ProcessKindIdType struct {
	*StringEventType
}

// ProcessKindId is Identifier given to link the individual occurrence to a class of
//         processes or process definition.
type ProcessKindId *ProcessKindIdType

// PartStatusValueType is Value is indeterminate
type PartStatusValueType string

// PartStatusType is State or condition of a part. If unique identifier is given, part status
//         is for that individual. If group identifier is given without a unique
//         identifier, then the status is assumed to be for the whole group.
type PartStatusType struct {
}

// PartStatus is State or condition of a part. If unique identifier is given, part status
//         is for that individual. If group identifier is given without a unique
//         identifier, then the status is assumed to be for the whole group.
type PartStatus *PartStatusType

// AlarmLimitType is A set of limits used to trigger warning or alarm indicators.
type AlarmLimitType struct {
	*StringEventType
}

// AlarmLimit is A set of limits used to trigger warning or alarm indicators.
type AlarmLimit *AlarmLimitType

// ProcessAggregateIdType is Identifier given to link the individual occurrence to a group of related
//         occurrences, such as a process step in a process plan.
type ProcessAggregateIdType struct {
	*StringEventType
}

// ProcessAggregateId is Identifier given to link the individual occurrence to a group of related
//         occurrences, such as a process step in a process plan.
type ProcessAggregateId *ProcessAggregateIdType

// PartKindIdType is Identifier given to link the individual occurrence to a class of parts,
//         typically distinguished by a particular part design. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartKindIdType struct {
	*StringEventType
}

// PartKindId is Identifier given to link the individual occurrence to a class of parts,
//         typically distinguished by a particular part design. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartKindId *PartKindIdType

// AdapterURIType is The {{term(URI)}} of the {{term(Adapter)}}.
type AdapterURIType struct {
	*StringEventType
}

// AdapterURI is The {{term(URI)}} of the {{term(Adapter)}}.
type AdapterURI *AdapterURIType

// DeviceRemovedType is An {{block(Event)}} that provides the {{term(UUID)}} of a device removed
//         from an {{term(MTConnect Agent)}}.
type DeviceRemovedType struct {
	*StringEventType
}

// DeviceRemoved is An {{block(Event)}} that provides the {{term(UUID)}} of a device removed
//         from an {{term(MTConnect Agent)}}.
type DeviceRemoved *DeviceRemovedType

// DeviceChangedType is An {{block(Event)}} that provides the {{term(UUID)}} of the device whose
//         {{term(Metadata)}} has changed.
type DeviceChangedType struct {
	*StringEventType
}

// DeviceChanged is An {{block(Event)}} that provides the {{term(UUID)}} of the device whose
//         {{term(Metadata)}} has changed.
type DeviceChanged *DeviceChangedType

// SpecificationLimitType is A set of limits defining a range of values designating acceptable
//         performance for a variable.
type SpecificationLimitType struct {
	*StringEventType
}

// SpecificationLimit is A set of limits defining a range of values designating acceptable
//         performance for a variable.
type SpecificationLimit *SpecificationLimitType

// ConnectionStatusValueType is Value is indeterminate
type ConnectionStatusValueType string

// ConnectionStatusType is The status of the connection between an {{term(Adapter)}} and an
//         {{term(Agent)}}.
type ConnectionStatusType struct {
}

// ConnectionStatus is The status of the connection between an {{term(Adapter)}} and an
//         {{term(Agent)}}.
type ConnectionStatus *ConnectionStatusType

// AdapterSoftwareVersionType is The originator’s software version of the {{term(Adapter)}}.
type AdapterSoftwareVersionType struct {
	*StringEventType
}

// AdapterSoftwareVersion is The originator’s software version of the {{term(Adapter)}}.
type AdapterSoftwareVersion *AdapterSoftwareVersionType

// SensorAttachmentType is The reference version of the MTConnect Standard supported by the
//         {{term(Adapter)}} .
type SensorAttachmentType struct {
	*StringEventType
}

// SensorAttachment is The reference version of the MTConnect Standard supported by the
//         {{term(Adapter)}} .
type SensorAttachment *SensorAttachmentType

// ControlLimitType is A set of limits used to indicate whether a process variable is stable
//         and in control.
type ControlLimitType struct {
	*StringEventType
}

// ControlLimit is A set of limits used to indicate whether a process variable is stable
//         and in control.
type ControlLimit *ControlLimitType

// DeviceAddedType is An {{block(Event)}} that provides the {{term(UUID)}} of new device added
//         to an {{term(MTConnect Agent)}}.
type DeviceAddedType struct {
	*StringEventType
}

// DeviceAdded is An {{block(Event)}} that provides the {{term(UUID)}} of new device added
//         to an {{term(MTConnect Agent)}}.
type DeviceAdded *DeviceAddedType

// MTConnectVersionType is The reference version of the MTConnect Standard supported by the
//         {{term(Adapter)}} .
type MTConnectVersionType struct {
	*StringEventType
}

// MTConnectVersion is The reference version of the MTConnect Standard supported by the
//         {{term(Adapter)}} .
type MTConnectVersion *MTConnectVersionType

// ProcessOccurrenceIdType is An identifier of a process being executed by the device.
type ProcessOccurrenceIdType struct {
	*StringEventType
}

// ProcessOccurrenceId is An identifier of a process being executed by the device.
type ProcessOccurrenceId *ProcessOccurrenceIdType

// PartGroupIdType is Identifier given to a collection of individual parts. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartGroupIdType struct {
	*StringEventType
}

// PartGroupId is Identifier given to a collection of individual parts. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartGroupId *PartGroupIdType

// PartUniqueIdType is Identifier given to a distinguishable, individual part. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartUniqueIdType struct {
	*StringEventType
}

// PartUniqueId is Identifier given to a distinguishable, individual part. If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartUniqueId *PartUniqueIdType

// LoadCountType is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, load materials, parts, or other items.
type LoadCountType struct {
	*StringEventType
}

// LoadCount is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, load materials, parts, or other items.
type LoadCount *LoadCountType

// UnloadCountType is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, unload materials, parts, or other items.
type UnloadCountType struct {
	*StringEventType
}

// UnloadCount is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, unload materials, parts, or other items.
type UnloadCount *UnloadCountType

// TransferCountType is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, transfer materials, parts, or other items from
//         one location to another.
type TransferCountType struct {
	*StringEventType
}

// TransferCount is Accumulation of the number of times an operation has attempted to, or is
//         planned to attempt to, transfer materials, parts, or other items from
//         one location to another.
type TransferCount *TransferCountType

// ActivationCountType is Accumulation of the number of times a function has attempted to, or is
//         planned to attempt to, activate or be performed.
type ActivationCountType struct {
	*StringEventType
}

// ActivationCount is Accumulation of the number of times a function has attempted to, or is
//         planned to attempt to, activate or be performed.
type ActivationCount *ActivationCountType

// DeactivationCountType is Accumulation of the number of times a function has attempted to, or is
//         planned to attempt to, de-activate or cease.
type DeactivationCountType struct {
	*StringEventType
}

// DeactivationCount is Accumulation of the number of times a function has attempted to, or is
//         planned to attempt to, de-activate or cease.
type DeactivationCount *DeactivationCountType

// CycleCountType is Accumulation of the number of times a cyclic function has attempted to,
//         or is planned to attempt to execute.
type CycleCountType struct {
	*StringEventType
}

// CycleCount is Accumulation of the number of times a cyclic function has attempted to,
//         or is planned to attempt to execute.
type CycleCount *CycleCountType

// ValveStateValueType is Value is indeterminate
type ValveStateValueType string

// ValveStateType is The state of a valve is one of open, closed, or transitioning between
//         the states.
type ValveStateType struct {
}

// ValveState is The state of a valve is one of open, closed, or transitioning between
//         the states.
type ValveState *ValveStateType

// LockStateValueType is Value is indeterminate
type LockStateValueType string

// LockStateType is The state of a valve is one of open, closed, or transitioning between
//         the states.
type LockStateType struct {
}

// LockState is The state of a valve is one of open, closed, or transitioning between
//         the states.
type LockState *LockStateType

// PartProcessingStateValueType is Value is indeterminate
type PartProcessingStateValueType string

// PartProcessingStateType is The particular condition of the part occurrence at a specific time.
type PartProcessingStateType struct {
}

// PartProcessingState is The particular condition of the part occurrence at a specific time.
type PartProcessingState *PartProcessingStateType

// ProcessStateValueType is Value is indeterminate
type ProcessStateValueType string

// ProcessStateType is The particular condition of the process occurrence at a specific time.
type ProcessStateType struct {
}

// ProcessState is The particular condition of the process occurrence at a specific time.
type ProcessState *ProcessStateType

// PartCountDiscreteType is Discrete of The aggregate count of parts.
type PartCountDiscreteType struct {
	*PartCountType
}

// PartCountDiscrete is Discrete of The aggregate count of parts.
type PartCountDiscrete *PartCountDiscreteType

// ToolIdDiscreteType is Discrete of **DEPRECATED** in *Version 1.2.0*. See
//         {{block(ToolAssetId)}}. The identifier of the tool currently in use for
//         a given `Path`.
type ToolIdDiscreteType struct {
	*ToolIdType
}

// ToolIdDiscrete is Discrete of **DEPRECATED** in *Version 1.2.0*. See
//         {{block(ToolAssetId)}}. The identifier of the tool currently in use for
//         a given `Path`.
type ToolIdDiscrete *ToolIdDiscreteType

// ToolNumberDiscreteType is Discrete of The identifier assigned by the {{block(Controller)}}
//         component to a cutting tool when in use by a piece of equipment.
type ToolNumberDiscreteType struct {
	*ToolNumberType
}

// ToolNumberDiscrete is Discrete of The identifier assigned by the {{block(Controller)}}
//         component to a cutting tool when in use by a piece of equipment.
type ToolNumberDiscrete *ToolNumberDiscreteType

// ToolAssetIdDiscreteType is Discrete of The identifier of an individual tool asset.
type ToolAssetIdDiscreteType struct {
	*ToolAssetIdType
}

// ToolAssetIdDiscrete is Discrete of The identifier of an individual tool asset.
type ToolAssetIdDiscrete *ToolAssetIdDiscreteType

// PalletIdDiscreteType is Discrete of The identifier for a pallet.
type PalletIdDiscreteType struct {
	*PalletIdType
}

// PalletIdDiscrete is Discrete of The identifier for a pallet.
type PalletIdDiscrete *PalletIdDiscreteType

// MessageDiscreteType is Discrete of A communication in writing, in speech, or by signals.
type MessageDiscreteType struct {
	*MessageType
}

// MessageDiscrete is Discrete of A communication in writing, in speech, or by signals.
type MessageDiscrete *MessageDiscreteType

// BlockDiscreteType is Discrete of The line of code or command being executed by a
//         {{block(Controller)}} {{term(Structural Element)}}.
type BlockDiscreteType struct {
	*BlockType
}

// BlockDiscrete is Discrete of The line of code or command being executed by a
//         {{block(Controller)}} {{term(Structural Element)}}.
type BlockDiscrete *BlockDiscreteType

// EntryType is See {{sect(TableEntry)}} for details on `Entry` element for
//         {{block(Table)}}.
type EntryType struct {
	KeyAttr     string `xml:"key,attr"`
	RemovedAttr bool   `xml:"removed,attr,omitempty"`
}

// Entry is See {{sect(TableEntry)}} for details on `Entry` element for
//         {{block(Table)}}.
type Entry *EntryType

// VariableEntryType is DataSet of A data value whose meaning may change over time due to
//         changes in the opertion of a piece of equipment or the process being
//         executed on that piece of equipment.
type VariableEntryType struct {
}

// VariableEntry is DataSet of A data value whose meaning may change over time due to
//         changes in the opertion of a piece of equipment or the process being
//         executed on that piece of equipment.
type VariableEntry *VariableEntryType

// VariableDataSetType is See {{sect(TableEntry)}} for details on `Entry` element for
//                 {{block(Table)}}.
type VariableDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*VariableEntryType `xml:"Entry"`
	*EventType
}

// VariableDataSet is DataSet of A data value whose meaning may change over time due to
//         changes in the opertion of a piece of equipment or the process being
//         executed on that piece of equipment.
type VariableDataSet *VariableDataSetType

// TableCellType is A cell of a table
type TableCellType struct {
	KeyAttr string `xml:"key,attr"`
}

// TableCell is A cell of a table
type TableCell *TableCellType

// TableEntryType is A {{term(key-value pair)}} published as part of a {{term(Table)}}
//         {{term(observation)}}. Note: Represented as {{block(Entry)}} in XML.
type TableEntryType struct {
	TableCell []*TableCellType `xml:"TableCell"`
	*EntryType
}

// TableEntry is A {{term(key-value pair)}} published as part of a {{term(Table)}}
//         {{term(observation)}}. Note: Represented as {{block(Entry)}} in XML.
type TableEntry *TableEntryType

// WorkOffsetTableEntryType is Constraints for Cell Values
type WorkOffsetTableEntryType struct {
	Cell []*WorkOffsetCellType `xml:"Cell"`
	*EntryType
}

// WorkOffsetTableEntry is Table Entry of A reference to the offset variables for a work piece or
//         part associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type WorkOffsetTableEntry *WorkOffsetTableEntryType

// WorkOffsetCellType is Cell of A reference to the offset variables for a work piece or part
//         associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type WorkOffsetCellType struct {
}

// WorkOffsetCell is Cell of A reference to the offset variables for a work piece or part
//         associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type WorkOffsetCell *WorkOffsetCellType

// WorkOffsetTableType is See {{sect(TableEntry)}} for details on `Entry` element for
//                 {{block(Table)}}.
type WorkOffsetTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*WorkOffsetTableEntryType `xml:"Entry"`
	*EventType
}

// WorkOffsetTable is Table of A reference to the offset variables for a work piece or part
//         associated with a {{block(Path)}} in a {{block(Controller)}} type
//         component.
type WorkOffsetTable *WorkOffsetTableType

// ToolOffsetTableEntryType is Constraints for Cell Values
type ToolOffsetTableEntryType struct {
	Cell []*ToolOffsetCellType `xml:"Cell"`
	*EntryType
}

// ToolOffsetTableEntry is Table Entry of A reference to the tool offset variables applied to the
//         active cutting tool associated with a {{block(Path)}} in a
//         {{block(Controller)}} type component.
type ToolOffsetTableEntry *ToolOffsetTableEntryType

// ToolOffsetCellType is Cell of A reference to the tool offset variables applied to the active
//         cutting tool associated with a {{block(Path)}} in a
//         {{block(Controller)}} type component.
type ToolOffsetCellType struct {
}

// ToolOffsetCell is Cell of A reference to the tool offset variables applied to the active
//         cutting tool associated with a {{block(Path)}} in a
//         {{block(Controller)}} type component.
type ToolOffsetCell *ToolOffsetCellType

// ToolOffsetTableType is See {{sect(TableEntry)}} for details on `Entry` element for
//                 {{block(Table)}}.
type ToolOffsetTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ToolOffsetTableEntryType `xml:"Entry"`
	*EventType
}

// ToolOffsetTable is Table of A reference to the tool offset variables applied to the active
//         cutting tool associated with a {{block(Path)}} in a
//         {{block(Controller)}} type component.
type ToolOffsetTable *ToolOffsetTableType

// ConditionDescriptionType is The description of the Condition
type ConditionDescriptionType string

// NativeSeverityType is The device's severity
type NativeSeverityType string

// QualifierType is The value is too low
type QualifierType string

// ConditionType is An indicator of the ability of a piece of equipment or
//         {{term(Component)}} to function to specification.
type ConditionType struct {
	ObservationType    *ObservationType
	TypeAttr           *DataItemEnumType       `xml:"type,attr"`
	NativeCodeAttr     string                  `xml:"nativeCode,attr,omitempty"`
	NativeSeverityAttr string                  `xml:"nativeSeverity,attr,omitempty"`
	QualifierAttr      string                  `xml:"qualifier,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	Value              string                  `xml:",chardata"`
}

// Condition is An indicator of the ability of a piece of equipment or
//         {{term(Component)}} to function to specification.
type Condition *ConditionType

// UnavailableType is The conditon can not be determined.
type UnavailableType struct {
	*ConditionType
}

// Unavailable is The conditon can not be determined.
type Unavailable *UnavailableType

// NormalType is {{block(Normal)}} indicates whether the value of the data is within an
//         expected range.
type NormalType struct {
	*ConditionType
}

// Normal is {{block(Normal)}} indicates whether the value of the data is within an
//         expected range.
type Normal *NormalType

// WarningType is {{block(Warning)}} indicates a possible unexpected situation because the
//         value is unexpected or out of tolerance for the data.
type WarningType struct {
	*ConditionType
}

// Warning is {{block(Warning)}} indicates a possible unexpected situation because the
//         value is unexpected or out of tolerance for the data.
type Warning *WarningType

// FaultType is {{block(Fault)}} indicates an unexpected situation because the value is
//         unexpected or out of tolerance for the data.
type FaultType struct {
	*ConditionType
}

// Fault is {{block(Fault)}} indicates an unexpected situation because the value is
//         unexpected or out of tolerance for the data.
type Fault *FaultType

// NativeNotifcationCodeType is DEPRECATED: An Notifcation code as defined by the component
type NativeNotifcationCodeType string

// NotifcationCodeType is Another Notifcation type
type NotifcationCodeType string

// AlarmStateType is The notification has been cleared
type AlarmStateType string

// SeverityType is This notification is for information purposes only
type SeverityType string

// AlarmType is **DEPRECATED:** Replaced with {{block(CONDITION)}} category data items
//         in Version 1.1.0.
type AlarmType struct {
	CodeAttr       string `xml:"code,attr"`
	SeverityAttr   string `xml:"severity,attr,omitempty"`
	StateAttr      string `xml:"state,attr,omitempty"`
	NativeCodeAttr string `xml:"nativeCode,attr"`
	*StringEventType
}

// Alarm is **DEPRECATED:** Replaced with {{block(CONDITION)}} category data items
//         in Version 1.1.0.
type Alarm *AlarmType

// InterfaceEventValuesType is The interface action has failed
type InterfaceEventValuesType string

// InterfaceEventType is An abstract interface event
type InterfaceEventType struct {
}

// InterfaceEvent is An abstract interface event
type InterfaceEvent *InterfaceEventType

// InterfaceStatesType is The interface is disabled
type InterfaceStatesType string
