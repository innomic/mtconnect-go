// Code generated by xgen. DO NOT EDIT.

package mtstreams

// MTConnectStreams is root entity of an {{term(MTConnectStreams Response Document)}} that
//         contains the {{term(Observation Information Model)}} of one or more
//         {{block(Device)}} entities.
//         ![MTConnectStreams](figures/MTConnectStreams.png
//         "MTConnectStreams"){: width="0.8"} > Note:
//         Additional properties of {{block(MTConnectStreams)}} **MAY** be defined
//         for schema and namespace declaration. See {{sect(Schema and Namespace
//         Declaration Information)}} for an {{term(XML)}} example.
type MTConnectStreams *MTConnectStreamsType

// SenderType is The sender of the message
type SenderType string

// CreationTimeType is The date and time the document was created
type CreationTimeType string

// SequenceType is A sequence number
type SequenceType int

// TestIndicatorType is A debugging flag for testing.
type TestIndicatorType bool

// InstanceIdType is The instance number of the agent, used for fault tolerance
type InstanceIdType int

// BufferSizeType is The size of the agents buffer
type BufferSizeType int

// TimestampType is The time the sample was reported
type TimestampType string

// OccurrenceTimeType is The time a sample occurred
type OccurrenceTimeType string

// VersionType is A version number
type VersionType string

// NameType is A short name for any element
type NameType string

// UuidType is A universally unique id that uniquely identifies the element for
//         it's entire life
type UuidType string

// SerialNumberAttrType is A serial number for a piece of equipment
type SerialNumberAttrType string

// ItemSourceType is The measurement source
type ItemSourceType string

// RateType is A sample rate in milliseconds per sample
type RateType float32

// ComponentIdType is The id of the component (maps to the id from probe)
type ComponentIdType string

// IDType is An identifier
type IDType string

// SignificantDigitsValueType is The number significant digits
type SignificantDigitsValueType int

// CompositionIdType is The item's reference to the Device model composition
type CompositionIdType string

// DurationTimeType is A length of time in seconds
type DurationTimeType float32

// RemovedType is A flag indicating the item has been removed
type RemovedType bool

// KeyType is The key for adata set
type KeyType string

// DeviceModelChangeTimeType is A timestamp in 8601 format of the last update of the Device information
//         for any device
type DeviceModelChangeTimeType string

// AssetIdType is The unique id of the asset
type AssetIdType string

// AssetAttrTypeType is An asset type
type AssetAttrTypeType string

// AssetBufferSizeType is The maximum number of assets
type AssetBufferSizeType int

// AssetCountAttrType is The number of assets
type AssetCountAttrType int

// FloatListValueType is Common floating point sample value
type FloatListValueType []float32

// ThreeSpaceValueType is A three dimensional value 'X Y Z' or 'A B C'
type ThreeSpaceValueType *FloatListValueType

// DescriptionTextType is A description
type DescriptionTextType string

// DataItemEnumExtType is Extended tyoe for The types of measurements available
type DataItemEnumExtType string

// DataItemEnumEnum is A user variable
type DataItemEnumEnum string

// DataItemEnumType is The types of measurements available
type DataItemEnumType struct {
	DataItemEnumExtType string
	DataItemEnumEnum    string
}

// DataItemSubEnumExtType is Extended tyoe for The sub-types for a measurement
type DataItemSubEnumExtType string

// DataItemSubEnumEnum is step of a discrete manufacturing process.
type DataItemSubEnumEnum string

// DataItemSubEnumType is The sub-types for a measurement
type DataItemSubEnumType struct {
	DataItemSubEnumExtType string
	DataItemSubEnumEnum    string
}

// DataItemStatisticsExtType is Extended tyoe for Statistical operations on data
type DataItemStatisticsExtType string

// DataItemStatisticsEnum is statistical Standard Deviation value calculated for the data item
//             during the calculation period.
type DataItemStatisticsEnum string

// DataItemStatisticsType is Statistical operations on data
type DataItemStatisticsType struct {
	DataItemStatisticsExtType string
	DataItemStatisticsEnum    string
}

// UnitsExtType is Extended tyoe for The units supported
type UnitsExtType string

// UnitsEnum is gram.
type UnitsEnum string

// UnitsType is The units supported
type UnitsType struct {
	UnitsExtType string
	UnitsEnum    string
}

// NativeUnitsExtType is Extended tyoe for The units supported for the source equipment that can
//         be converted into MTC Units.
type NativeUnitsExtType string

// NativeUnitsEnum is pascal per minute.
type NativeUnitsEnum string

// NativeUnitsType is The units supported for the source equipment that can be converted into
//         MTC Units.
type NativeUnitsType struct {
	NativeUnitsExtType string
	NativeUnitsEnum    string
}

// CoordinateSystemEnumType is coordinate system that represents the working area for a particular
//             workpiece whose origin is shifted within the `MACHINE` coordinate
//             system. If the `WORK` coordinates are not currently defined in the
//             piece of equipment, the `MACHINE` coordinates will be used.
type CoordinateSystemEnumType string

// DataItemResetValueExtType is Extended tyoe for The reset intervals
type DataItemResetValueExtType string

// DataItemResetValueEnum is {{term(observation)}} of the {{block(DataItem)}} is to be reset at
//             the end of a 7-day period.
type DataItemResetValueEnum string

// DataItemResetValueType is The reset intervals
type DataItemResetValueType struct {
	DataItemResetValueExtType string
	DataItemResetValueEnum    string
}

// HeaderAttributesType is A timestamp in 8601 format of the last update of the Device
//           information for any device
type HeaderAttributesType struct {
	VersionAttr               string `xml:"version,attr"`
	CreationTimeAttr          string `xml:"creationTime,attr"`
	TestIndicatorAttr         bool   `xml:"testIndicator,attr,omitempty"`
	InstanceIdAttr            int    `xml:"instanceId,attr"`
	SenderAttr                string `xml:"sender,attr"`
	DeviceModelChangeTimeAttr string `xml:"deviceModelChangeTime,attr"`
}

// StationType is The station id for this device
type StationType string

// HeaderType is provides information from an {{term(agent)}} defining version
//         information, storage capacity, and parameters associated with the data
//         management within the {{term(agent)}}.
type HeaderType struct {
	HeaderAttributesType *HeaderAttributesType
	BufferSizeAttr       int    `xml:"bufferSize,attr"`
	NextSequenceAttr     int    `xml:"nextSequence,attr"`
	LastSequenceAttr     int    `xml:"lastSequence,attr"`
	FirstSequenceAttr    int    `xml:"firstSequence,attr"`
	Value                string `xml:",chardata"`
}

// MTConnectStreamsType is {{block(Streams)}} groups one or more {{block(DeviceStream)}}
//             entities. See {{package(Observation Information Model)}} for more
//             detail.
type MTConnectStreamsType struct {
	Header  *HeaderType  `xml:"Header"`
	Streams *StreamsType `xml:"Streams"`
}

// ResultValueType is An events data
type ResultValueType string

// DataItemIdType is The item's unique ID that references the data item id from probe
type DataItemIdType string

// NativeCodeType is An Condition code as defined by the component
type NativeCodeType string

// StreamsType is Description
type StreamsType struct {
	DeviceStream []*DeviceStreamType `xml:"DeviceStream"`
}

// DeviceStreamType is {{block(ComponentStream)}} {{termplural(organize)}} the
//             {{block(Observation)}} entities associated with the
//             {{block(Component)}}. See {{package(Observation Information Model)}}
//             for the {{block(ComponentStream)}} model. > Note 1 to entry: In
//             the {{term(XML)}} representation, {{block(ComponentStream)}}
//             entities **MUST NOT** appear in the {{term(MTConnectDevices Response
//             Document)}}. > Note 2 to entry: In the {{term(XML)}}
//             representation, {{block(ComponentStream)}} entities **MUST** appear
//             only in the {{term(MTConnectStreams Response Document)}}.
type DeviceStreamType struct {
	NameAttr        string                 `xml:"name,attr"`
	UuidAttr        string                 `xml:"uuid,attr"`
	ComponentStream []*ComponentStreamType `xml:"ComponentStream"`
}

// ComponentStreamType is Description
type ComponentStreamType struct {
	ComponentIdAttr string             `xml:"componentId,attr"`
	NameAttr        string             `xml:"name,attr,omitempty"`
	NativeNameAttr  string             `xml:"nativeName,attr,omitempty"`
	ComponentAttr   string             `xml:"component,attr"`
	UuidAttr        string             `xml:"uuid,attr,omitempty"`
	Samples         *SamplesType       `xml:"Samples"`
	Events          *EventsType        `xml:"Events"`
	Condition       *ConditionListType `xml:"Condition"`
}

// SamplesType is {{block(Samples)}} groups one or more {{block(Sample)}} entities. See
//         {{sect(Sample)}}.
type SamplesType struct {
	Sample []*SampleType `xml:"Sample"`
}

// EventsType is {{block(Events)}} groups one or more {{block(Event)}} entities. See
//         {{sect(Event)}}.
type EventsType struct {
	Event []*EventType `xml:"Event"`
}

// ConditionListType is A collection of conditions
type ConditionListType struct {
	Condition []*ConditionType `xml:"Condition"`
}

// UnavailableValueType is Data is unavailable
type UnavailableValueType string

// ObservationType is The identifier of the sub-element this result is in reference to
type ObservationType struct {
	SequenceAttr      int                  `xml:"sequence,attr"`
	SubTypeAttr       *DataItemSubEnumType `xml:"subType,attr,omitempty"`
	TimestampAttr     string               `xml:"timestamp,attr"`
	NameAttr          string               `xml:"name,attr,omitempty"`
	DataItemIdAttr    string               `xml:"dataItemId,attr"`
	CompositionIdAttr string               `xml:"compositionId,attr,omitempty"`
}

// SampleRateType is The target rate a value can be sampled
type SampleRateType float32

// CountValueType is The number of items in the list
type CountValueType int

// FloatSampleValueType is Common floating point sample value
type FloatSampleValueType struct {
	Float                float32
	UnavailableValueType string
}

// ThreeSpaceSampleValueType is Common floating point sample value
type ThreeSpaceSampleValueType struct {
	ThreeSpaceValueType  *FloatListValueType
	UnavailableValueType string
}

// SampleType is Description
type SampleType struct {
	ObservationType    *ObservationType
	SampleRateAttr     float32                 `xml:"sampleRate,attr,omitempty"`
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	DurationAttr       float32                 `xml:"duration,attr,omitempty"`
}

// Sample is Description
type Sample *SampleType

// CommonSampleType is A sample with a single floating point value
type CommonSampleType struct {
}

// CommonSample is A sample with a single floating point value
type CommonSample *CommonSampleType

// ThreeSpaceSampleType is A sample with a three tuple floating point value
type ThreeSpaceSampleType struct {
}

// ThreeSpaceSample is A sample with a three tuple floating point value
type ThreeSpaceSample *ThreeSpaceSampleType

// AbsTimeSeriesType is The abstract waveform
type AbsTimeSeriesType struct {
	SampleCountAttr int `xml:"sampleCount,attr"`
	*SampleType
}

// AbsTimeSeries is The abstract waveform
type AbsTimeSeries *AbsTimeSeriesType

// TimeSeriesType is Description
type TimeSeriesType struct {
}

// TimeSeries is Description
type TimeSeries *TimeSeriesType

// AccelerationType is {{def(SampleEnum:ACCELERATION)}}
type AccelerationType struct {
	*CommonSampleType
}

// Acceleration is {{def(SampleEnum:ACCELERATION)}}
type Acceleration *AccelerationType

// AccelerationTimeSeriesType is Time series of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AccelerationTimeSeries is Time series of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTimeSeries *AccelerationTimeSeriesType

// AccumulatedTimeType is {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeType struct {
	*CommonSampleType
}

// AccumulatedTime is {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTime *AccumulatedTimeType

// AccumulatedTimeTimeSeriesType is Time series of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTimeSeriesType struct {
	*TimeSeriesType
}

// AccumulatedTimeTimeSeries is Time series of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTimeSeries *AccumulatedTimeTimeSeriesType

// AmperageType is {{def(SampleEnum:AMPERAGE)}}
type AmperageType struct {
	*CommonSampleType
}

// Amperage is {{def(SampleEnum:AMPERAGE)}}
type Amperage *AmperageType

// AmperageTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE)}}
type AmperageTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageTimeSeries is Time series of {{def(SampleEnum:AMPERAGE)}}
type AmperageTimeSeries *AmperageTimeSeriesType

// AngleType is {{def(SampleEnum:ANGLE)}}
type AngleType struct {
	*CommonSampleType
}

// Angle is {{def(SampleEnum:ANGLE)}}
type Angle *AngleType

// AngleTimeSeriesType is Time series of {{def(SampleEnum:ANGLE)}}
type AngleTimeSeriesType struct {
	*TimeSeriesType
}

// AngleTimeSeries is Time series of {{def(SampleEnum:ANGLE)}}
type AngleTimeSeries *AngleTimeSeriesType

// AngularAccelerationType is {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationType struct {
	*CommonSampleType
}

// AngularAcceleration is {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAcceleration *AngularAccelerationType

// AngularAccelerationTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularAccelerationTimeSeries is Time series of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTimeSeries *AngularAccelerationTimeSeriesType

// AngularVelocityType is {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityType struct {
	*CommonSampleType
}

// AngularVelocity is {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocity *AngularVelocityType

// AngularVelocityTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// AngularVelocityTimeSeries is Time series of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTimeSeries *AngularVelocityTimeSeriesType

// AxisFeedrateType is {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateType struct {
	*CommonSampleType
}

// AxisFeedrate is {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrate *AxisFeedrateType

// AxisFeedrateTimeSeriesType is Time series of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// AxisFeedrateTimeSeries is Time series of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTimeSeries *AxisFeedrateTimeSeriesType

// CapacityFluidType is {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidType struct {
	*CommonSampleType
}

// CapacityFluid is {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluid *CapacityFluidType

// CapacityFluidTimeSeriesType is Time series of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTimeSeriesType struct {
	*TimeSeriesType
}

// CapacityFluidTimeSeries is Time series of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTimeSeries *CapacityFluidTimeSeriesType

// CapacitySpatialType is {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialType struct {
	*CommonSampleType
}

// CapacitySpatial is {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatial *CapacitySpatialType

// CapacitySpatialTimeSeriesType is Time series of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTimeSeriesType struct {
	*TimeSeriesType
}

// CapacitySpatialTimeSeries is Time series of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTimeSeries *CapacitySpatialTimeSeriesType

// ConcentrationType is {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationType struct {
	*CommonSampleType
}

// Concentration is {{def(SampleEnum:CONCENTRATION)}}
type Concentration *ConcentrationType

// ConcentrationTimeSeriesType is Time series of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTimeSeriesType struct {
	*TimeSeriesType
}

// ConcentrationTimeSeries is Time series of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTimeSeries *ConcentrationTimeSeriesType

// ConductivityType is {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityType struct {
	*CommonSampleType
}

// Conductivity is {{def(SampleEnum:CONDUCTIVITY)}}
type Conductivity *ConductivityType

// ConductivityTimeSeriesType is Time series of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTimeSeriesType struct {
	*TimeSeriesType
}

// ConductivityTimeSeries is Time series of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTimeSeries *ConductivityTimeSeriesType

// CuttingSpeedType is {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedType struct {
	*CommonSampleType
}

// CuttingSpeed is {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeed *CuttingSpeedType

// CuttingSpeedTimeSeriesType is Time series of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// CuttingSpeedTimeSeries is Time series of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTimeSeries *CuttingSpeedTimeSeriesType

// DensityType is {{def(SampleEnum:DENSITY)}}
type DensityType struct {
	*CommonSampleType
}

// Density is {{def(SampleEnum:DENSITY)}}
type Density *DensityType

// DensityTimeSeriesType is Time series of {{def(SampleEnum:DENSITY)}}
type DensityTimeSeriesType struct {
	*TimeSeriesType
}

// DensityTimeSeries is Time series of {{def(SampleEnum:DENSITY)}}
type DensityTimeSeries *DensityTimeSeriesType

// DepositionAccelerationVolumetricType is {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricType struct {
	*CommonSampleType
}

// DepositionAccelerationVolumetric is {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetric *DepositionAccelerationVolumetricType

// DepositionAccelerationVolumetricTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionAccelerationVolumetricTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTimeSeries *DepositionAccelerationVolumetricTimeSeriesType

// DepositionDensityType is {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityType struct {
	*CommonSampleType
}

// DepositionDensity is {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensity *DepositionDensityType

// DepositionDensityTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionDensityTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTimeSeries *DepositionDensityTimeSeriesType

// DepositionMassType is {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassType struct {
	*CommonSampleType
}

// DepositionMass is {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMass *DepositionMassType

// DepositionMassTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionMassTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTimeSeries *DepositionMassTimeSeriesType

// DepositionRateVolumetricType is {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricType struct {
	*CommonSampleType
}

// DepositionRateVolumetric is {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetric *DepositionRateVolumetricType

// DepositionRateVolumetricTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionRateVolumetricTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTimeSeries *DepositionRateVolumetricTimeSeriesType

// DepositionVolumeType is {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeType struct {
	*CommonSampleType
}

// DepositionVolume is {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolume *DepositionVolumeType

// DepositionVolumeTimeSeriesType is Time series of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTimeSeriesType struct {
	*TimeSeriesType
}

// DepositionVolumeTimeSeries is Time series of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTimeSeries *DepositionVolumeTimeSeriesType

// DisplacementType is {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementType struct {
	*CommonSampleType
}

// Displacement is {{def(SampleEnum:DISPLACEMENT)}}
type Displacement *DisplacementType

// DisplacementTimeSeriesType is Time series of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTimeSeriesType struct {
	*TimeSeriesType
}

// DisplacementTimeSeries is Time series of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTimeSeries *DisplacementTimeSeriesType

// ElectricalEnergyType is {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyType struct {
	*CommonSampleType
}

// ElectricalEnergy is {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergy *ElectricalEnergyType

// ElectricalEnergyTimeSeriesType is Time series of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTimeSeriesType struct {
	*TimeSeriesType
}

// ElectricalEnergyTimeSeries is Time series of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTimeSeries *ElectricalEnergyTimeSeriesType

// EquipmentTimerType is {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerType struct {
	*CommonSampleType
}

// EquipmentTimer is {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimer *EquipmentTimerType

// EquipmentTimerTimeSeriesType is Time series of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTimeSeriesType struct {
	*TimeSeriesType
}

// EquipmentTimerTimeSeries is Time series of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTimeSeries *EquipmentTimerTimeSeriesType

// FillLevelType is {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelType struct {
	*CommonSampleType
}

// FillLevel is {{def(SampleEnum:FILL_LEVEL)}}
type FillLevel *FillLevelType

// FillLevelTimeSeriesType is Time series of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTimeSeriesType struct {
	*TimeSeriesType
}

// FillLevelTimeSeries is Time series of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTimeSeries *FillLevelTimeSeriesType

// FlowType is {{def(SampleEnum:FLOW)}}
type FlowType struct {
	*CommonSampleType
}

// Flow is {{def(SampleEnum:FLOW)}}
type Flow *FlowType

// FlowTimeSeriesType is Time series of {{def(SampleEnum:FLOW)}}
type FlowTimeSeriesType struct {
	*TimeSeriesType
}

// FlowTimeSeries is Time series of {{def(SampleEnum:FLOW)}}
type FlowTimeSeries *FlowTimeSeriesType

// FrequencyType is {{def(SampleEnum:FREQUENCY)}}
type FrequencyType struct {
	*CommonSampleType
}

// Frequency is {{def(SampleEnum:FREQUENCY)}}
type Frequency *FrequencyType

// FrequencyTimeSeriesType is Time series of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTimeSeriesType struct {
	*TimeSeriesType
}

// FrequencyTimeSeries is Time series of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTimeSeries *FrequencyTimeSeriesType

// GlobalPositionType is {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionType struct {
	*CommonSampleType
}

// GlobalPosition is {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPosition *GlobalPositionType

// GlobalPositionTimeSeriesType is Time series of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTimeSeriesType struct {
	*TimeSeriesType
}

// GlobalPositionTimeSeries is Time series of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTimeSeries *GlobalPositionTimeSeriesType

// LengthType is {{def(SampleEnum:LENGTH)}}
type LengthType struct {
	*CommonSampleType
}

// Length is {{def(SampleEnum:LENGTH)}}
type Length *LengthType

// LengthTimeSeriesType is Time series of {{def(SampleEnum:LENGTH)}}
type LengthTimeSeriesType struct {
	*TimeSeriesType
}

// LengthTimeSeries is Time series of {{def(SampleEnum:LENGTH)}}
type LengthTimeSeries *LengthTimeSeriesType

// LevelType is {{def(SampleEnum:LEVEL)}}
type LevelType struct {
	*CommonSampleType
}

// Level is {{def(SampleEnum:LEVEL)}}
type Level *LevelType

// LevelTimeSeriesType is Time series of {{def(SampleEnum:LEVEL)}}
type LevelTimeSeriesType struct {
	*TimeSeriesType
}

// LevelTimeSeries is Time series of {{def(SampleEnum:LEVEL)}}
type LevelTimeSeries *LevelTimeSeriesType

// LinearForceType is {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceType struct {
	*CommonSampleType
}

// LinearForce is {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForce *LinearForceType

// LinearForceTimeSeriesType is Time series of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTimeSeriesType struct {
	*TimeSeriesType
}

// LinearForceTimeSeries is Time series of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTimeSeries *LinearForceTimeSeriesType

// LoadType is {{def(SampleEnum:LOAD)}}
type LoadType struct {
	*CommonSampleType
}

// Load is {{def(SampleEnum:LOAD)}}
type Load *LoadType

// LoadTimeSeriesType is Time series of {{def(SampleEnum:LOAD)}}
type LoadTimeSeriesType struct {
	*TimeSeriesType
}

// LoadTimeSeries is Time series of {{def(SampleEnum:LOAD)}}
type LoadTimeSeries *LoadTimeSeriesType

// MassType is {{def(SampleEnum:MASS)}}
type MassType struct {
	*CommonSampleType
}

// Mass is {{def(SampleEnum:MASS)}}
type Mass *MassType

// MassTimeSeriesType is Time series of {{def(SampleEnum:MASS)}}
type MassTimeSeriesType struct {
	*TimeSeriesType
}

// MassTimeSeries is Time series of {{def(SampleEnum:MASS)}}
type MassTimeSeries *MassTimeSeriesType

// PathFeedrateType is {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateType struct {
	*CommonSampleType
}

// PathFeedrate is {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrate *PathFeedrateType

// PathFeedrateTimeSeriesType is Time series of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedrateTimeSeries is Time series of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTimeSeries *PathFeedrateTimeSeriesType

// PathFeedratePerRevolutionType is {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionType struct {
	*CommonSampleType
}

// PathFeedratePerRevolution is {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolution *PathFeedratePerRevolutionType

// PathFeedratePerRevolutionTimeSeriesType is Time series of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTimeSeriesType struct {
	*TimeSeriesType
}

// PathFeedratePerRevolutionTimeSeries is Time series of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTimeSeries *PathFeedratePerRevolutionTimeSeriesType

// PathPositionType is {{def(SampleEnum:PATH_POSITION)}}
type PathPositionType struct {
	*ThreeSpaceSampleType
}

// PathPosition is {{def(SampleEnum:PATH_POSITION)}}
type PathPosition *PathPositionType

// PHType is {{def(SampleEnum:PH)}}
type PHType struct {
	*CommonSampleType
}

// PH is {{def(SampleEnum:PH)}}
type PH *PHType

// PHTimeSeriesType is Time series of {{def(SampleEnum:PH)}}
type PHTimeSeriesType struct {
	*TimeSeriesType
}

// PHTimeSeries is Time series of {{def(SampleEnum:PH)}}
type PHTimeSeries *PHTimeSeriesType

// PositionType is {{def(SampleEnum:POSITION)}}
type PositionType struct {
	*CommonSampleType
}

// Position is {{def(SampleEnum:POSITION)}}
type Position *PositionType

// PositionTimeSeriesType is Time series of {{def(SampleEnum:POSITION)}}
type PositionTimeSeriesType struct {
	*TimeSeriesType
}

// PositionTimeSeries is Time series of {{def(SampleEnum:POSITION)}}
type PositionTimeSeries *PositionTimeSeriesType

// PowerFactorType is {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorType struct {
	*CommonSampleType
}

// PowerFactor is {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactor *PowerFactorType

// PowerFactorTimeSeriesType is Time series of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTimeSeriesType struct {
	*TimeSeriesType
}

// PowerFactorTimeSeries is Time series of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTimeSeries *PowerFactorTimeSeriesType

// PressureType is Description
type PressureType struct {
	*CommonSampleType
}

// Pressure is Description
type Pressure *PressureType

// PressureTimeSeriesType is Time series of {{def(SampleEnum:PRESSURE)}}
type PressureTimeSeriesType struct {
	*TimeSeriesType
}

// PressureTimeSeries is Time series of {{def(SampleEnum:PRESSURE)}}
type PressureTimeSeries *PressureTimeSeriesType

// ProcessTimerType is {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerType struct {
	*CommonSampleType
}

// ProcessTimer is {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimer *ProcessTimerType

// ProcessTimerTimeSeriesType is Time series of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTimeSeriesType struct {
	*TimeSeriesType
}

// ProcessTimerTimeSeries is Time series of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTimeSeries *ProcessTimerTimeSeriesType

// ResistanceType is {{def(SampleEnum:RESISTANCE)}}
type ResistanceType struct {
	*CommonSampleType
}

// Resistance is {{def(SampleEnum:RESISTANCE)}}
type Resistance *ResistanceType

// ResistanceTimeSeriesType is Time series of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTimeSeriesType struct {
	*TimeSeriesType
}

// ResistanceTimeSeries is Time series of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTimeSeries *ResistanceTimeSeriesType

// RotaryVelocityType is {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityType struct {
	*CommonSampleType
}

// RotaryVelocity is {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocity *RotaryVelocityType

// RotaryVelocityTimeSeriesType is Time series of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTimeSeriesType struct {
	*TimeSeriesType
}

// RotaryVelocityTimeSeries is Time series of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTimeSeries *RotaryVelocityTimeSeriesType

// SoundLevelType is {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelType struct {
	*CommonSampleType
}

// SoundLevel is {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevel *SoundLevelType

// SoundLevelTimeSeriesType is Time series of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTimeSeriesType struct {
	*TimeSeriesType
}

// SoundLevelTimeSeries is Time series of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTimeSeries *SoundLevelTimeSeriesType

// SpindleSpeedType is {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedType struct {
	*CommonSampleType
}

// SpindleSpeed is {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeed *SpindleSpeedType

// SpindleSpeedTimeSeriesType is Time series of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTimeSeriesType struct {
	*TimeSeriesType
}

// SpindleSpeedTimeSeries is Time series of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTimeSeries *SpindleSpeedTimeSeriesType

// StrainType is {{def(SampleEnum:STRAIN)}}
type StrainType struct {
	*CommonSampleType
}

// Strain is {{def(SampleEnum:STRAIN)}}
type Strain *StrainType

// StrainTimeSeriesType is Time series of {{def(SampleEnum:STRAIN)}}
type StrainTimeSeriesType struct {
	*TimeSeriesType
}

// StrainTimeSeries is Time series of {{def(SampleEnum:STRAIN)}}
type StrainTimeSeries *StrainTimeSeriesType

// TemperatureType is {{def(SampleEnum:TEMPERATURE)}}
type TemperatureType struct {
	*CommonSampleType
}

// Temperature is {{def(SampleEnum:TEMPERATURE)}}
type Temperature *TemperatureType

// TemperatureTimeSeriesType is Time series of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTimeSeriesType struct {
	*TimeSeriesType
}

// TemperatureTimeSeries is Time series of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTimeSeries *TemperatureTimeSeriesType

// TensionType is {{def(SampleEnum:TENSION)}}
type TensionType struct {
	*CommonSampleType
}

// Tension is {{def(SampleEnum:TENSION)}}
type Tension *TensionType

// TensionTimeSeriesType is Time series of {{def(SampleEnum:TENSION)}}
type TensionTimeSeriesType struct {
	*TimeSeriesType
}

// TensionTimeSeries is Time series of {{def(SampleEnum:TENSION)}}
type TensionTimeSeries *TensionTimeSeriesType

// TiltType is {{def(SampleEnum:TILT)}}
type TiltType struct {
	*CommonSampleType
}

// Tilt is {{def(SampleEnum:TILT)}}
type Tilt *TiltType

// TiltTimeSeriesType is Time series of {{def(SampleEnum:TILT)}}
type TiltTimeSeriesType struct {
	*TimeSeriesType
}

// TiltTimeSeries is Time series of {{def(SampleEnum:TILT)}}
type TiltTimeSeries *TiltTimeSeriesType

// TorqueType is {{def(SampleEnum:TORQUE)}}
type TorqueType struct {
	*CommonSampleType
}

// Torque is {{def(SampleEnum:TORQUE)}}
type Torque *TorqueType

// TorqueTimeSeriesType is Time series of {{def(SampleEnum:TORQUE)}}
type TorqueTimeSeriesType struct {
	*TimeSeriesType
}

// TorqueTimeSeries is Time series of {{def(SampleEnum:TORQUE)}}
type TorqueTimeSeries *TorqueTimeSeriesType

// VelocityType is {{def(SampleEnum:VELOCITY)}}
type VelocityType struct {
	*CommonSampleType
}

// Velocity is {{def(SampleEnum:VELOCITY)}}
type Velocity *VelocityType

// VelocityTimeSeriesType is Time series of {{def(SampleEnum:VELOCITY)}}
type VelocityTimeSeriesType struct {
	*TimeSeriesType
}

// VelocityTimeSeries is Time series of {{def(SampleEnum:VELOCITY)}}
type VelocityTimeSeries *VelocityTimeSeriesType

// ViscosityType is {{def(SampleEnum:VISCOSITY)}}
type ViscosityType struct {
	*CommonSampleType
}

// Viscosity is {{def(SampleEnum:VISCOSITY)}}
type Viscosity *ViscosityType

// ViscosityTimeSeriesType is Time series of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTimeSeriesType struct {
	*TimeSeriesType
}

// ViscosityTimeSeries is Time series of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTimeSeries *ViscosityTimeSeriesType

// VoltageType is {{def(SampleEnum:VOLTAGE)}}
type VoltageType struct {
	*CommonSampleType
}

// Voltage is {{def(SampleEnum:VOLTAGE)}}
type Voltage *VoltageType

// VoltageTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE)}}
type VoltageTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageTimeSeries is Time series of {{def(SampleEnum:VOLTAGE)}}
type VoltageTimeSeries *VoltageTimeSeriesType

// VoltAmpereType is {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereType struct {
	*CommonSampleType
}

// VoltAmpere is {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpere *VoltAmpereType

// VoltAmpereTimeSeriesType is Time series of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereTimeSeries is Time series of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTimeSeries *VoltAmpereTimeSeriesType

// VoltAmpereReactiveType is {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveType struct {
	*CommonSampleType
}

// VoltAmpereReactive is {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactive *VoltAmpereReactiveType

// VoltAmpereReactiveTimeSeriesType is Time series of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTimeSeriesType struct {
	*TimeSeriesType
}

// VoltAmpereReactiveTimeSeries is Time series of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTimeSeries *VoltAmpereReactiveTimeSeriesType

// VolumeFluidType is {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidType struct {
	*CommonSampleType
}

// VolumeFluid is {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluid *VolumeFluidType

// VolumeFluidTimeSeriesType is Time series of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeFluidTimeSeries is Time series of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTimeSeries *VolumeFluidTimeSeriesType

// VolumeSpatialType is {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialType struct {
	*CommonSampleType
}

// VolumeSpatial is {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatial *VolumeSpatialType

// VolumeSpatialTimeSeriesType is Time series of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTimeSeriesType struct {
	*TimeSeriesType
}

// VolumeSpatialTimeSeries is Time series of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTimeSeries *VolumeSpatialTimeSeriesType

// WattageType is {{def(SampleEnum:WATTAGE)}}
type WattageType struct {
	*CommonSampleType
}

// Wattage is {{def(SampleEnum:WATTAGE)}}
type Wattage *WattageType

// WattageTimeSeriesType is Time series of {{def(SampleEnum:WATTAGE)}}
type WattageTimeSeriesType struct {
	*TimeSeriesType
}

// WattageTimeSeries is Time series of {{def(SampleEnum:WATTAGE)}}
type WattageTimeSeries *WattageTimeSeriesType

// AmperageDCType is {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCType struct {
	*CommonSampleType
}

// AmperageDC is {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDC *AmperageDCType

// AmperageDCTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageDCTimeSeries is Time series of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTimeSeries *AmperageDCTimeSeriesType

// AmperageACType is {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACType struct {
	*CommonSampleType
}

// AmperageAC is {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageAC *AmperageACType

// AmperageACTimeSeriesType is Time series of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTimeSeriesType struct {
	*TimeSeriesType
}

// AmperageACTimeSeries is Time series of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTimeSeries *AmperageACTimeSeriesType

// VoltageACType is {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACType struct {
	*CommonSampleType
}

// VoltageAC is {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageAC *VoltageACType

// VoltageACTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageACTimeSeries is Time series of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTimeSeries *VoltageACTimeSeriesType

// VoltageDCType is {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCType struct {
	*CommonSampleType
}

// VoltageDC is {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDC *VoltageDCType

// VoltageDCTimeSeriesType is Time series of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTimeSeriesType struct {
	*TimeSeriesType
}

// VoltageDCTimeSeries is Time series of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTimeSeries *VoltageDCTimeSeriesType

// XDimensionType is {{def(SampleEnum:X_DIMENSION)}}
type XDimensionType struct {
	*CommonSampleType
}

// XDimension is {{def(SampleEnum:X_DIMENSION)}}
type XDimension *XDimensionType

// XDimensionTimeSeriesType is Time series of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// XDimensionTimeSeries is Time series of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTimeSeries *XDimensionTimeSeriesType

// YDimensionType is {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionType struct {
	*CommonSampleType
}

// YDimension is {{def(SampleEnum:Y_DIMENSION)}}
type YDimension *YDimensionType

// YDimensionTimeSeriesType is Time series of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// YDimensionTimeSeries is Time series of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTimeSeries *YDimensionTimeSeriesType

// ZDimensionType is {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionType struct {
	*CommonSampleType
}

// ZDimension is {{def(SampleEnum:Z_DIMENSION)}}
type ZDimension *ZDimensionType

// ZDimensionTimeSeriesType is Time series of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTimeSeriesType struct {
	*TimeSeriesType
}

// ZDimensionTimeSeries is Time series of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTimeSeries *ZDimensionTimeSeriesType

// DiameterType is {{def(SampleEnum:DIAMETER)}}
type DiameterType struct {
	*CommonSampleType
}

// Diameter is {{def(SampleEnum:DIAMETER)}}
type Diameter *DiameterType

// DiameterTimeSeriesType is Time series of {{def(SampleEnum:DIAMETER)}}
type DiameterTimeSeriesType struct {
	*TimeSeriesType
}

// DiameterTimeSeries is Time series of {{def(SampleEnum:DIAMETER)}}
type DiameterTimeSeries *DiameterTimeSeriesType

// OrientationType is {{def(SampleEnum:ORIENTATION)}}
type OrientationType struct {
	*ThreeSpaceSampleType
}

// Orientation is {{def(SampleEnum:ORIENTATION)}}
type Orientation *OrientationType

// HumidityRelativeType is {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeType struct {
	*CommonSampleType
}

// HumidityRelative is {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelative *HumidityRelativeType

// HumidityRelativeTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityRelativeTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTimeSeries *HumidityRelativeTimeSeriesType

// HumidityAbsoluteType is {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteType struct {
	*CommonSampleType
}

// HumidityAbsolute is {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsolute *HumidityAbsoluteType

// HumidityAbsoluteTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// HumidityAbsoluteTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTimeSeries *HumidityAbsoluteTimeSeriesType

// HumiditySpecificType is {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificType struct {
	*CommonSampleType
}

// HumiditySpecific is {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecific *HumiditySpecificType

// HumiditySpecificTimeSeriesType is Time series of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTimeSeriesType struct {
	*TimeSeriesType
}

// HumiditySpecificTimeSeries is Time series of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTimeSeries *HumiditySpecificTimeSeriesType

// PressurizationRateType is {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateType struct {
	*CommonSampleType
}

// PressurizationRate is {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRate *PressurizationRateType

// PressurizationRateTimeSeriesType is Time series of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTimeSeriesType struct {
	*TimeSeriesType
}

// PressurizationRateTimeSeries is Time series of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTimeSeries *PressurizationRateTimeSeriesType

// DecelerationType is {{def(SampleEnum:DECELERATION)}}
type DecelerationType struct {
	*CommonSampleType
}

// Deceleration is {{def(SampleEnum:DECELERATION)}}
type Deceleration *DecelerationType

// DecelerationTimeSeriesType is Time series of {{def(SampleEnum:DECELERATION)}}
type DecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// DecelerationTimeSeries is Time series of {{def(SampleEnum:DECELERATION)}}
type DecelerationTimeSeries *DecelerationTimeSeriesType

// AssetUpdateRateType is {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateType struct {
	*CommonSampleType
}

// AssetUpdateRate is {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRate *AssetUpdateRateType

// AssetUpdateRateTimeSeriesType is Time series of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// AssetUpdateRateTimeSeries is Time series of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTimeSeries *AssetUpdateRateTimeSeriesType

// AngularDecelerationType is {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationType struct {
	*CommonSampleType
}

// AngularDeceleration is {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDeceleration *AngularDecelerationType

// AngularDecelerationTimeSeriesType is Time series of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTimeSeriesType struct {
	*TimeSeriesType
}

// AngularDecelerationTimeSeries is Time series of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTimeSeries *AngularDecelerationTimeSeriesType

// ObservationUpdateRateType is {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateType struct {
	*CommonSampleType
}

// ObservationUpdateRate is {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRate *ObservationUpdateRateType

// ObservationUpdateRateTimeSeriesType is Time series of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTimeSeriesType struct {
	*TimeSeriesType
}

// ObservationUpdateRateTimeSeries is Time series of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTimeSeries *ObservationUpdateRateTimeSeriesType

// PressureAbsoluteType is The force per unit area measured relative to a vacuum.
type PressureAbsoluteType struct {
	*CommonSampleType
}

// PressureAbsolute is The force per unit area measured relative to a vacuum.
type PressureAbsolute *PressureAbsoluteType

// PressureAbsoluteTimeSeriesType is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeriesType struct {
	*TimeSeriesType
}

// PressureAbsoluteTimeSeries is Time series of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTimeSeries *PressureAbsoluteTimeSeriesType

// OpennessType is {{def(SampleEnum:OPENNESS)}}
type OpennessType struct {
	*CommonSampleType
}

// Openness is {{def(SampleEnum:OPENNESS)}}
type Openness *OpennessType

// OpennessTimeSeriesType is Time series of {{def(SampleEnum:OPENNESS)}}
type OpennessTimeSeriesType struct {
	*TimeSeriesType
}

// OpennessTimeSeries is Time series of {{def(SampleEnum:OPENNESS)}}
type OpennessTimeSeries *OpennessTimeSeriesType

// IntegerEventValueType is Integer event value
type IntegerEventValueType struct {
	Integer              int
	UnavailableValueType string
}

// FloatEventValueType is Integer event value
type FloatEventValueType struct {
	Float                float32
	UnavailableValueType string
}

// StringEventValueType is Srring event value
type StringEventValueType struct {
	String               string
	UnavailableValueType string
}

// StringListValueType is A list of axis names
type StringListValueType []string

// StringListEventValueType is A list of axis for an event
type StringListEventValueType struct {
	StringListValueType  *StringListValueType
	UnavailableValueType string
}

// EventType is Description
type EventType struct {
	ObservationType    *ObservationType
	ResetTriggeredAttr *DataItemResetValueType `xml:"resetTriggered,attr,omitempty"`
}

// Event is Description
type Event *EventType

// StringEventType is An unfaceted string event
type StringEventType struct {
}

// StringEvent is An unfaceted string event
type StringEvent *StringEventType

// StringListEventType is An unfaceted string event
type StringListEventType struct {
}

// StringListEvent is An unfaceted string event
type StringListEvent *StringListEventType

// IntegerEventType is An event with an integer value
type IntegerEventType struct {
}

// IntegerEvent is An event with an integer value
type IntegerEvent *IntegerEventType

// FloatEventType is An event with an integer value
type FloatEventType struct {
}

// FloatEvent is An event with an integer value
type FloatEvent *FloatEventType

// ActiveAxesType is {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesType struct {
	*StringEventType
}

// ActiveAxes is {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxes *ActiveAxesType

// ActuatorStateValueType is Value is indeterminate
type ActuatorStateValueType string

// ActuatorStateType is {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateType struct {
}

// ActuatorState is {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorState *ActuatorStateType

// AssetChangedType is {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	*StringEventType
}

// AssetChanged is {{def(EventEnum:ASSET_CHANGED)}}
type AssetChanged *AssetChangedType

// AssetRemovedType is {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedType struct {
	AssetTypeAttr string `xml:"assetType,attr"`
	*StringEventType
}

// AssetRemoved is {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemoved *AssetRemovedType

// AvailabilityValueType is Value is indeterminate
type AvailabilityValueType string

// AvailabilityType is {{def(EventEnum:AVAILABILITY)}}
type AvailabilityType struct {
}

// Availability is {{def(EventEnum:AVAILABILITY)}}
type Availability *AvailabilityType

// AxisCouplingValueType is Value is indeterminate
type AxisCouplingValueType string

// AxisCouplingType is {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingType struct {
}

// AxisCoupling is {{def(EventEnum:AXIS_COUPLING)}}
type AxisCoupling *AxisCouplingType

// AxisFeedrateOverrideType is {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideType struct {
	*FloatEventType
}

// AxisFeedrateOverride is {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverride *AxisFeedrateOverrideType

// AxisInterlockValueType is Value is indeterminate
type AxisInterlockValueType string

// AxisInterlockType is {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockType struct {
}

// AxisInterlock is {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlock *AxisInterlockType

// AxisStateValueType is Value is indeterminate
type AxisStateValueType string

// AxisStateType is {{def(EventEnum:AXIS_STATE)}}
type AxisStateType struct {
}

// AxisState is {{def(EventEnum:AXIS_STATE)}}
type AxisState *AxisStateType

// BlockType is {{def(EventEnum:BLOCK)}}
type BlockType struct {
	*StringEventType
}

// Block is {{def(EventEnum:BLOCK)}}
type Block *BlockType

// BlockCountType is {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountType struct {
	*IntegerEventType
}

// BlockCount is {{def(EventEnum:BLOCK_COUNT)}}
type BlockCount *BlockCountType

// ChuckInterlockValueType is Value is indeterminate
type ChuckInterlockValueType string

// ChuckInterlockType is {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockType struct {
}

// ChuckInterlock is {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlock *ChuckInterlockType

// ChuckStateValueType is Value is indeterminate
type ChuckStateValueType string

// ChuckStateType is {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateType struct {
}

// ChuckState is {{def(EventEnum:CHUCK_STATE)}}
type ChuckState *ChuckStateType

// CodeType is {{def(EventEnum:CODE)}}
type CodeType struct {
	*StringEventType
}

// Code is {{def(EventEnum:CODE)}}
type Code *CodeType

// CompositionStateType is {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateType struct {
	*StringEventType
}

// CompositionState is {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionState *CompositionStateType

// ControllerModeValueType is Value is indeterminate
type ControllerModeValueType string

// ControllerModeType is {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeType struct {
}

// ControllerMode is {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerMode *ControllerModeType

// ControllerModeOverrideValueType is Value is indeterminate
type ControllerModeOverrideValueType string

// ControllerModeOverrideType is {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideType struct {
}

// ControllerModeOverride is {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverride *ControllerModeOverrideType

// CoupledAxesType is {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesType struct {
	*StringEventType
}

// CoupledAxes is {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxes *CoupledAxesType

// DateCodeType is {{def(EventEnum:DATE_CODE)}}
type DateCodeType struct {
	*StringEventType
}

// DateCode is {{def(EventEnum:DATE_CODE)}}
type DateCode *DateCodeType

// DeviceUuidType is {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidType struct {
	*StringEventType
}

// DeviceUuid is {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuid *DeviceUuidType

// DirectionValueType is Value is indeterminate
type DirectionValueType string

// DirectionType is {{def(EventEnum:DIRECTION)}}
type DirectionType struct {
}

// Direction is {{def(EventEnum:DIRECTION)}}
type Direction *DirectionType

// DoorStateValueType is Value is indeterminate
type DoorStateValueType string

// DoorStateType is {{def(EventEnum:DOOR_STATE)}}
type DoorStateType struct {
}

// DoorState is {{def(EventEnum:DOOR_STATE)}}
type DoorState *DoorStateType

// EmergencyStopValueType is Value is indeterminate
type EmergencyStopValueType string

// EmergencyStopType is {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopType struct {
}

// EmergencyStop is {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStop *EmergencyStopType

// EndOfBarValueType is Value is indeterminate
type EndOfBarValueType string

// EndOfBarType is {{def(EventEnum:END_OF_BAR)}}
type EndOfBarType struct {
}

// EndOfBar is {{def(EventEnum:END_OF_BAR)}}
type EndOfBar *EndOfBarType

// EquipmentModeValueType is Value is indeterminate
type EquipmentModeValueType string

// EquipmentModeType is {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeType struct {
}

// EquipmentMode is {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentMode *EquipmentModeType

// ExecutionValueType is Value is indeterminate
type ExecutionValueType string

// ExecutionType is {{def(EventEnum:EXECUTION)}}
type ExecutionType struct {
}

// Execution is {{def(EventEnum:EXECUTION)}}
type Execution *ExecutionType

// FunctionalModeValueType is Value is indeterminate
type FunctionalModeValueType string

// FunctionalModeType is {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeType struct {
}

// FunctionalMode is {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalMode *FunctionalModeType

// HardnessType is {{def(EventEnum:HARDNESS)}}
type HardnessType struct {
	*FloatEventType
}

// Hardness is {{def(EventEnum:HARDNESS)}}
type Hardness *HardnessType

// LineType is {{def(EventEnum:LINE)}}
type LineType struct {
	*StringEventType
}

// Line is {{def(EventEnum:LINE)}}
type Line *LineType

// LineLabelType is {{def(EventEnum:LINE_LABEL)}}
type LineLabelType struct {
	*StringEventType
}

// LineLabel is {{def(EventEnum:LINE_LABEL)}}
type LineLabel *LineLabelType

// LineNumberType is {{def(EventEnum:LINE_NUMBER)}}
type LineNumberType struct {
	*IntegerEventType
}

// LineNumber is {{def(EventEnum:LINE_NUMBER)}}
type LineNumber *LineNumberType

// MaterialType is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type MaterialType struct {
	*StringEventType
}

// Material is {{block(Resource)}} composed of material that is consumed or used by the
//         piece of equipment for production of parts, materials, or other types of
//         goods.
type Material *MaterialType

// MaterialLayerType is {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerType struct {
	*IntegerEventType
}

// MaterialLayer is {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayer *MaterialLayerType

// MessageType is {{def(EventEnum:MESSAGE)}}
type MessageType struct {
	*StringEventType
}

// Message is {{def(EventEnum:MESSAGE)}}
type Message *MessageType

// OperatorIdType is {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdType struct {
	*StringEventType
}

// OperatorId is {{def(EventEnum:OPERATOR_ID)}}
type OperatorId *OperatorIdType

// PalletIdType is {{def(EventEnum:PALLET_ID)}}
type PalletIdType struct {
	*StringEventType
}

// PalletId is {{def(EventEnum:PALLET_ID)}}
type PalletId *PalletIdType

// PartCountType is {{def(EventEnum:PART_COUNT)}}
type PartCountType struct {
	*IntegerEventType
}

// PartCount is {{def(EventEnum:PART_COUNT)}}
type PartCount *PartCountTypeType

// PartDetectValueType is Value is indeterminate
type PartDetectValueType string

// PartDetectType is {{def(EventEnum:PART_DETECT)}}
type PartDetectType struct {
}

// PartDetect is {{def(EventEnum:PART_DETECT)}}
type PartDetect *PartDetectType

// PartIdType is {{def(EventEnum:PART_ID)}}
type PartIdType struct {
	*StringEventType
}

// PartId is {{def(EventEnum:PART_ID)}}
type PartId *PartIdType

// PartNumberType is {{def(EventEnum:PART_NUMBER)}}
type PartNumberType struct {
	*StringEventType
}

// PartNumber is {{def(EventEnum:PART_NUMBER)}}
type PartNumber *PartNumberType

// PathFeedrateOverrideType is {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideType struct {
	*FloatEventType
}

// PathFeedrateOverride is {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverride *PathFeedrateOverrideType

// PathModeValueType is Value is indeterminate
type PathModeValueType string

// PathModeType is {{def(EventEnum:PATH_MODE)}}
type PathModeType struct {
}

// PathMode is {{def(EventEnum:PATH_MODE)}}
type PathMode *PathModeType

// PowerStateValueType is Value is indeterminate
type PowerStateValueType string

// PowerStateType is {{def(EventEnum:POWER_STATE)}}
type PowerStateType struct {
}

// PowerState is {{def(EventEnum:POWER_STATE)}}
type PowerState *PowerStateType

// PowerStatusValueType is Value is indeterminate
type PowerStatusValueType string

// PowerStatusType is {{def(EventEnum:POWER_STATUS)}}
type PowerStatusType struct {
}

// PowerStatus is {{def(EventEnum:POWER_STATUS)}}
type PowerStatus *PowerStatusType

// ProcessTimeType is {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeType struct {
	*StringEventType
}

// ProcessTime is {{def(EventEnum:PROCESS_TIME)}}
type ProcessTime *ProcessTimeType

// ProgramType is {{def(EventEnum:PROGRAM)}}
type ProgramType struct {
	*StringEventType
}

// Program is {{def(EventEnum:PROGRAM)}}
type Program *ProgramType

// ProgramCommentType is {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentType struct {
	*StringEventType
}

// ProgramComment is {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramComment *ProgramCommentType

// ProgramEditValueType is Value is indeterminate
type ProgramEditValueType string

// ProgramEditType is {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditType struct {
}

// ProgramEdit is {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEdit *ProgramEditType

// ProgramEditNameType is {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameType struct {
	*StringEventType
}

// ProgramEditName is {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditName *ProgramEditNameType

// ProgramHeaderType is {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderType struct {
	*StringEventType
}

// ProgramHeader is {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeader *ProgramHeaderType

// ProgramLocationType is {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationType struct {
	*StringEventType
}

// ProgramLocation is {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocation *ProgramLocationTypeType

// ProgramLocationTypeValueType is Value is indeterminate
type ProgramLocationTypeValueType string

// ProgramLocationTypeType is {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeType struct {
}

// ProgramNestLevelType is {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelType struct {
	*IntegerEventType
}

// ProgramNestLevel is {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevel *ProgramNestLevelType

// RotaryModeValueType is Value is indeterminate
type RotaryModeValueType string

// RotaryModeType is {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeType struct {
}

// RotaryMode is {{def(EventEnum:ROTARY_MODE)}}
type RotaryMode *RotaryModeType

// RotaryVelocityOverrideType is {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command represents a
//         percentage change to the velocity calculated by a logic or motion
//         program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideType struct {
	*FloatEventType
}

// RotaryVelocityOverride is {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command represents a
//         percentage change to the velocity calculated by a logic or motion
//         program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverride *RotaryVelocityOverrideType

// SerialNumberType is {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberType struct {
	*StringEventType
}

// SerialNumber is {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumber *SerialNumberType

// SpindleInterlockValueType is Value is indeterminate
type SpindleInterlockValueType string

// SpindleInterlockType is {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockType struct {
}

// SpindleInterlock is {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlock *SpindleInterlockType

// ToolAssetIdType is {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdType struct {
	*StringEventType
}

// ToolAssetId is {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetId *ToolAssetIdType

// ToolGroupType is {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupType struct {
	*StringEventType
}

// ToolGroup is {{def(EventEnum:TOOL_GROUP)}}
type ToolGroup *ToolGroupType

// ToolIdType is {{def(EventEnum:TOOL_ID)}}
type ToolIdType struct {
	*StringEventType
}

// ToolId is {{def(EventEnum:TOOL_ID)}}
type ToolId *ToolIdType

// ToolNumberType is {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberType struct {
	*StringEventType
}

// ToolNumber is {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumber *ToolNumberType

// ToolOffsetType is {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetType struct {
	*FloatEventType
}

// ToolOffset is {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffset *ToolOffsetType

// UserType is {{def(EventEnum:USER)}}
type UserType struct {
	*StringEventType
}

// User is {{def(EventEnum:USER)}}
type User *UserType

// VariableType is {{def(EventEnum:VARIABLE)}}
type VariableType struct {
	*StringEventType
}

// Variable is {{def(EventEnum:VARIABLE)}}
type Variable *VariableType

// WaitStateValueType is Value is indeterminate
type WaitStateValueType string

// WaitStateType is {{def(EventEnum:WAIT_STATE)}}
type WaitStateType struct {
}

// WaitState is {{def(EventEnum:WAIT_STATE)}}
type WaitState *WaitStateType

// WireType is {{block(Composition)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type WireType struct {
	*StringEventType
}

// Wire is {{block(Composition)}} composed of a string like piece or filament of
//         relatively rigid or flexible material provided in a variety of
//         diameters.
type Wire *WireType

// WorkholdingIdType is {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdType struct {
	*StringEventType
}

// WorkholdingId is {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingId *WorkholdingIdType

// WorkOffsetType is {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetType struct {
	*StringEventType
}

// WorkOffset is {{def(EventEnum:WORK_OFFSET)}}
type WorkOffset *WorkOffsetType

// OperatingSystemType is {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemType struct {
	*StringEventType
}

// OperatingSystem is {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystem *OperatingSystemType

// FirmwareType is {{def(EventEnum:FIRMWARE)}}
type FirmwareType struct {
	*StringEventType
}

// Firmware is {{def(EventEnum:FIRMWARE)}}
type Firmware *FirmwareType

// ApplicationType is {{def(EventEnum:APPLICATION)}}
type ApplicationType struct {
	*StringEventType
}

// Application is {{def(EventEnum:APPLICATION)}}
type Application *ApplicationType

// LibraryType is {{def(EventEnum:LIBRARY)}}
type LibraryType struct {
	*StringEventType
}

// Library is {{def(EventEnum:LIBRARY)}}
type Library *LibraryType

// HardwareType is {{def(EventEnum:HARDWARE)}}
type HardwareType struct {
	*StringEventType
}

// Hardware is {{def(EventEnum:HARDWARE)}}
type Hardware *HardwareType

// NetworkType is {{def(EventEnum:NETWORK)}}
type NetworkType struct {
	*StringEventType
}

// Network is {{def(EventEnum:NETWORK)}}
type Network *NetworkType

// RotationType is rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationType struct {
	*StringEventType
}

// Rotation is rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type Rotation *RotationType

// TranslationType is translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type TranslationType struct {
	*StringEventType
}

// Translation is translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type Translation *TranslationType

// ProcessKindIdType is {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdType struct {
	*StringEventType
}

// ProcessKindId is {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindId *ProcessKindIdType

// PartStatusValueType is Value is indeterminate
type PartStatusValueType string

// PartStatusType is {{def(EventEnum:PART_STATUS)}} If unique identifier is given, part
//         status is for that individual. If group identifier is given without a
//         unique identifier, then the status is assumed to be for the whole group.
type PartStatusType struct {
}

// PartStatus is {{def(EventEnum:PART_STATUS)}} If unique identifier is given, part
//         status is for that individual. If group identifier is given without a
//         unique identifier, then the status is assumed to be for the whole group.
type PartStatus *PartStatusType

// AlarmLimitType is {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitType struct {
	*StringEventType
}

// AlarmLimit is {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimit *AlarmLimitType

// ProcessAggregateIdType is {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdType struct {
	*StringEventType
}

// ProcessAggregateId is {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateId *ProcessAggregateIdType

// PartKindIdType is {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindIdType struct {
	*StringEventType
}

// PartKindId is {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindId *PartKindIdType

// AdapterURIType is {{def(EventEnum:ADAPTER_URI)}}
type AdapterURIType struct {
	*StringEventType
}

// AdapterURI is {{def(EventEnum:ADAPTER_URI)}}
type AdapterURI *AdapterURIType

// DeviceRemovedType is {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedType struct {
	*StringEventType
}

// DeviceRemoved is {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemoved *DeviceRemovedType

// DeviceChangedType is {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedType struct {
	*StringEventType
}

// DeviceChanged is {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChanged *DeviceChangedType

// SpecificationLimitType is {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitType struct {
	*StringEventType
}

// SpecificationLimit is {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimit *SpecificationLimitType

// ConnectionStatusValueType is Value is indeterminate
type ConnectionStatusValueType string

// ConnectionStatusType is {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusType struct {
}

// ConnectionStatus is {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatus *ConnectionStatusType

// AdapterSoftwareVersionType is {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionType struct {
	*StringEventType
}

// AdapterSoftwareVersion is {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersion *AdapterSoftwareVersionType

// SensorAttachmentType is {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentType struct {
	*StringEventType
}

// SensorAttachment is {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachment *SensorAttachmentType

// ControlLimitType is {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitType struct {
	*StringEventType
}

// ControlLimit is {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimit *ControlLimitType

// DeviceAddedType is {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedType struct {
	*StringEventType
}

// DeviceAdded is {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAdded *DeviceAddedType

// MTConnectVersionType is {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionType struct {
	*StringEventType
}

// MTConnectVersion is {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersion *MTConnectVersionType

// ProcessOccurrenceIdType is {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdType struct {
	*StringEventType
}

// ProcessOccurrenceId is {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceId *ProcessOccurrenceIdType

// PartGroupIdType is {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupIdType struct {
	*StringEventType
}

// PartGroupId is {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupId *PartGroupIdType

// PartUniqueIdType is {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueIdType struct {
	*StringEventType
}

// PartUniqueId is {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueId *PartUniqueIdType

// ActivationCountType is {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountType struct {
	*IntegerEventType
}

// ActivationCount is {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCount *ActivationCountType

// DeactivationCountType is {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountType struct {
	*IntegerEventType
}

// DeactivationCount is {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCount *DeactivationCountType

// TransferCountType is {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountType struct {
	*IntegerEventType
}

// TransferCount is {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCount *TransferCountType

// LoadCountType is {{def(EventEnum:LOAD_COUNT)}}
type LoadCountType struct {
	*IntegerEventType
}

// LoadCount is {{def(EventEnum:LOAD_COUNT)}}
type LoadCount *LoadCountType

// PartProcessingStateValueType is Value is indeterminate
type PartProcessingStateValueType string

// PartProcessingStateType is {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateType struct {
}

// PartProcessingState is {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingState *PartProcessingStateType

// ProcessStateValueType is Value is indeterminate
type ProcessStateValueType string

// ProcessStateType is {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateType struct {
}

// ProcessState is {{def(EventEnum:PROCESS_STATE)}}
type ProcessState *ProcessStateType

// ValveStateValueType is Value is indeterminate
type ValveStateValueType string

// ValveStateType is {{def(EventEnum:VALVE_STATE)}}
type ValveStateType struct {
}

// ValveState is {{def(EventEnum:VALVE_STATE)}}
type ValveState *ValveStateType

// LockStateValueType is Value is indeterminate
type LockStateValueType string

// LockStateType is {{def(EventEnum:LOCK_STATE)}}
type LockStateType struct {
}

// LockState is {{def(EventEnum:LOCK_STATE)}}
type LockState *LockStateType

// UnloadCountType is {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountType struct {
	*IntegerEventType
}

// UnloadCount is {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCount *UnloadCountType

// CycleCountType is {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountType struct {
	*IntegerEventType
}

// CycleCount is {{def(EventEnum:CYCLE_COUNT)}}
type CycleCount *CycleCountType

// OperatingModeValueType is Value is indeterminate
type OperatingModeValueType string

// OperatingModeType is {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeType struct {
}

// OperatingMode is {{def(EventEnum:OPERATING_MODE)}}
type OperatingMode *OperatingModeType

// AssetCountType is {{def(EventEnum:ASSET_COUNT)}}
type AssetCountType struct {
	*IntegerEventType
}

// AssetCount is {{def(EventEnum:ASSET_COUNT)}}
type AssetCount *AssetCountType

// MaintenanceListType is {{def(EventEnum:MAINTENANCE_LIST)}} If the {{property(INTERVAL)}}
//         {{property(key)}} is not provided, it is assumed `ABSOLUTE`. If the
//         {{property(DIRECTION)}} {{property(key)}} is not provided, it is assumed
//         `UP`. If the {{property(UNITS)}} {{property(key)}} is not provided, it
//         is assumed to be `COUNT`.
type MaintenanceListType struct {
	*StringEventType
}

// MaintenanceList is {{def(EventEnum:MAINTENANCE_LIST)}} If the {{property(INTERVAL)}}
//         {{property(key)}} is not provided, it is assumed `ABSOLUTE`. If the
//         {{property(DIRECTION)}} {{property(key)}} is not provided, it is assumed
//         `UP`. If the {{property(UNITS)}} {{property(key)}} is not provided, it
//         is assumed to be `COUNT`.
type MaintenanceList *MaintenanceListType

// FixtureIdType is {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdType struct {
	*StringEventType
}

// FixtureId is {{def(EventEnum:FIXTURE_ID)}}
type FixtureId *FixtureIdType

// PartCountTypeValueType is Value is indeterminate
type PartCountTypeValueType string

// PartCountTypeType is {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeType struct {
}

// MaterialFeedType is {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedType struct {
	*StringEventType
}

// MaterialFeed is {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeed *MaterialFeedType

// MaterialChangeType is {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeType struct {
	*StringEventType
}

// MaterialChange is {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChange *MaterialChangeType

// MaterialRetractType is {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractType struct {
	*StringEventType
}

// MaterialRetract is {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetract *MaterialRetractType

// MaterialLoadType is {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadType struct {
	*StringEventType
}

// MaterialLoad is {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoad *MaterialLoadType

// MaterialUnloadType is {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadType struct {
	*StringEventType
}

// MaterialUnload is {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnload *MaterialUnloadType

// OpenChuckType is {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckType struct {
	*StringEventType
}

// OpenChuck is {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuck *OpenChuckType

// OpenDoorType is {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorType struct {
	*StringEventType
}

// OpenDoor is {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoor *OpenDoorType

// PartChangeType is {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeType struct {
	*StringEventType
}

// PartChange is {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChange *PartChangeType

// CloseDoorType is {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorType struct {
	*StringEventType
}

// CloseDoor is {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoor *CloseDoorType

// CloseChuckType is {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckType struct {
	*StringEventType
}

// CloseChuck is {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuck *CloseChuckType

// InterfaceStateValueType is Value is indeterminate
type InterfaceStateValueType string

// InterfaceStateType is {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateType struct {
}

// InterfaceState is {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceState *InterfaceStateType

// PartCountDiscreteType is Discrete of {{def(EventEnum:PART_COUNT)}}
type PartCountDiscreteType struct {
	*PartCountTypeType
}

// PartCountDiscrete is Discrete of {{def(EventEnum:PART_COUNT)}}
type PartCountDiscrete *PartCountDiscreteType

// ToolIdDiscreteType is Discrete of {{def(EventEnum:TOOL_ID)}}
type ToolIdDiscreteType struct {
	*ToolIdType
}

// ToolIdDiscrete is Discrete of {{def(EventEnum:TOOL_ID)}}
type ToolIdDiscrete *ToolIdDiscreteType

// ToolNumberDiscreteType is Discrete of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberDiscreteType struct {
	*ToolNumberType
}

// ToolNumberDiscrete is Discrete of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberDiscrete *ToolNumberDiscreteType

// ToolAssetIdDiscreteType is Discrete of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdDiscreteType struct {
	*ToolAssetIdType
}

// ToolAssetIdDiscrete is Discrete of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdDiscrete *ToolAssetIdDiscreteType

// PalletIdDiscreteType is Discrete of {{def(EventEnum:PALLET_ID)}}
type PalletIdDiscreteType struct {
	*PalletIdType
}

// PalletIdDiscrete is Discrete of {{def(EventEnum:PALLET_ID)}}
type PalletIdDiscrete *PalletIdDiscreteType

// MessageDiscreteType is Discrete of {{def(EventEnum:MESSAGE)}}
type MessageDiscreteType struct {
	*MessageType
}

// MessageDiscrete is Discrete of {{def(EventEnum:MESSAGE)}}
type MessageDiscrete *MessageDiscreteType

// BlockDiscreteType is Discrete of {{def(EventEnum:BLOCK)}}
type BlockDiscreteType struct {
	*BlockType
}

// BlockDiscrete is Discrete of {{def(EventEnum:BLOCK)}}
type BlockDiscrete *BlockDiscreteType

// EntryType is Constraints for Entry Values
type EntryType struct {
	KeyAttr     string `xml:"key,attr"`
	RemovedAttr bool   `xml:"removed,attr,omitempty"`
}

// Entry is Constraints for Entry Values
type Entry *EntryType

// ActiveAxesEntryType is DataSet of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesEntryType struct {
}

// ActiveAxesEntry is DataSet of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesEntry *ActiveAxesEntryType

// ActiveAxesDataSetType is Constraints for Entry Values
type ActiveAxesDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ActiveAxesEntryType `xml:"Entry"`
	*EventType
}

// ActiveAxesDataSet is DataSet of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesDataSet *ActiveAxesDataSetType

// ActuatorStateEntryType is DataSet of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateEntryType struct {
}

// ActuatorStateEntry is DataSet of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateEntry *ActuatorStateEntryType

// ActuatorStateDataSetType is Constraints for Entry Values
type ActuatorStateDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*ActuatorStateEntryType `xml:"Entry"`
	*EventType
}

// ActuatorStateDataSet is DataSet of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateDataSet *ActuatorStateDataSetType

// AssetChangedEntryType is DataSet of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedEntryType struct {
}

// AssetChangedEntry is DataSet of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedEntry *AssetChangedEntryType

// AssetChangedDataSetType is Constraints for Entry Values
type AssetChangedDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AssetChangedEntryType `xml:"Entry"`
	*EventType
}

// AssetChangedDataSet is DataSet of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedDataSet *AssetChangedDataSetType

// AssetRemovedEntryType is DataSet of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedEntryType struct {
}

// AssetRemovedEntry is DataSet of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedEntry *AssetRemovedEntryType

// AssetRemovedDataSetType is Constraints for Entry Values
type AssetRemovedDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AssetRemovedEntryType `xml:"Entry"`
	*EventType
}

// AssetRemovedDataSet is DataSet of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedDataSet *AssetRemovedDataSetType

// AvailabilityEntryType is DataSet of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityEntryType struct {
}

// AvailabilityEntry is DataSet of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityEntry *AvailabilityEntryType

// AvailabilityDataSetType is Constraints for Entry Values
type AvailabilityDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AvailabilityEntryType `xml:"Entry"`
	*EventType
}

// AvailabilityDataSet is DataSet of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityDataSet *AvailabilityDataSetType

// AxisCouplingEntryType is DataSet of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingEntryType struct {
}

// AxisCouplingEntry is DataSet of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingEntry *AxisCouplingEntryType

// AxisCouplingDataSetType is Constraints for Entry Values
type AxisCouplingDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AxisCouplingEntryType `xml:"Entry"`
	*EventType
}

// AxisCouplingDataSet is DataSet of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingDataSet *AxisCouplingDataSetType

// AxisFeedrateOverrideEntryType is DataSet of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideEntryType struct {
}

// AxisFeedrateOverrideEntry is DataSet of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideEntry *AxisFeedrateOverrideEntryType

// AxisFeedrateOverrideDataSetType is Constraints for Entry Values
type AxisFeedrateOverrideDataSetType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*AxisFeedrateOverrideEntryType `xml:"Entry"`
	*EventType
}

// AxisFeedrateOverrideDataSet is DataSet of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideDataSet *AxisFeedrateOverrideDataSetType

// AxisInterlockEntryType is DataSet of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockEntryType struct {
}

// AxisInterlockEntry is DataSet of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockEntry *AxisInterlockEntryType

// AxisInterlockDataSetType is Constraints for Entry Values
type AxisInterlockDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*AxisInterlockEntryType `xml:"Entry"`
	*EventType
}

// AxisInterlockDataSet is DataSet of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockDataSet *AxisInterlockDataSetType

// AxisStateEntryType is DataSet of {{def(EventEnum:AXIS_STATE)}}
type AxisStateEntryType struct {
}

// AxisStateEntry is DataSet of {{def(EventEnum:AXIS_STATE)}}
type AxisStateEntry *AxisStateEntryType

// AxisStateDataSetType is Constraints for Entry Values
type AxisStateDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*AxisStateEntryType `xml:"Entry"`
	*EventType
}

// AxisStateDataSet is DataSet of {{def(EventEnum:AXIS_STATE)}}
type AxisStateDataSet *AxisStateDataSetType

// BlockEntryType is DataSet of {{def(EventEnum:BLOCK)}}
type BlockEntryType struct {
}

// BlockEntry is DataSet of {{def(EventEnum:BLOCK)}}
type BlockEntry *BlockEntryType

// BlockDataSetType is Constraints for Entry Values
type BlockDataSetType struct {
	CountAttr int               `xml:"count,attr"`
	Entry     []*BlockEntryType `xml:"Entry"`
	*EventType
}

// BlockDataSet is DataSet of {{def(EventEnum:BLOCK)}}
type BlockDataSet *BlockDataSetType

// BlockCountEntryType is DataSet of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountEntryType struct {
}

// BlockCountEntry is DataSet of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountEntry *BlockCountEntryType

// BlockCountDataSetType is Constraints for Entry Values
type BlockCountDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*BlockCountEntryType `xml:"Entry"`
	*EventType
}

// BlockCountDataSet is DataSet of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountDataSet *BlockCountDataSetType

// ChuckInterlockEntryType is DataSet of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockEntryType struct {
}

// ChuckInterlockEntry is DataSet of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockEntry *ChuckInterlockEntryType

// ChuckInterlockDataSetType is Constraints for Entry Values
type ChuckInterlockDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ChuckInterlockEntryType `xml:"Entry"`
	*EventType
}

// ChuckInterlockDataSet is DataSet of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockDataSet *ChuckInterlockDataSetType

// ChuckStateEntryType is DataSet of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateEntryType struct {
}

// ChuckStateEntry is DataSet of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateEntry *ChuckStateEntryType

// ChuckStateDataSetType is Constraints for Entry Values
type ChuckStateDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ChuckStateEntryType `xml:"Entry"`
	*EventType
}

// ChuckStateDataSet is DataSet of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateDataSet *ChuckStateDataSetType

// CodeEntryType is DataSet of {{def(EventEnum:CODE)}}
type CodeEntryType struct {
}

// CodeEntry is DataSet of {{def(EventEnum:CODE)}}
type CodeEntry *CodeEntryType

// CodeDataSetType is Constraints for Entry Values
type CodeDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*CodeEntryType `xml:"Entry"`
	*EventType
}

// CodeDataSet is DataSet of {{def(EventEnum:CODE)}}
type CodeDataSet *CodeDataSetType

// CompositionStateEntryType is DataSet of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateEntryType struct {
}

// CompositionStateEntry is DataSet of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateEntry *CompositionStateEntryType

// CompositionStateDataSetType is Constraints for Entry Values
type CompositionStateDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*CompositionStateEntryType `xml:"Entry"`
	*EventType
}

// CompositionStateDataSet is DataSet of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateDataSet *CompositionStateDataSetType

// ControllerModeEntryType is DataSet of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeEntryType struct {
}

// ControllerModeEntry is DataSet of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeEntry *ControllerModeEntryType

// ControllerModeDataSetType is Constraints for Entry Values
type ControllerModeDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ControllerModeEntryType `xml:"Entry"`
	*EventType
}

// ControllerModeDataSet is DataSet of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeDataSet *ControllerModeDataSetType

// ControllerModeOverrideEntryType is DataSet of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideEntryType struct {
}

// ControllerModeOverrideEntry is DataSet of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideEntry *ControllerModeOverrideEntryType

// ControllerModeOverrideDataSetType is Constraints for Entry Values
type ControllerModeOverrideDataSetType struct {
	CountAttr int                                `xml:"count,attr"`
	Entry     []*ControllerModeOverrideEntryType `xml:"Entry"`
	*EventType
}

// ControllerModeOverrideDataSet is DataSet of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideDataSet *ControllerModeOverrideDataSetType

// CoupledAxesEntryType is DataSet of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesEntryType struct {
}

// CoupledAxesEntry is DataSet of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesEntry *CoupledAxesEntryType

// CoupledAxesDataSetType is Constraints for Entry Values
type CoupledAxesDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*CoupledAxesEntryType `xml:"Entry"`
	*EventType
}

// CoupledAxesDataSet is DataSet of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesDataSet *CoupledAxesDataSetType

// DateCodeEntryType is DataSet of {{def(EventEnum:DATE_CODE)}}
type DateCodeEntryType struct {
}

// DateCodeEntry is DataSet of {{def(EventEnum:DATE_CODE)}}
type DateCodeEntry *DateCodeEntryType

// DateCodeDataSetType is Constraints for Entry Values
type DateCodeDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*DateCodeEntryType `xml:"Entry"`
	*EventType
}

// DateCodeDataSet is DataSet of {{def(EventEnum:DATE_CODE)}}
type DateCodeDataSet *DateCodeDataSetType

// DeviceUuidEntryType is DataSet of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidEntryType struct {
}

// DeviceUuidEntry is DataSet of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidEntry *DeviceUuidEntryType

// DeviceUuidDataSetType is Constraints for Entry Values
type DeviceUuidDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*DeviceUuidEntryType `xml:"Entry"`
	*EventType
}

// DeviceUuidDataSet is DataSet of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidDataSet *DeviceUuidDataSetType

// DirectionEntryType is DataSet of {{def(EventEnum:DIRECTION)}}
type DirectionEntryType struct {
}

// DirectionEntry is DataSet of {{def(EventEnum:DIRECTION)}}
type DirectionEntry *DirectionEntryType

// DirectionDataSetType is Constraints for Entry Values
type DirectionDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*DirectionEntryType `xml:"Entry"`
	*EventType
}

// DirectionDataSet is DataSet of {{def(EventEnum:DIRECTION)}}
type DirectionDataSet *DirectionDataSetType

// DoorStateEntryType is DataSet of {{def(EventEnum:DOOR_STATE)}}
type DoorStateEntryType struct {
}

// DoorStateEntry is DataSet of {{def(EventEnum:DOOR_STATE)}}
type DoorStateEntry *DoorStateEntryType

// DoorStateDataSetType is Constraints for Entry Values
type DoorStateDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*DoorStateEntryType `xml:"Entry"`
	*EventType
}

// DoorStateDataSet is DataSet of {{def(EventEnum:DOOR_STATE)}}
type DoorStateDataSet *DoorStateDataSetType

// EmergencyStopEntryType is DataSet of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopEntryType struct {
}

// EmergencyStopEntry is DataSet of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopEntry *EmergencyStopEntryType

// EmergencyStopDataSetType is Constraints for Entry Values
type EmergencyStopDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*EmergencyStopEntryType `xml:"Entry"`
	*EventType
}

// EmergencyStopDataSet is DataSet of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopDataSet *EmergencyStopDataSetType

// EndOfBarEntryType is DataSet of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarEntryType struct {
}

// EndOfBarEntry is DataSet of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarEntry *EndOfBarEntryType

// EndOfBarDataSetType is Constraints for Entry Values
type EndOfBarDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*EndOfBarEntryType `xml:"Entry"`
	*EventType
}

// EndOfBarDataSet is DataSet of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarDataSet *EndOfBarDataSetType

// EquipmentModeEntryType is DataSet of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeEntryType struct {
}

// EquipmentModeEntry is DataSet of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeEntry *EquipmentModeEntryType

// EquipmentModeDataSetType is Constraints for Entry Values
type EquipmentModeDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*EquipmentModeEntryType `xml:"Entry"`
	*EventType
}

// EquipmentModeDataSet is DataSet of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeDataSet *EquipmentModeDataSetType

// ExecutionEntryType is DataSet of {{def(EventEnum:EXECUTION)}}
type ExecutionEntryType struct {
}

// ExecutionEntry is DataSet of {{def(EventEnum:EXECUTION)}}
type ExecutionEntry *ExecutionEntryType

// ExecutionDataSetType is Constraints for Entry Values
type ExecutionDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*ExecutionEntryType `xml:"Entry"`
	*EventType
}

// ExecutionDataSet is DataSet of {{def(EventEnum:EXECUTION)}}
type ExecutionDataSet *ExecutionDataSetType

// FunctionalModeEntryType is DataSet of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeEntryType struct {
}

// FunctionalModeEntry is DataSet of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeEntry *FunctionalModeEntryType

// FunctionalModeDataSetType is Constraints for Entry Values
type FunctionalModeDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*FunctionalModeEntryType `xml:"Entry"`
	*EventType
}

// FunctionalModeDataSet is DataSet of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeDataSet *FunctionalModeDataSetType

// HardnessEntryType is DataSet of {{def(EventEnum:HARDNESS)}}
type HardnessEntryType struct {
}

// HardnessEntry is DataSet of {{def(EventEnum:HARDNESS)}}
type HardnessEntry *HardnessEntryType

// HardnessDataSetType is Constraints for Entry Values
type HardnessDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*HardnessEntryType `xml:"Entry"`
	*EventType
}

// HardnessDataSet is DataSet of {{def(EventEnum:HARDNESS)}}
type HardnessDataSet *HardnessDataSetType

// LineEntryType is DataSet of {{def(EventEnum:LINE)}}
type LineEntryType struct {
}

// LineEntry is DataSet of {{def(EventEnum:LINE)}}
type LineEntry *LineEntryType

// LineDataSetType is Constraints for Entry Values
type LineDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*LineEntryType `xml:"Entry"`
	*EventType
}

// LineDataSet is DataSet of {{def(EventEnum:LINE)}}
type LineDataSet *LineDataSetType

// LineLabelEntryType is DataSet of {{def(EventEnum:LINE_LABEL)}}
type LineLabelEntryType struct {
}

// LineLabelEntry is DataSet of {{def(EventEnum:LINE_LABEL)}}
type LineLabelEntry *LineLabelEntryType

// LineLabelDataSetType is Constraints for Entry Values
type LineLabelDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*LineLabelEntryType `xml:"Entry"`
	*EventType
}

// LineLabelDataSet is DataSet of {{def(EventEnum:LINE_LABEL)}}
type LineLabelDataSet *LineLabelDataSetType

// LineNumberEntryType is DataSet of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberEntryType struct {
}

// LineNumberEntry is DataSet of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberEntry *LineNumberEntryType

// LineNumberDataSetType is Constraints for Entry Values
type LineNumberDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*LineNumberEntryType `xml:"Entry"`
	*EventType
}

// LineNumberDataSet is DataSet of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberDataSet *LineNumberDataSetType

// MaterialEntryType is DataSet of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialEntryType struct {
}

// MaterialEntry is DataSet of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialEntry *MaterialEntryType

// MaterialDataSetType is Constraints for Entry Values
type MaterialDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*MaterialEntryType `xml:"Entry"`
	*EventType
}

// MaterialDataSet is DataSet of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialDataSet *MaterialDataSetType

// MaterialLayerEntryType is DataSet of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerEntryType struct {
}

// MaterialLayerEntry is DataSet of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerEntry *MaterialLayerEntryType

// MaterialLayerDataSetType is Constraints for Entry Values
type MaterialLayerDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*MaterialLayerEntryType `xml:"Entry"`
	*EventType
}

// MaterialLayerDataSet is DataSet of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerDataSet *MaterialLayerDataSetType

// MessageEntryType is DataSet of {{def(EventEnum:MESSAGE)}}
type MessageEntryType struct {
}

// MessageEntry is DataSet of {{def(EventEnum:MESSAGE)}}
type MessageEntry *MessageEntryType

// MessageDataSetType is Constraints for Entry Values
type MessageDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*MessageEntryType `xml:"Entry"`
	*EventType
}

// MessageDataSet is DataSet of {{def(EventEnum:MESSAGE)}}
type MessageDataSet *MessageDataSetType

// OperatorIdEntryType is DataSet of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdEntryType struct {
}

// OperatorIdEntry is DataSet of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdEntry *OperatorIdEntryType

// OperatorIdDataSetType is Constraints for Entry Values
type OperatorIdDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*OperatorIdEntryType `xml:"Entry"`
	*EventType
}

// OperatorIdDataSet is DataSet of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdDataSet *OperatorIdDataSetType

// PalletIdEntryType is DataSet of {{def(EventEnum:PALLET_ID)}}
type PalletIdEntryType struct {
}

// PalletIdEntry is DataSet of {{def(EventEnum:PALLET_ID)}}
type PalletIdEntry *PalletIdEntryType

// PalletIdDataSetType is Constraints for Entry Values
type PalletIdDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*PalletIdEntryType `xml:"Entry"`
	*EventType
}

// PalletIdDataSet is DataSet of {{def(EventEnum:PALLET_ID)}}
type PalletIdDataSet *PalletIdDataSetType

// PartCountEntryType is DataSet of {{def(EventEnum:PART_COUNT)}}
type PartCountEntryType struct {
}

// PartCountEntry is DataSet of {{def(EventEnum:PART_COUNT)}}
type PartCountEntry *PartCountEntryType

// PartCountDataSetType is Constraints for Entry Values
type PartCountDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*PartCountEntryType `xml:"Entry"`
	*EventType
}

// PartCountDataSet is DataSet of {{def(EventEnum:PART_COUNT)}}
type PartCountDataSet *PartCountDataSetType

// PartDetectEntryType is DataSet of {{def(EventEnum:PART_DETECT)}}
type PartDetectEntryType struct {
}

// PartDetectEntry is DataSet of {{def(EventEnum:PART_DETECT)}}
type PartDetectEntry *PartDetectEntryType

// PartDetectDataSetType is Constraints for Entry Values
type PartDetectDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PartDetectEntryType `xml:"Entry"`
	*EventType
}

// PartDetectDataSet is DataSet of {{def(EventEnum:PART_DETECT)}}
type PartDetectDataSet *PartDetectDataSetType

// PartIdEntryType is DataSet of {{def(EventEnum:PART_ID)}}
type PartIdEntryType struct {
}

// PartIdEntry is DataSet of {{def(EventEnum:PART_ID)}}
type PartIdEntry *PartIdEntryType

// PartIdDataSetType is Constraints for Entry Values
type PartIdDataSetType struct {
	CountAttr int                `xml:"count,attr"`
	Entry     []*PartIdEntryType `xml:"Entry"`
	*EventType
}

// PartIdDataSet is DataSet of {{def(EventEnum:PART_ID)}}
type PartIdDataSet *PartIdDataSetType

// PartNumberEntryType is DataSet of {{def(EventEnum:PART_NUMBER)}}
type PartNumberEntryType struct {
}

// PartNumberEntry is DataSet of {{def(EventEnum:PART_NUMBER)}}
type PartNumberEntry *PartNumberEntryType

// PartNumberDataSetType is Constraints for Entry Values
type PartNumberDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PartNumberEntryType `xml:"Entry"`
	*EventType
}

// PartNumberDataSet is DataSet of {{def(EventEnum:PART_NUMBER)}}
type PartNumberDataSet *PartNumberDataSetType

// PathFeedrateOverrideEntryType is DataSet of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideEntryType struct {
}

// PathFeedrateOverrideEntry is DataSet of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideEntry *PathFeedrateOverrideEntryType

// PathFeedrateOverrideDataSetType is Constraints for Entry Values
type PathFeedrateOverrideDataSetType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*PathFeedrateOverrideEntryType `xml:"Entry"`
	*EventType
}

// PathFeedrateOverrideDataSet is DataSet of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideDataSet *PathFeedrateOverrideDataSetType

// PathModeEntryType is DataSet of {{def(EventEnum:PATH_MODE)}}
type PathModeEntryType struct {
}

// PathModeEntry is DataSet of {{def(EventEnum:PATH_MODE)}}
type PathModeEntry *PathModeEntryType

// PathModeDataSetType is Constraints for Entry Values
type PathModeDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*PathModeEntryType `xml:"Entry"`
	*EventType
}

// PathModeDataSet is DataSet of {{def(EventEnum:PATH_MODE)}}
type PathModeDataSet *PathModeDataSetType

// PowerStateEntryType is DataSet of {{def(EventEnum:POWER_STATE)}}
type PowerStateEntryType struct {
}

// PowerStateEntry is DataSet of {{def(EventEnum:POWER_STATE)}}
type PowerStateEntry *PowerStateEntryType

// PowerStateDataSetType is Constraints for Entry Values
type PowerStateDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PowerStateEntryType `xml:"Entry"`
	*EventType
}

// PowerStateDataSet is DataSet of {{def(EventEnum:POWER_STATE)}}
type PowerStateDataSet *PowerStateDataSetType

// PowerStatusEntryType is DataSet of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusEntryType struct {
}

// PowerStatusEntry is DataSet of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusEntry *PowerStatusEntryType

// PowerStatusDataSetType is Constraints for Entry Values
type PowerStatusDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*PowerStatusEntryType `xml:"Entry"`
	*EventType
}

// PowerStatusDataSet is DataSet of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusDataSet *PowerStatusDataSetType

// ProcessTimeEntryType is DataSet of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeEntryType struct {
}

// ProcessTimeEntry is DataSet of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeEntry *ProcessTimeEntryType

// ProcessTimeDataSetType is Constraints for Entry Values
type ProcessTimeDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*ProcessTimeEntryType `xml:"Entry"`
	*EventType
}

// ProcessTimeDataSet is DataSet of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeDataSet *ProcessTimeDataSetType

// ProgramEntryType is DataSet of {{def(EventEnum:PROGRAM)}}
type ProgramEntryType struct {
}

// ProgramEntry is DataSet of {{def(EventEnum:PROGRAM)}}
type ProgramEntry *ProgramEntryType

// ProgramDataSetType is Constraints for Entry Values
type ProgramDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*ProgramEntryType `xml:"Entry"`
	*EventType
}

// ProgramDataSet is DataSet of {{def(EventEnum:PROGRAM)}}
type ProgramDataSet *ProgramDataSetType

// ProgramCommentEntryType is DataSet of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentEntryType struct {
}

// ProgramCommentEntry is DataSet of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentEntry *ProgramCommentEntryType

// ProgramCommentDataSetType is Constraints for Entry Values
type ProgramCommentDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ProgramCommentEntryType `xml:"Entry"`
	*EventType
}

// ProgramCommentDataSet is DataSet of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentDataSet *ProgramCommentDataSetType

// ProgramEditEntryType is DataSet of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditEntryType struct {
}

// ProgramEditEntry is DataSet of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditEntry *ProgramEditEntryType

// ProgramEditDataSetType is Constraints for Entry Values
type ProgramEditDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*ProgramEditEntryType `xml:"Entry"`
	*EventType
}

// ProgramEditDataSet is DataSet of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditDataSet *ProgramEditDataSetType

// ProgramEditNameEntryType is DataSet of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameEntryType struct {
}

// ProgramEditNameEntry is DataSet of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameEntry *ProgramEditNameEntryType

// ProgramEditNameDataSetType is Constraints for Entry Values
type ProgramEditNameDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ProgramEditNameEntryType `xml:"Entry"`
	*EventType
}

// ProgramEditNameDataSet is DataSet of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameDataSet *ProgramEditNameDataSetType

// ProgramHeaderEntryType is DataSet of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderEntryType struct {
}

// ProgramHeaderEntry is DataSet of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderEntry *ProgramHeaderEntryType

// ProgramHeaderDataSetType is Constraints for Entry Values
type ProgramHeaderDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*ProgramHeaderEntryType `xml:"Entry"`
	*EventType
}

// ProgramHeaderDataSet is DataSet of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderDataSet *ProgramHeaderDataSetType

// ProgramLocationEntryType is DataSet of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationEntryType struct {
}

// ProgramLocationEntry is DataSet of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationEntry *ProgramLocationEntryType

// ProgramLocationDataSetType is Constraints for Entry Values
type ProgramLocationDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ProgramLocationEntryType `xml:"Entry"`
	*EventType
}

// ProgramLocationDataSet is DataSet of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationDataSet *ProgramLocationDataSetType

// ProgramLocationTypeEntryType is DataSet of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeEntryType struct {
}

// ProgramLocationTypeEntry is DataSet of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeEntry *ProgramLocationTypeEntryType

// ProgramLocationTypeDataSetType is Constraints for Entry Values
type ProgramLocationTypeDataSetType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*ProgramLocationTypeEntryType `xml:"Entry"`
	*EventType
}

// ProgramLocationTypeDataSet is DataSet of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeDataSet *ProgramLocationTypeDataSetType

// ProgramNestLevelEntryType is DataSet of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is
//         not defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelEntryType struct {
}

// ProgramNestLevelEntry is DataSet of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is
//         not defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelEntry *ProgramNestLevelEntryType

// ProgramNestLevelDataSetType is Constraints for Entry Values
type ProgramNestLevelDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ProgramNestLevelEntryType `xml:"Entry"`
	*EventType
}

// ProgramNestLevelDataSet is DataSet of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is
//         not defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelDataSet *ProgramNestLevelDataSetType

// RotaryModeEntryType is DataSet of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeEntryType struct {
}

// RotaryModeEntry is DataSet of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeEntry *RotaryModeEntryType

// RotaryModeDataSetType is Constraints for Entry Values
type RotaryModeDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*RotaryModeEntryType `xml:"Entry"`
	*EventType
}

// RotaryModeDataSet is DataSet of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeDataSet *RotaryModeDataSetType

// RotaryVelocityOverrideEntryType is DataSet of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideEntryType struct {
}

// RotaryVelocityOverrideEntry is DataSet of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideEntry *RotaryVelocityOverrideEntryType

// RotaryVelocityOverrideDataSetType is Constraints for Entry Values
type RotaryVelocityOverrideDataSetType struct {
	CountAttr int                                `xml:"count,attr"`
	Entry     []*RotaryVelocityOverrideEntryType `xml:"Entry"`
	*EventType
}

// RotaryVelocityOverrideDataSet is DataSet of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideDataSet *RotaryVelocityOverrideDataSetType

// SerialNumberEntryType is DataSet of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberEntryType struct {
}

// SerialNumberEntry is DataSet of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberEntry *SerialNumberEntryType

// SerialNumberDataSetType is Constraints for Entry Values
type SerialNumberDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*SerialNumberEntryType `xml:"Entry"`
	*EventType
}

// SerialNumberDataSet is DataSet of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberDataSet *SerialNumberDataSetType

// SpindleInterlockEntryType is DataSet of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockEntryType struct {
}

// SpindleInterlockEntry is DataSet of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockEntry *SpindleInterlockEntryType

// SpindleInterlockDataSetType is Constraints for Entry Values
type SpindleInterlockDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*SpindleInterlockEntryType `xml:"Entry"`
	*EventType
}

// SpindleInterlockDataSet is DataSet of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockDataSet *SpindleInterlockDataSetType

// ToolAssetIdEntryType is DataSet of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdEntryType struct {
}

// ToolAssetIdEntry is DataSet of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdEntry *ToolAssetIdEntryType

// ToolAssetIdDataSetType is Constraints for Entry Values
type ToolAssetIdDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*ToolAssetIdEntryType `xml:"Entry"`
	*EventType
}

// ToolAssetIdDataSet is DataSet of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdDataSet *ToolAssetIdDataSetType

// ToolGroupEntryType is DataSet of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupEntryType struct {
}

// ToolGroupEntry is DataSet of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupEntry *ToolGroupEntryType

// ToolGroupDataSetType is Constraints for Entry Values
type ToolGroupDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*ToolGroupEntryType `xml:"Entry"`
	*EventType
}

// ToolGroupDataSet is DataSet of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupDataSet *ToolGroupDataSetType

// ToolIdEntryType is DataSet of {{def(EventEnum:TOOL_ID)}}
type ToolIdEntryType struct {
}

// ToolIdEntry is DataSet of {{def(EventEnum:TOOL_ID)}}
type ToolIdEntry *ToolIdEntryType

// ToolIdDataSetType is Constraints for Entry Values
type ToolIdDataSetType struct {
	CountAttr int                `xml:"count,attr"`
	Entry     []*ToolIdEntryType `xml:"Entry"`
	*EventType
}

// ToolIdDataSet is DataSet of {{def(EventEnum:TOOL_ID)}}
type ToolIdDataSet *ToolIdDataSetType

// ToolNumberEntryType is DataSet of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberEntryType struct {
}

// ToolNumberEntry is DataSet of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberEntry *ToolNumberEntryType

// ToolNumberDataSetType is Constraints for Entry Values
type ToolNumberDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ToolNumberEntryType `xml:"Entry"`
	*EventType
}

// ToolNumberDataSet is DataSet of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberDataSet *ToolNumberDataSetType

// ToolOffsetEntryType is DataSet of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetEntryType struct {
}

// ToolOffsetEntry is DataSet of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetEntry *ToolOffsetEntryType

// ToolOffsetDataSetType is Constraints for Entry Values
type ToolOffsetDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ToolOffsetEntryType `xml:"Entry"`
	*EventType
}

// ToolOffsetDataSet is DataSet of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetDataSet *ToolOffsetDataSetType

// UserEntryType is DataSet of {{def(EventEnum:USER)}}
type UserEntryType struct {
}

// UserEntry is DataSet of {{def(EventEnum:USER)}}
type UserEntry *UserEntryType

// UserDataSetType is Constraints for Entry Values
type UserDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*UserEntryType `xml:"Entry"`
	*EventType
}

// UserDataSet is DataSet of {{def(EventEnum:USER)}}
type UserDataSet *UserDataSetType

// VariableEntryType is DataSet of {{def(EventEnum:VARIABLE)}}
type VariableEntryType struct {
}

// VariableEntry is DataSet of {{def(EventEnum:VARIABLE)}}
type VariableEntry *VariableEntryType

// VariableDataSetType is Constraints for Entry Values
type VariableDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*VariableEntryType `xml:"Entry"`
	*EventType
}

// VariableDataSet is DataSet of {{def(EventEnum:VARIABLE)}}
type VariableDataSet *VariableDataSetType

// WaitStateEntryType is DataSet of {{def(EventEnum:WAIT_STATE)}}
type WaitStateEntryType struct {
}

// WaitStateEntry is DataSet of {{def(EventEnum:WAIT_STATE)}}
type WaitStateEntry *WaitStateEntryType

// WaitStateDataSetType is Constraints for Entry Values
type WaitStateDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*WaitStateEntryType `xml:"Entry"`
	*EventType
}

// WaitStateDataSet is DataSet of {{def(EventEnum:WAIT_STATE)}}
type WaitStateDataSet *WaitStateDataSetType

// WireEntryType is DataSet of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireEntryType struct {
}

// WireEntry is DataSet of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireEntry *WireEntryType

// WireDataSetType is Constraints for Entry Values
type WireDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*WireEntryType `xml:"Entry"`
	*EventType
}

// WireDataSet is DataSet of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireDataSet *WireDataSetType

// WorkholdingIdEntryType is DataSet of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdEntryType struct {
}

// WorkholdingIdEntry is DataSet of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdEntry *WorkholdingIdEntryType

// WorkholdingIdDataSetType is Constraints for Entry Values
type WorkholdingIdDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*WorkholdingIdEntryType `xml:"Entry"`
	*EventType
}

// WorkholdingIdDataSet is DataSet of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdDataSet *WorkholdingIdDataSetType

// WorkOffsetEntryType is DataSet of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetEntryType struct {
}

// WorkOffsetEntry is DataSet of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetEntry *WorkOffsetEntryType

// WorkOffsetDataSetType is Constraints for Entry Values
type WorkOffsetDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*WorkOffsetEntryType `xml:"Entry"`
	*EventType
}

// WorkOffsetDataSet is DataSet of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetDataSet *WorkOffsetDataSetType

// OperatingSystemEntryType is DataSet of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemEntryType struct {
}

// OperatingSystemEntry is DataSet of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemEntry *OperatingSystemEntryType

// OperatingSystemDataSetType is Constraints for Entry Values
type OperatingSystemDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*OperatingSystemEntryType `xml:"Entry"`
	*EventType
}

// OperatingSystemDataSet is DataSet of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemDataSet *OperatingSystemDataSetType

// FirmwareEntryType is DataSet of {{def(EventEnum:FIRMWARE)}}
type FirmwareEntryType struct {
}

// FirmwareEntry is DataSet of {{def(EventEnum:FIRMWARE)}}
type FirmwareEntry *FirmwareEntryType

// FirmwareDataSetType is Constraints for Entry Values
type FirmwareDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*FirmwareEntryType `xml:"Entry"`
	*EventType
}

// FirmwareDataSet is DataSet of {{def(EventEnum:FIRMWARE)}}
type FirmwareDataSet *FirmwareDataSetType

// ApplicationEntryType is DataSet of {{def(EventEnum:APPLICATION)}}
type ApplicationEntryType struct {
}

// ApplicationEntry is DataSet of {{def(EventEnum:APPLICATION)}}
type ApplicationEntry *ApplicationEntryType

// ApplicationDataSetType is Constraints for Entry Values
type ApplicationDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*ApplicationEntryType `xml:"Entry"`
	*EventType
}

// ApplicationDataSet is DataSet of {{def(EventEnum:APPLICATION)}}
type ApplicationDataSet *ApplicationDataSetType

// LibraryEntryType is DataSet of {{def(EventEnum:LIBRARY)}}
type LibraryEntryType struct {
}

// LibraryEntry is DataSet of {{def(EventEnum:LIBRARY)}}
type LibraryEntry *LibraryEntryType

// LibraryDataSetType is Constraints for Entry Values
type LibraryDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*LibraryEntryType `xml:"Entry"`
	*EventType
}

// LibraryDataSet is DataSet of {{def(EventEnum:LIBRARY)}}
type LibraryDataSet *LibraryDataSetType

// HardwareEntryType is DataSet of {{def(EventEnum:HARDWARE)}}
type HardwareEntryType struct {
}

// HardwareEntry is DataSet of {{def(EventEnum:HARDWARE)}}
type HardwareEntry *HardwareEntryType

// HardwareDataSetType is Constraints for Entry Values
type HardwareDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*HardwareEntryType `xml:"Entry"`
	*EventType
}

// HardwareDataSet is DataSet of {{def(EventEnum:HARDWARE)}}
type HardwareDataSet *HardwareDataSetType

// NetworkEntryType is DataSet of {{def(EventEnum:NETWORK)}}
type NetworkEntryType struct {
}

// NetworkEntry is DataSet of {{def(EventEnum:NETWORK)}}
type NetworkEntry *NetworkEntryType

// NetworkDataSetType is Constraints for Entry Values
type NetworkDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*NetworkEntryType `xml:"Entry"`
	*EventType
}

// NetworkDataSet is DataSet of {{def(EventEnum:NETWORK)}}
type NetworkDataSet *NetworkDataSetType

// RotationEntryType is DataSet of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationEntryType struct {
}

// RotationEntry is DataSet of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationEntry *RotationEntryType

// RotationDataSetType is Constraints for Entry Values
type RotationDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*RotationEntryType `xml:"Entry"`
	*EventType
}

// RotationDataSet is DataSet of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationDataSet *RotationDataSetType

// TranslationEntryType is DataSet of translations along X, Y, and Z axes are expressed as x,y, and
//         z respectively within a 3-dimensional vector.
type TranslationEntryType struct {
}

// TranslationEntry is DataSet of translations along X, Y, and Z axes are expressed as x,y, and
//         z respectively within a 3-dimensional vector.
type TranslationEntry *TranslationEntryType

// TranslationDataSetType is Constraints for Entry Values
type TranslationDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*TranslationEntryType `xml:"Entry"`
	*EventType
}

// TranslationDataSet is DataSet of translations along X, Y, and Z axes are expressed as x,y, and
//         z respectively within a 3-dimensional vector.
type TranslationDataSet *TranslationDataSetType

// ProcessKindIdEntryType is DataSet of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdEntryType struct {
}

// ProcessKindIdEntry is DataSet of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdEntry *ProcessKindIdEntryType

// ProcessKindIdDataSetType is Constraints for Entry Values
type ProcessKindIdDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*ProcessKindIdEntryType `xml:"Entry"`
	*EventType
}

// ProcessKindIdDataSet is DataSet of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdDataSet *ProcessKindIdDataSetType

// PartStatusEntryType is DataSet of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusEntryType struct {
}

// PartStatusEntry is DataSet of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusEntry *PartStatusEntryType

// PartStatusDataSetType is Constraints for Entry Values
type PartStatusDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PartStatusEntryType `xml:"Entry"`
	*EventType
}

// PartStatusDataSet is DataSet of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusDataSet *PartStatusDataSetType

// AlarmLimitEntryType is DataSet of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitEntryType struct {
}

// AlarmLimitEntry is DataSet of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitEntry *AlarmLimitEntryType

// AlarmLimitDataSetType is Constraints for Entry Values
type AlarmLimitDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AlarmLimitEntryType `xml:"Entry"`
	*EventType
}

// AlarmLimitDataSet is DataSet of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitDataSet *AlarmLimitDataSetType

// ProcessAggregateIdEntryType is DataSet of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdEntryType struct {
}

// ProcessAggregateIdEntry is DataSet of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdEntry *ProcessAggregateIdEntryType

// ProcessAggregateIdDataSetType is Constraints for Entry Values
type ProcessAggregateIdDataSetType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*ProcessAggregateIdEntryType `xml:"Entry"`
	*EventType
}

// ProcessAggregateIdDataSet is DataSet of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdDataSet *ProcessAggregateIdDataSetType

// PartKindIdEntryType is DataSet of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartKindIdEntryType struct {
}

// PartKindIdEntry is DataSet of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartKindIdEntry *PartKindIdEntryType

// PartKindIdDataSetType is Constraints for Entry Values
type PartKindIdDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PartKindIdEntryType `xml:"Entry"`
	*EventType
}

// PartKindIdDataSet is DataSet of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartKindIdDataSet *PartKindIdDataSetType

// AdapterURIEntryType is DataSet of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURIEntryType struct {
}

// AdapterURIEntry is DataSet of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURIEntry *AdapterURIEntryType

// AdapterURIDataSetType is Constraints for Entry Values
type AdapterURIDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AdapterURIEntryType `xml:"Entry"`
	*EventType
}

// AdapterURIDataSet is DataSet of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURIDataSet *AdapterURIDataSetType

// DeviceRemovedEntryType is DataSet of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedEntryType struct {
}

// DeviceRemovedEntry is DataSet of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedEntry *DeviceRemovedEntryType

// DeviceRemovedDataSetType is Constraints for Entry Values
type DeviceRemovedDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*DeviceRemovedEntryType `xml:"Entry"`
	*EventType
}

// DeviceRemovedDataSet is DataSet of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedDataSet *DeviceRemovedDataSetType

// DeviceChangedEntryType is DataSet of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedEntryType struct {
}

// DeviceChangedEntry is DataSet of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedEntry *DeviceChangedEntryType

// DeviceChangedDataSetType is Constraints for Entry Values
type DeviceChangedDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*DeviceChangedEntryType `xml:"Entry"`
	*EventType
}

// DeviceChangedDataSet is DataSet of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedDataSet *DeviceChangedDataSetType

// SpecificationLimitEntryType is DataSet of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitEntryType struct {
}

// SpecificationLimitEntry is DataSet of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitEntry *SpecificationLimitEntryType

// SpecificationLimitDataSetType is Constraints for Entry Values
type SpecificationLimitDataSetType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*SpecificationLimitEntryType `xml:"Entry"`
	*EventType
}

// SpecificationLimitDataSet is DataSet of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitDataSet *SpecificationLimitDataSetType

// ConnectionStatusEntryType is DataSet of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusEntryType struct {
}

// ConnectionStatusEntry is DataSet of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusEntry *ConnectionStatusEntryType

// ConnectionStatusDataSetType is Constraints for Entry Values
type ConnectionStatusDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ConnectionStatusEntryType `xml:"Entry"`
	*EventType
}

// ConnectionStatusDataSet is DataSet of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusDataSet *ConnectionStatusDataSetType

// AdapterSoftwareVersionEntryType is DataSet of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionEntryType struct {
}

// AdapterSoftwareVersionEntry is DataSet of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionEntry *AdapterSoftwareVersionEntryType

// AdapterSoftwareVersionDataSetType is Constraints for Entry Values
type AdapterSoftwareVersionDataSetType struct {
	CountAttr int                                `xml:"count,attr"`
	Entry     []*AdapterSoftwareVersionEntryType `xml:"Entry"`
	*EventType
}

// AdapterSoftwareVersionDataSet is DataSet of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionDataSet *AdapterSoftwareVersionDataSetType

// SensorAttachmentEntryType is DataSet of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentEntryType struct {
}

// SensorAttachmentEntry is DataSet of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentEntry *SensorAttachmentEntryType

// SensorAttachmentDataSetType is Constraints for Entry Values
type SensorAttachmentDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*SensorAttachmentEntryType `xml:"Entry"`
	*EventType
}

// SensorAttachmentDataSet is DataSet of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentDataSet *SensorAttachmentDataSetType

// ControlLimitEntryType is DataSet of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitEntryType struct {
}

// ControlLimitEntry is DataSet of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitEntry *ControlLimitEntryType

// ControlLimitDataSetType is Constraints for Entry Values
type ControlLimitDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*ControlLimitEntryType `xml:"Entry"`
	*EventType
}

// ControlLimitDataSet is DataSet of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitDataSet *ControlLimitDataSetType

// DeviceAddedEntryType is DataSet of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedEntryType struct {
}

// DeviceAddedEntry is DataSet of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedEntry *DeviceAddedEntryType

// DeviceAddedDataSetType is Constraints for Entry Values
type DeviceAddedDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*DeviceAddedEntryType `xml:"Entry"`
	*EventType
}

// DeviceAddedDataSet is DataSet of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedDataSet *DeviceAddedDataSetType

// MTConnectVersionEntryType is DataSet of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionEntryType struct {
}

// MTConnectVersionEntry is DataSet of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionEntry *MTConnectVersionEntryType

// MTConnectVersionDataSetType is Constraints for Entry Values
type MTConnectVersionDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*MTConnectVersionEntryType `xml:"Entry"`
	*EventType
}

// MTConnectVersionDataSet is DataSet of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionDataSet *MTConnectVersionDataSetType

// ProcessOccurrenceIdEntryType is DataSet of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdEntryType struct {
}

// ProcessOccurrenceIdEntry is DataSet of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdEntry *ProcessOccurrenceIdEntryType

// ProcessOccurrenceIdDataSetType is Constraints for Entry Values
type ProcessOccurrenceIdDataSetType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*ProcessOccurrenceIdEntryType `xml:"Entry"`
	*EventType
}

// ProcessOccurrenceIdDataSet is DataSet of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdDataSet *ProcessOccurrenceIdDataSetType

// PartGroupIdEntryType is DataSet of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartGroupIdEntryType struct {
}

// PartGroupIdEntry is DataSet of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartGroupIdEntry *PartGroupIdEntryType

// PartGroupIdDataSetType is Constraints for Entry Values
type PartGroupIdDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*PartGroupIdEntryType `xml:"Entry"`
	*EventType
}

// PartGroupIdDataSet is DataSet of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartGroupIdDataSet *PartGroupIdDataSetType

// PartUniqueIdEntryType is DataSet of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartUniqueIdEntryType struct {
}

// PartUniqueIdEntry is DataSet of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartUniqueIdEntry *PartUniqueIdEntryType

// PartUniqueIdDataSetType is Constraints for Entry Values
type PartUniqueIdDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*PartUniqueIdEntryType `xml:"Entry"`
	*EventType
}

// PartUniqueIdDataSet is DataSet of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartUniqueIdDataSet *PartUniqueIdDataSetType

// ActivationCountEntryType is DataSet of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountEntryType struct {
}

// ActivationCountEntry is DataSet of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountEntry *ActivationCountEntryType

// ActivationCountDataSetType is Constraints for Entry Values
type ActivationCountDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ActivationCountEntryType `xml:"Entry"`
	*EventType
}

// ActivationCountDataSet is DataSet of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountDataSet *ActivationCountDataSetType

// DeactivationCountEntryType is DataSet of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountEntryType struct {
}

// DeactivationCountEntry is DataSet of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountEntry *DeactivationCountEntryType

// DeactivationCountDataSetType is Constraints for Entry Values
type DeactivationCountDataSetType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*DeactivationCountEntryType `xml:"Entry"`
	*EventType
}

// DeactivationCountDataSet is DataSet of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountDataSet *DeactivationCountDataSetType

// TransferCountEntryType is DataSet of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountEntryType struct {
}

// TransferCountEntry is DataSet of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountEntry *TransferCountEntryType

// TransferCountDataSetType is Constraints for Entry Values
type TransferCountDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*TransferCountEntryType `xml:"Entry"`
	*EventType
}

// TransferCountDataSet is DataSet of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountDataSet *TransferCountDataSetType

// LoadCountEntryType is DataSet of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountEntryType struct {
}

// LoadCountEntry is DataSet of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountEntry *LoadCountEntryType

// LoadCountDataSetType is Constraints for Entry Values
type LoadCountDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*LoadCountEntryType `xml:"Entry"`
	*EventType
}

// LoadCountDataSet is DataSet of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountDataSet *LoadCountDataSetType

// PartProcessingStateEntryType is DataSet of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateEntryType struct {
}

// PartProcessingStateEntry is DataSet of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateEntry *PartProcessingStateEntryType

// PartProcessingStateDataSetType is Constraints for Entry Values
type PartProcessingStateDataSetType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*PartProcessingStateEntryType `xml:"Entry"`
	*EventType
}

// PartProcessingStateDataSet is DataSet of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateDataSet *PartProcessingStateDataSetType

// ProcessStateEntryType is DataSet of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateEntryType struct {
}

// ProcessStateEntry is DataSet of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateEntry *ProcessStateEntryType

// ProcessStateDataSetType is Constraints for Entry Values
type ProcessStateDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*ProcessStateEntryType `xml:"Entry"`
	*EventType
}

// ProcessStateDataSet is DataSet of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateDataSet *ProcessStateDataSetType

// ValveStateEntryType is DataSet of {{def(EventEnum:VALVE_STATE)}}
type ValveStateEntryType struct {
}

// ValveStateEntry is DataSet of {{def(EventEnum:VALVE_STATE)}}
type ValveStateEntry *ValveStateEntryType

// ValveStateDataSetType is Constraints for Entry Values
type ValveStateDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ValveStateEntryType `xml:"Entry"`
	*EventType
}

// ValveStateDataSet is DataSet of {{def(EventEnum:VALVE_STATE)}}
type ValveStateDataSet *ValveStateDataSetType

// LockStateEntryType is DataSet of {{def(EventEnum:LOCK_STATE)}}
type LockStateEntryType struct {
}

// LockStateEntry is DataSet of {{def(EventEnum:LOCK_STATE)}}
type LockStateEntry *LockStateEntryType

// LockStateDataSetType is Constraints for Entry Values
type LockStateDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*LockStateEntryType `xml:"Entry"`
	*EventType
}

// LockStateDataSet is DataSet of {{def(EventEnum:LOCK_STATE)}}
type LockStateDataSet *LockStateDataSetType

// UnloadCountEntryType is DataSet of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountEntryType struct {
}

// UnloadCountEntry is DataSet of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountEntry *UnloadCountEntryType

// UnloadCountDataSetType is Constraints for Entry Values
type UnloadCountDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*UnloadCountEntryType `xml:"Entry"`
	*EventType
}

// UnloadCountDataSet is DataSet of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountDataSet *UnloadCountDataSetType

// CycleCountEntryType is DataSet of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountEntryType struct {
}

// CycleCountEntry is DataSet of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountEntry *CycleCountEntryType

// CycleCountDataSetType is Constraints for Entry Values
type CycleCountDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*CycleCountEntryType `xml:"Entry"`
	*EventType
}

// CycleCountDataSet is DataSet of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountDataSet *CycleCountDataSetType

// OperatingModeEntryType is DataSet of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeEntryType struct {
}

// OperatingModeEntry is DataSet of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeEntry *OperatingModeEntryType

// OperatingModeDataSetType is Constraints for Entry Values
type OperatingModeDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*OperatingModeEntryType `xml:"Entry"`
	*EventType
}

// OperatingModeDataSet is DataSet of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeDataSet *OperatingModeDataSetType

// AssetCountEntryType is DataSet of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountEntryType struct {
}

// AssetCountEntry is DataSet of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountEntry *AssetCountEntryType

// AssetCountDataSetType is Constraints for Entry Values
type AssetCountDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AssetCountEntryType `xml:"Entry"`
	*EventType
}

// AssetCountDataSet is DataSet of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountDataSet *AssetCountDataSetType

// MaintenanceListEntryType is DataSet of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListEntryType struct {
}

// MaintenanceListEntry is DataSet of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListEntry *MaintenanceListEntryType

// MaintenanceListDataSetType is Constraints for Entry Values
type MaintenanceListDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*MaintenanceListEntryType `xml:"Entry"`
	*EventType
}

// MaintenanceListDataSet is DataSet of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListDataSet *MaintenanceListDataSetType

// FixtureIdEntryType is DataSet of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdEntryType struct {
}

// FixtureIdEntry is DataSet of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdEntry *FixtureIdEntryType

// FixtureIdDataSetType is Constraints for Entry Values
type FixtureIdDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*FixtureIdEntryType `xml:"Entry"`
	*EventType
}

// FixtureIdDataSet is DataSet of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdDataSet *FixtureIdDataSetType

// PartCountTypeEntryType is DataSet of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeEntryType struct {
}

// PartCountTypeEntry is DataSet of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeEntry *PartCountTypeEntryType

// PartCountTypeDataSetType is Constraints for Entry Values
type PartCountTypeDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*PartCountTypeEntryType `xml:"Entry"`
	*EventType
}

// PartCountTypeDataSet is DataSet of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeDataSet *PartCountTypeDataSetType

// MaterialFeedEntryType is DataSet of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedEntryType struct {
}

// MaterialFeedEntry is DataSet of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedEntry *MaterialFeedEntryType

// MaterialFeedDataSetType is Constraints for Entry Values
type MaterialFeedDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*MaterialFeedEntryType `xml:"Entry"`
	*EventType
}

// MaterialFeedDataSet is DataSet of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedDataSet *MaterialFeedDataSetType

// MaterialChangeEntryType is DataSet of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeEntryType struct {
}

// MaterialChangeEntry is DataSet of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeEntry *MaterialChangeEntryType

// MaterialChangeDataSetType is Constraints for Entry Values
type MaterialChangeDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*MaterialChangeEntryType `xml:"Entry"`
	*EventType
}

// MaterialChangeDataSet is DataSet of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeDataSet *MaterialChangeDataSetType

// MaterialRetractEntryType is DataSet of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractEntryType struct {
}

// MaterialRetractEntry is DataSet of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractEntry *MaterialRetractEntryType

// MaterialRetractDataSetType is Constraints for Entry Values
type MaterialRetractDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*MaterialRetractEntryType `xml:"Entry"`
	*EventType
}

// MaterialRetractDataSet is DataSet of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractDataSet *MaterialRetractDataSetType

// MaterialLoadEntryType is DataSet of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadEntryType struct {
}

// MaterialLoadEntry is DataSet of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadEntry *MaterialLoadEntryType

// MaterialLoadDataSetType is Constraints for Entry Values
type MaterialLoadDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*MaterialLoadEntryType `xml:"Entry"`
	*EventType
}

// MaterialLoadDataSet is DataSet of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadDataSet *MaterialLoadDataSetType

// MaterialUnloadEntryType is DataSet of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadEntryType struct {
}

// MaterialUnloadEntry is DataSet of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadEntry *MaterialUnloadEntryType

// MaterialUnloadDataSetType is Constraints for Entry Values
type MaterialUnloadDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*MaterialUnloadEntryType `xml:"Entry"`
	*EventType
}

// MaterialUnloadDataSet is DataSet of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadDataSet *MaterialUnloadDataSetType

// OpenChuckEntryType is DataSet of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckEntryType struct {
}

// OpenChuckEntry is DataSet of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckEntry *OpenChuckEntryType

// OpenChuckDataSetType is Constraints for Entry Values
type OpenChuckDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*OpenChuckEntryType `xml:"Entry"`
	*EventType
}

// OpenChuckDataSet is DataSet of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckDataSet *OpenChuckDataSetType

// OpenDoorEntryType is DataSet of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorEntryType struct {
}

// OpenDoorEntry is DataSet of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorEntry *OpenDoorEntryType

// OpenDoorDataSetType is Constraints for Entry Values
type OpenDoorDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*OpenDoorEntryType `xml:"Entry"`
	*EventType
}

// OpenDoorDataSet is DataSet of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorDataSet *OpenDoorDataSetType

// PartChangeEntryType is DataSet of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeEntryType struct {
}

// PartChangeEntry is DataSet of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeEntry *PartChangeEntryType

// PartChangeDataSetType is Constraints for Entry Values
type PartChangeDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*PartChangeEntryType `xml:"Entry"`
	*EventType
}

// PartChangeDataSet is DataSet of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeDataSet *PartChangeDataSetType

// CloseDoorEntryType is DataSet of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorEntryType struct {
}

// CloseDoorEntry is DataSet of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorEntry *CloseDoorEntryType

// CloseDoorDataSetType is Constraints for Entry Values
type CloseDoorDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*CloseDoorEntryType `xml:"Entry"`
	*EventType
}

// CloseDoorDataSet is DataSet of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorDataSet *CloseDoorDataSetType

// CloseChuckEntryType is DataSet of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckEntryType struct {
}

// CloseChuckEntry is DataSet of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckEntry *CloseChuckEntryType

// CloseChuckDataSetType is Constraints for Entry Values
type CloseChuckDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*CloseChuckEntryType `xml:"Entry"`
	*EventType
}

// CloseChuckDataSet is DataSet of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckDataSet *CloseChuckDataSetType

// InterfaceStateEntryType is DataSet of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateEntryType struct {
}

// InterfaceStateEntry is DataSet of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateEntry *InterfaceStateEntryType

// InterfaceStateDataSetType is Constraints for Entry Values
type InterfaceStateDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*InterfaceStateEntryType `xml:"Entry"`
	*EventType
}

// InterfaceStateDataSet is DataSet of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateDataSet *InterfaceStateDataSetType

// AccelerationEntryType is DataSet of {{def(SampleEnum:ACCELERATION)}}
type AccelerationEntryType struct {
}

// AccelerationEntry is DataSet of {{def(SampleEnum:ACCELERATION)}}
type AccelerationEntry *AccelerationEntryType

// AccelerationDataSetType is Constraints for Entry Values
type AccelerationDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AccelerationEntryType `xml:"Entry"`
	*EventType
}

// AccelerationDataSet is DataSet of {{def(SampleEnum:ACCELERATION)}}
type AccelerationDataSet *AccelerationDataSetType

// AccumulatedTimeEntryType is DataSet of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeEntryType struct {
}

// AccumulatedTimeEntry is DataSet of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeEntry *AccumulatedTimeEntryType

// AccumulatedTimeDataSetType is Constraints for Entry Values
type AccumulatedTimeDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AccumulatedTimeEntryType `xml:"Entry"`
	*EventType
}

// AccumulatedTimeDataSet is DataSet of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeDataSet *AccumulatedTimeDataSetType

// AmperageEntryType is DataSet of {{def(SampleEnum:AMPERAGE)}}
type AmperageEntryType struct {
}

// AmperageEntry is DataSet of {{def(SampleEnum:AMPERAGE)}}
type AmperageEntry *AmperageEntryType

// AmperageDataSetType is Constraints for Entry Values
type AmperageDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*AmperageEntryType `xml:"Entry"`
	*EventType
}

// AmperageDataSet is DataSet of {{def(SampleEnum:AMPERAGE)}}
type AmperageDataSet *AmperageDataSetType

// AngleEntryType is DataSet of {{def(SampleEnum:ANGLE)}}
type AngleEntryType struct {
}

// AngleEntry is DataSet of {{def(SampleEnum:ANGLE)}}
type AngleEntry *AngleEntryType

// AngleDataSetType is Constraints for Entry Values
type AngleDataSetType struct {
	CountAttr int               `xml:"count,attr"`
	Entry     []*AngleEntryType `xml:"Entry"`
	*EventType
}

// AngleDataSet is DataSet of {{def(SampleEnum:ANGLE)}}
type AngleDataSet *AngleDataSetType

// AngularAccelerationEntryType is DataSet of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationEntryType struct {
}

// AngularAccelerationEntry is DataSet of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationEntry *AngularAccelerationEntryType

// AngularAccelerationDataSetType is Constraints for Entry Values
type AngularAccelerationDataSetType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*AngularAccelerationEntryType `xml:"Entry"`
	*EventType
}

// AngularAccelerationDataSet is DataSet of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationDataSet *AngularAccelerationDataSetType

// AngularVelocityEntryType is DataSet of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityEntryType struct {
}

// AngularVelocityEntry is DataSet of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityEntry *AngularVelocityEntryType

// AngularVelocityDataSetType is Constraints for Entry Values
type AngularVelocityDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AngularVelocityEntryType `xml:"Entry"`
	*EventType
}

// AngularVelocityDataSet is DataSet of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityDataSet *AngularVelocityDataSetType

// AxisFeedrateEntryType is DataSet of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateEntryType struct {
}

// AxisFeedrateEntry is DataSet of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateEntry *AxisFeedrateEntryType

// AxisFeedrateDataSetType is Constraints for Entry Values
type AxisFeedrateDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*AxisFeedrateEntryType `xml:"Entry"`
	*EventType
}

// AxisFeedrateDataSet is DataSet of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateDataSet *AxisFeedrateDataSetType

// CapacityFluidEntryType is DataSet of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidEntryType struct {
}

// CapacityFluidEntry is DataSet of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidEntry *CapacityFluidEntryType

// CapacityFluidDataSetType is Constraints for Entry Values
type CapacityFluidDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*CapacityFluidEntryType `xml:"Entry"`
	*EventType
}

// CapacityFluidDataSet is DataSet of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidDataSet *CapacityFluidDataSetType

// CapacitySpatialEntryType is DataSet of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialEntryType struct {
}

// CapacitySpatialEntry is DataSet of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialEntry *CapacitySpatialEntryType

// CapacitySpatialDataSetType is Constraints for Entry Values
type CapacitySpatialDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*CapacitySpatialEntryType `xml:"Entry"`
	*EventType
}

// CapacitySpatialDataSet is DataSet of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialDataSet *CapacitySpatialDataSetType

// ConcentrationEntryType is DataSet of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationEntryType struct {
}

// ConcentrationEntry is DataSet of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationEntry *ConcentrationEntryType

// ConcentrationDataSetType is Constraints for Entry Values
type ConcentrationDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*ConcentrationEntryType `xml:"Entry"`
	*EventType
}

// ConcentrationDataSet is DataSet of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationDataSet *ConcentrationDataSetType

// ConductivityEntryType is DataSet of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityEntryType struct {
}

// ConductivityEntry is DataSet of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityEntry *ConductivityEntryType

// ConductivityDataSetType is Constraints for Entry Values
type ConductivityDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*ConductivityEntryType `xml:"Entry"`
	*EventType
}

// ConductivityDataSet is DataSet of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityDataSet *ConductivityDataSetType

// CuttingSpeedEntryType is DataSet of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedEntryType struct {
}

// CuttingSpeedEntry is DataSet of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedEntry *CuttingSpeedEntryType

// CuttingSpeedDataSetType is Constraints for Entry Values
type CuttingSpeedDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*CuttingSpeedEntryType `xml:"Entry"`
	*EventType
}

// CuttingSpeedDataSet is DataSet of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedDataSet *CuttingSpeedDataSetType

// DensityEntryType is DataSet of {{def(SampleEnum:DENSITY)}}
type DensityEntryType struct {
}

// DensityEntry is DataSet of {{def(SampleEnum:DENSITY)}}
type DensityEntry *DensityEntryType

// DensityDataSetType is Constraints for Entry Values
type DensityDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*DensityEntryType `xml:"Entry"`
	*EventType
}

// DensityDataSet is DataSet of {{def(SampleEnum:DENSITY)}}
type DensityDataSet *DensityDataSetType

// DepositionAccelerationVolumetricEntryType is DataSet of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricEntryType struct {
}

// DepositionAccelerationVolumetricEntry is DataSet of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricEntry *DepositionAccelerationVolumetricEntryType

// DepositionAccelerationVolumetricDataSetType is Constraints for Entry Values
type DepositionAccelerationVolumetricDataSetType struct {
	CountAttr int                                          `xml:"count,attr"`
	Entry     []*DepositionAccelerationVolumetricEntryType `xml:"Entry"`
	*EventType
}

// DepositionAccelerationVolumetricDataSet is DataSet of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricDataSet *DepositionAccelerationVolumetricDataSetType

// DepositionDensityEntryType is DataSet of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityEntryType struct {
}

// DepositionDensityEntry is DataSet of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityEntry *DepositionDensityEntryType

// DepositionDensityDataSetType is Constraints for Entry Values
type DepositionDensityDataSetType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*DepositionDensityEntryType `xml:"Entry"`
	*EventType
}

// DepositionDensityDataSet is DataSet of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityDataSet *DepositionDensityDataSetType

// DepositionMassEntryType is DataSet of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassEntryType struct {
}

// DepositionMassEntry is DataSet of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassEntry *DepositionMassEntryType

// DepositionMassDataSetType is Constraints for Entry Values
type DepositionMassDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*DepositionMassEntryType `xml:"Entry"`
	*EventType
}

// DepositionMassDataSet is DataSet of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassDataSet *DepositionMassDataSetType

// DepositionRateVolumetricEntryType is DataSet of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricEntryType struct {
}

// DepositionRateVolumetricEntry is DataSet of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricEntry *DepositionRateVolumetricEntryType

// DepositionRateVolumetricDataSetType is Constraints for Entry Values
type DepositionRateVolumetricDataSetType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*DepositionRateVolumetricEntryType `xml:"Entry"`
	*EventType
}

// DepositionRateVolumetricDataSet is DataSet of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricDataSet *DepositionRateVolumetricDataSetType

// DepositionVolumeEntryType is DataSet of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeEntryType struct {
}

// DepositionVolumeEntry is DataSet of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeEntry *DepositionVolumeEntryType

// DepositionVolumeDataSetType is Constraints for Entry Values
type DepositionVolumeDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*DepositionVolumeEntryType `xml:"Entry"`
	*EventType
}

// DepositionVolumeDataSet is DataSet of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeDataSet *DepositionVolumeDataSetType

// DisplacementEntryType is DataSet of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementEntryType struct {
}

// DisplacementEntry is DataSet of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementEntry *DisplacementEntryType

// DisplacementDataSetType is Constraints for Entry Values
type DisplacementDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*DisplacementEntryType `xml:"Entry"`
	*EventType
}

// DisplacementDataSet is DataSet of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementDataSet *DisplacementDataSetType

// ElectricalEnergyEntryType is DataSet of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyEntryType struct {
}

// ElectricalEnergyEntry is DataSet of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyEntry *ElectricalEnergyEntryType

// ElectricalEnergyDataSetType is Constraints for Entry Values
type ElectricalEnergyDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ElectricalEnergyEntryType `xml:"Entry"`
	*EventType
}

// ElectricalEnergyDataSet is DataSet of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyDataSet *ElectricalEnergyDataSetType

// EquipmentTimerEntryType is DataSet of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerEntryType struct {
}

// EquipmentTimerEntry is DataSet of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerEntry *EquipmentTimerEntryType

// EquipmentTimerDataSetType is Constraints for Entry Values
type EquipmentTimerDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*EquipmentTimerEntryType `xml:"Entry"`
	*EventType
}

// EquipmentTimerDataSet is DataSet of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerDataSet *EquipmentTimerDataSetType

// FillLevelEntryType is DataSet of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelEntryType struct {
}

// FillLevelEntry is DataSet of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelEntry *FillLevelEntryType

// FillLevelDataSetType is Constraints for Entry Values
type FillLevelDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*FillLevelEntryType `xml:"Entry"`
	*EventType
}

// FillLevelDataSet is DataSet of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelDataSet *FillLevelDataSetType

// FlowEntryType is DataSet of {{def(SampleEnum:FLOW)}}
type FlowEntryType struct {
}

// FlowEntry is DataSet of {{def(SampleEnum:FLOW)}}
type FlowEntry *FlowEntryType

// FlowDataSetType is Constraints for Entry Values
type FlowDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*FlowEntryType `xml:"Entry"`
	*EventType
}

// FlowDataSet is DataSet of {{def(SampleEnum:FLOW)}}
type FlowDataSet *FlowDataSetType

// FrequencyEntryType is DataSet of {{def(SampleEnum:FREQUENCY)}}
type FrequencyEntryType struct {
}

// FrequencyEntry is DataSet of {{def(SampleEnum:FREQUENCY)}}
type FrequencyEntry *FrequencyEntryType

// FrequencyDataSetType is Constraints for Entry Values
type FrequencyDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*FrequencyEntryType `xml:"Entry"`
	*EventType
}

// FrequencyDataSet is DataSet of {{def(SampleEnum:FREQUENCY)}}
type FrequencyDataSet *FrequencyDataSetType

// GlobalPositionEntryType is DataSet of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionEntryType struct {
}

// GlobalPositionEntry is DataSet of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionEntry *GlobalPositionEntryType

// GlobalPositionDataSetType is Constraints for Entry Values
type GlobalPositionDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*GlobalPositionEntryType `xml:"Entry"`
	*EventType
}

// GlobalPositionDataSet is DataSet of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionDataSet *GlobalPositionDataSetType

// LengthEntryType is DataSet of {{def(SampleEnum:LENGTH)}}
type LengthEntryType struct {
}

// LengthEntry is DataSet of {{def(SampleEnum:LENGTH)}}
type LengthEntry *LengthEntryType

// LengthDataSetType is Constraints for Entry Values
type LengthDataSetType struct {
	CountAttr int                `xml:"count,attr"`
	Entry     []*LengthEntryType `xml:"Entry"`
	*EventType
}

// LengthDataSet is DataSet of {{def(SampleEnum:LENGTH)}}
type LengthDataSet *LengthDataSetType

// LevelEntryType is DataSet of {{def(SampleEnum:LEVEL)}}
type LevelEntryType struct {
}

// LevelEntry is DataSet of {{def(SampleEnum:LEVEL)}}
type LevelEntry *LevelEntryType

// LevelDataSetType is Constraints for Entry Values
type LevelDataSetType struct {
	CountAttr int               `xml:"count,attr"`
	Entry     []*LevelEntryType `xml:"Entry"`
	*EventType
}

// LevelDataSet is DataSet of {{def(SampleEnum:LEVEL)}}
type LevelDataSet *LevelDataSetType

// LinearForceEntryType is DataSet of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceEntryType struct {
}

// LinearForceEntry is DataSet of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceEntry *LinearForceEntryType

// LinearForceDataSetType is Constraints for Entry Values
type LinearForceDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*LinearForceEntryType `xml:"Entry"`
	*EventType
}

// LinearForceDataSet is DataSet of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceDataSet *LinearForceDataSetType

// LoadEntryType is DataSet of {{def(SampleEnum:LOAD)}}
type LoadEntryType struct {
}

// LoadEntry is DataSet of {{def(SampleEnum:LOAD)}}
type LoadEntry *LoadEntryType

// LoadDataSetType is Constraints for Entry Values
type LoadDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*LoadEntryType `xml:"Entry"`
	*EventType
}

// LoadDataSet is DataSet of {{def(SampleEnum:LOAD)}}
type LoadDataSet *LoadDataSetType

// MassEntryType is DataSet of {{def(SampleEnum:MASS)}}
type MassEntryType struct {
}

// MassEntry is DataSet of {{def(SampleEnum:MASS)}}
type MassEntry *MassEntryType

// MassDataSetType is Constraints for Entry Values
type MassDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*MassEntryType `xml:"Entry"`
	*EventType
}

// MassDataSet is DataSet of {{def(SampleEnum:MASS)}}
type MassDataSet *MassDataSetType

// PathFeedrateEntryType is DataSet of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateEntryType struct {
}

// PathFeedrateEntry is DataSet of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateEntry *PathFeedrateEntryType

// PathFeedrateDataSetType is Constraints for Entry Values
type PathFeedrateDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*PathFeedrateEntryType `xml:"Entry"`
	*EventType
}

// PathFeedrateDataSet is DataSet of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateDataSet *PathFeedrateDataSetType

// PathFeedratePerRevolutionEntryType is DataSet of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionEntryType struct {
}

// PathFeedratePerRevolutionEntry is DataSet of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionEntry *PathFeedratePerRevolutionEntryType

// PathFeedratePerRevolutionDataSetType is Constraints for Entry Values
type PathFeedratePerRevolutionDataSetType struct {
	CountAttr int                                   `xml:"count,attr"`
	Entry     []*PathFeedratePerRevolutionEntryType `xml:"Entry"`
	*EventType
}

// PathFeedratePerRevolutionDataSet is DataSet of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionDataSet *PathFeedratePerRevolutionDataSetType

// PathPositionEntryType is DataSet of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionEntryType struct {
}

// PathPositionEntry is DataSet of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionEntry *PathPositionEntryType

// PathPositionDataSetType is Constraints for Entry Values
type PathPositionDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*PathPositionEntryType `xml:"Entry"`
	*EventType
}

// PathPositionDataSet is DataSet of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionDataSet *PathPositionDataSetType

// PHEntryType is DataSet of {{def(SampleEnum:PH)}}
type PHEntryType struct {
}

// PHEntry is DataSet of {{def(SampleEnum:PH)}}
type PHEntry *PHEntryType

// PHDataSetType is Constraints for Entry Values
type PHDataSetType struct {
	CountAttr int            `xml:"count,attr"`
	Entry     []*PHEntryType `xml:"Entry"`
	*EventType
}

// PHDataSet is DataSet of {{def(SampleEnum:PH)}}
type PHDataSet *PHDataSetType

// PositionEntryType is DataSet of {{def(SampleEnum:POSITION)}}
type PositionEntryType struct {
}

// PositionEntry is DataSet of {{def(SampleEnum:POSITION)}}
type PositionEntry *PositionEntryType

// PositionDataSetType is Constraints for Entry Values
type PositionDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*PositionEntryType `xml:"Entry"`
	*EventType
}

// PositionDataSet is DataSet of {{def(SampleEnum:POSITION)}}
type PositionDataSet *PositionDataSetType

// PowerFactorEntryType is DataSet of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorEntryType struct {
}

// PowerFactorEntry is DataSet of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorEntry *PowerFactorEntryType

// PowerFactorDataSetType is Constraints for Entry Values
type PowerFactorDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*PowerFactorEntryType `xml:"Entry"`
	*EventType
}

// PowerFactorDataSet is DataSet of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorDataSet *PowerFactorDataSetType

// PressureEntryType is DataSet of Description
type PressureEntryType struct {
}

// PressureEntry is DataSet of Description
type PressureEntry *PressureEntryType

// PressureDataSetType is Constraints for Entry Values
type PressureDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*PressureEntryType `xml:"Entry"`
	*EventType
}

// PressureDataSet is DataSet of Description
type PressureDataSet *PressureDataSetType

// ProcessTimerEntryType is DataSet of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerEntryType struct {
}

// ProcessTimerEntry is DataSet of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerEntry *ProcessTimerEntryType

// ProcessTimerDataSetType is Constraints for Entry Values
type ProcessTimerDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*ProcessTimerEntryType `xml:"Entry"`
	*EventType
}

// ProcessTimerDataSet is DataSet of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerDataSet *ProcessTimerDataSetType

// ResistanceEntryType is DataSet of {{def(SampleEnum:RESISTANCE)}}
type ResistanceEntryType struct {
}

// ResistanceEntry is DataSet of {{def(SampleEnum:RESISTANCE)}}
type ResistanceEntry *ResistanceEntryType

// ResistanceDataSetType is Constraints for Entry Values
type ResistanceDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ResistanceEntryType `xml:"Entry"`
	*EventType
}

// ResistanceDataSet is DataSet of {{def(SampleEnum:RESISTANCE)}}
type ResistanceDataSet *ResistanceDataSetType

// RotaryVelocityEntryType is DataSet of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityEntryType struct {
}

// RotaryVelocityEntry is DataSet of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityEntry *RotaryVelocityEntryType

// RotaryVelocityDataSetType is Constraints for Entry Values
type RotaryVelocityDataSetType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*RotaryVelocityEntryType `xml:"Entry"`
	*EventType
}

// RotaryVelocityDataSet is DataSet of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityDataSet *RotaryVelocityDataSetType

// SoundLevelEntryType is DataSet of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelEntryType struct {
}

// SoundLevelEntry is DataSet of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelEntry *SoundLevelEntryType

// SoundLevelDataSetType is Constraints for Entry Values
type SoundLevelDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*SoundLevelEntryType `xml:"Entry"`
	*EventType
}

// SoundLevelDataSet is DataSet of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelDataSet *SoundLevelDataSetType

// SpindleSpeedEntryType is DataSet of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedEntryType struct {
}

// SpindleSpeedEntry is DataSet of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedEntry *SpindleSpeedEntryType

// SpindleSpeedDataSetType is Constraints for Entry Values
type SpindleSpeedDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*SpindleSpeedEntryType `xml:"Entry"`
	*EventType
}

// SpindleSpeedDataSet is DataSet of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedDataSet *SpindleSpeedDataSetType

// StrainEntryType is DataSet of {{def(SampleEnum:STRAIN)}}
type StrainEntryType struct {
}

// StrainEntry is DataSet of {{def(SampleEnum:STRAIN)}}
type StrainEntry *StrainEntryType

// StrainDataSetType is Constraints for Entry Values
type StrainDataSetType struct {
	CountAttr int                `xml:"count,attr"`
	Entry     []*StrainEntryType `xml:"Entry"`
	*EventType
}

// StrainDataSet is DataSet of {{def(SampleEnum:STRAIN)}}
type StrainDataSet *StrainDataSetType

// TemperatureEntryType is DataSet of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureEntryType struct {
}

// TemperatureEntry is DataSet of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureEntry *TemperatureEntryType

// TemperatureDataSetType is Constraints for Entry Values
type TemperatureDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*TemperatureEntryType `xml:"Entry"`
	*EventType
}

// TemperatureDataSet is DataSet of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureDataSet *TemperatureDataSetType

// TensionEntryType is DataSet of {{def(SampleEnum:TENSION)}}
type TensionEntryType struct {
}

// TensionEntry is DataSet of {{def(SampleEnum:TENSION)}}
type TensionEntry *TensionEntryType

// TensionDataSetType is Constraints for Entry Values
type TensionDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*TensionEntryType `xml:"Entry"`
	*EventType
}

// TensionDataSet is DataSet of {{def(SampleEnum:TENSION)}}
type TensionDataSet *TensionDataSetType

// TiltEntryType is DataSet of {{def(SampleEnum:TILT)}}
type TiltEntryType struct {
}

// TiltEntry is DataSet of {{def(SampleEnum:TILT)}}
type TiltEntry *TiltEntryType

// TiltDataSetType is Constraints for Entry Values
type TiltDataSetType struct {
	CountAttr int              `xml:"count,attr"`
	Entry     []*TiltEntryType `xml:"Entry"`
	*EventType
}

// TiltDataSet is DataSet of {{def(SampleEnum:TILT)}}
type TiltDataSet *TiltDataSetType

// TorqueEntryType is DataSet of {{def(SampleEnum:TORQUE)}}
type TorqueEntryType struct {
}

// TorqueEntry is DataSet of {{def(SampleEnum:TORQUE)}}
type TorqueEntry *TorqueEntryType

// TorqueDataSetType is Constraints for Entry Values
type TorqueDataSetType struct {
	CountAttr int                `xml:"count,attr"`
	Entry     []*TorqueEntryType `xml:"Entry"`
	*EventType
}

// TorqueDataSet is DataSet of {{def(SampleEnum:TORQUE)}}
type TorqueDataSet *TorqueDataSetType

// VelocityEntryType is DataSet of {{def(SampleEnum:VELOCITY)}}
type VelocityEntryType struct {
}

// VelocityEntry is DataSet of {{def(SampleEnum:VELOCITY)}}
type VelocityEntry *VelocityEntryType

// VelocityDataSetType is Constraints for Entry Values
type VelocityDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*VelocityEntryType `xml:"Entry"`
	*EventType
}

// VelocityDataSet is DataSet of {{def(SampleEnum:VELOCITY)}}
type VelocityDataSet *VelocityDataSetType

// ViscosityEntryType is DataSet of {{def(SampleEnum:VISCOSITY)}}
type ViscosityEntryType struct {
}

// ViscosityEntry is DataSet of {{def(SampleEnum:VISCOSITY)}}
type ViscosityEntry *ViscosityEntryType

// ViscosityDataSetType is Constraints for Entry Values
type ViscosityDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*ViscosityEntryType `xml:"Entry"`
	*EventType
}

// ViscosityDataSet is DataSet of {{def(SampleEnum:VISCOSITY)}}
type ViscosityDataSet *ViscosityDataSetType

// VoltageEntryType is DataSet of {{def(SampleEnum:VOLTAGE)}}
type VoltageEntryType struct {
}

// VoltageEntry is DataSet of {{def(SampleEnum:VOLTAGE)}}
type VoltageEntry *VoltageEntryType

// VoltageDataSetType is Constraints for Entry Values
type VoltageDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*VoltageEntryType `xml:"Entry"`
	*EventType
}

// VoltageDataSet is DataSet of {{def(SampleEnum:VOLTAGE)}}
type VoltageDataSet *VoltageDataSetType

// VoltAmpereEntryType is DataSet of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereEntryType struct {
}

// VoltAmpereEntry is DataSet of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereEntry *VoltAmpereEntryType

// VoltAmpereDataSetType is Constraints for Entry Values
type VoltAmpereDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*VoltAmpereEntryType `xml:"Entry"`
	*EventType
}

// VoltAmpereDataSet is DataSet of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereDataSet *VoltAmpereDataSetType

// VoltAmpereReactiveEntryType is DataSet of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveEntryType struct {
}

// VoltAmpereReactiveEntry is DataSet of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveEntry *VoltAmpereReactiveEntryType

// VoltAmpereReactiveDataSetType is Constraints for Entry Values
type VoltAmpereReactiveDataSetType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*VoltAmpereReactiveEntryType `xml:"Entry"`
	*EventType
}

// VoltAmpereReactiveDataSet is DataSet of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveDataSet *VoltAmpereReactiveDataSetType

// VolumeFluidEntryType is DataSet of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidEntryType struct {
}

// VolumeFluidEntry is DataSet of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidEntry *VolumeFluidEntryType

// VolumeFluidDataSetType is Constraints for Entry Values
type VolumeFluidDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*VolumeFluidEntryType `xml:"Entry"`
	*EventType
}

// VolumeFluidDataSet is DataSet of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidDataSet *VolumeFluidDataSetType

// VolumeSpatialEntryType is DataSet of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialEntryType struct {
}

// VolumeSpatialEntry is DataSet of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialEntry *VolumeSpatialEntryType

// VolumeSpatialDataSetType is Constraints for Entry Values
type VolumeSpatialDataSetType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*VolumeSpatialEntryType `xml:"Entry"`
	*EventType
}

// VolumeSpatialDataSet is DataSet of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialDataSet *VolumeSpatialDataSetType

// WattageEntryType is DataSet of {{def(SampleEnum:WATTAGE)}}
type WattageEntryType struct {
}

// WattageEntry is DataSet of {{def(SampleEnum:WATTAGE)}}
type WattageEntry *WattageEntryType

// WattageDataSetType is Constraints for Entry Values
type WattageDataSetType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*WattageEntryType `xml:"Entry"`
	*EventType
}

// WattageDataSet is DataSet of {{def(SampleEnum:WATTAGE)}}
type WattageDataSet *WattageDataSetType

// AmperageDCEntryType is DataSet of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCEntryType struct {
}

// AmperageDCEntry is DataSet of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCEntry *AmperageDCEntryType

// AmperageDCDataSetType is Constraints for Entry Values
type AmperageDCDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AmperageDCEntryType `xml:"Entry"`
	*EventType
}

// AmperageDCDataSet is DataSet of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCDataSet *AmperageDCDataSetType

// AmperageACEntryType is DataSet of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACEntryType struct {
}

// AmperageACEntry is DataSet of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACEntry *AmperageACEntryType

// AmperageACDataSetType is Constraints for Entry Values
type AmperageACDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AmperageACEntryType `xml:"Entry"`
	*EventType
}

// AmperageACDataSet is DataSet of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACDataSet *AmperageACDataSetType

// VoltageACEntryType is DataSet of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACEntryType struct {
}

// VoltageACEntry is DataSet of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACEntry *VoltageACEntryType

// VoltageACDataSetType is Constraints for Entry Values
type VoltageACDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*VoltageACEntryType `xml:"Entry"`
	*EventType
}

// VoltageACDataSet is DataSet of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACDataSet *VoltageACDataSetType

// VoltageDCEntryType is DataSet of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCEntryType struct {
}

// VoltageDCEntry is DataSet of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCEntry *VoltageDCEntryType

// VoltageDCDataSetType is Constraints for Entry Values
type VoltageDCDataSetType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*VoltageDCEntryType `xml:"Entry"`
	*EventType
}

// VoltageDCDataSet is DataSet of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCDataSet *VoltageDCDataSetType

// XDimensionEntryType is DataSet of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionEntryType struct {
}

// XDimensionEntry is DataSet of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionEntry *XDimensionEntryType

// XDimensionDataSetType is Constraints for Entry Values
type XDimensionDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*XDimensionEntryType `xml:"Entry"`
	*EventType
}

// XDimensionDataSet is DataSet of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionDataSet *XDimensionDataSetType

// YDimensionEntryType is DataSet of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionEntryType struct {
}

// YDimensionEntry is DataSet of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionEntry *YDimensionEntryType

// YDimensionDataSetType is Constraints for Entry Values
type YDimensionDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*YDimensionEntryType `xml:"Entry"`
	*EventType
}

// YDimensionDataSet is DataSet of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionDataSet *YDimensionDataSetType

// ZDimensionEntryType is DataSet of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionEntryType struct {
}

// ZDimensionEntry is DataSet of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionEntry *ZDimensionEntryType

// ZDimensionDataSetType is Constraints for Entry Values
type ZDimensionDataSetType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*ZDimensionEntryType `xml:"Entry"`
	*EventType
}

// ZDimensionDataSet is DataSet of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionDataSet *ZDimensionDataSetType

// DiameterEntryType is DataSet of {{def(SampleEnum:DIAMETER)}}
type DiameterEntryType struct {
}

// DiameterEntry is DataSet of {{def(SampleEnum:DIAMETER)}}
type DiameterEntry *DiameterEntryType

// DiameterDataSetType is Constraints for Entry Values
type DiameterDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*DiameterEntryType `xml:"Entry"`
	*EventType
}

// DiameterDataSet is DataSet of {{def(SampleEnum:DIAMETER)}}
type DiameterDataSet *DiameterDataSetType

// OrientationEntryType is DataSet of {{def(SampleEnum:ORIENTATION)}}
type OrientationEntryType struct {
}

// OrientationEntry is DataSet of {{def(SampleEnum:ORIENTATION)}}
type OrientationEntry *OrientationEntryType

// OrientationDataSetType is Constraints for Entry Values
type OrientationDataSetType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*OrientationEntryType `xml:"Entry"`
	*EventType
}

// OrientationDataSet is DataSet of {{def(SampleEnum:ORIENTATION)}}
type OrientationDataSet *OrientationDataSetType

// HumidityRelativeEntryType is DataSet of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeEntryType struct {
}

// HumidityRelativeEntry is DataSet of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeEntry *HumidityRelativeEntryType

// HumidityRelativeDataSetType is Constraints for Entry Values
type HumidityRelativeDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*HumidityRelativeEntryType `xml:"Entry"`
	*EventType
}

// HumidityRelativeDataSet is DataSet of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeDataSet *HumidityRelativeDataSetType

// HumidityAbsoluteEntryType is DataSet of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteEntryType struct {
}

// HumidityAbsoluteEntry is DataSet of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteEntry *HumidityAbsoluteEntryType

// HumidityAbsoluteDataSetType is Constraints for Entry Values
type HumidityAbsoluteDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*HumidityAbsoluteEntryType `xml:"Entry"`
	*EventType
}

// HumidityAbsoluteDataSet is DataSet of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteDataSet *HumidityAbsoluteDataSetType

// HumiditySpecificEntryType is DataSet of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificEntryType struct {
}

// HumiditySpecificEntry is DataSet of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificEntry *HumiditySpecificEntryType

// HumiditySpecificDataSetType is Constraints for Entry Values
type HumiditySpecificDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*HumiditySpecificEntryType `xml:"Entry"`
	*EventType
}

// HumiditySpecificDataSet is DataSet of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificDataSet *HumiditySpecificDataSetType

// PressurizationRateEntryType is DataSet of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateEntryType struct {
}

// PressurizationRateEntry is DataSet of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateEntry *PressurizationRateEntryType

// PressurizationRateDataSetType is Constraints for Entry Values
type PressurizationRateDataSetType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*PressurizationRateEntryType `xml:"Entry"`
	*EventType
}

// PressurizationRateDataSet is DataSet of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateDataSet *PressurizationRateDataSetType

// DecelerationEntryType is DataSet of {{def(SampleEnum:DECELERATION)}}
type DecelerationEntryType struct {
}

// DecelerationEntry is DataSet of {{def(SampleEnum:DECELERATION)}}
type DecelerationEntry *DecelerationEntryType

// DecelerationDataSetType is Constraints for Entry Values
type DecelerationDataSetType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*DecelerationEntryType `xml:"Entry"`
	*EventType
}

// DecelerationDataSet is DataSet of {{def(SampleEnum:DECELERATION)}}
type DecelerationDataSet *DecelerationDataSetType

// AssetUpdateRateEntryType is DataSet of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateEntryType struct {
}

// AssetUpdateRateEntry is DataSet of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateEntry *AssetUpdateRateEntryType

// AssetUpdateRateDataSetType is Constraints for Entry Values
type AssetUpdateRateDataSetType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AssetUpdateRateEntryType `xml:"Entry"`
	*EventType
}

// AssetUpdateRateDataSet is DataSet of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateDataSet *AssetUpdateRateDataSetType

// AngularDecelerationEntryType is DataSet of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationEntryType struct {
}

// AngularDecelerationEntry is DataSet of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationEntry *AngularDecelerationEntryType

// AngularDecelerationDataSetType is Constraints for Entry Values
type AngularDecelerationDataSetType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*AngularDecelerationEntryType `xml:"Entry"`
	*EventType
}

// AngularDecelerationDataSet is DataSet of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationDataSet *AngularDecelerationDataSetType

// ObservationUpdateRateEntryType is DataSet of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateEntryType struct {
}

// ObservationUpdateRateEntry is DataSet of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateEntry *ObservationUpdateRateEntryType

// ObservationUpdateRateDataSetType is Constraints for Entry Values
type ObservationUpdateRateDataSetType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*ObservationUpdateRateEntryType `xml:"Entry"`
	*EventType
}

// ObservationUpdateRateDataSet is DataSet of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateDataSet *ObservationUpdateRateDataSetType

// PressureAbsoluteEntryType is DataSet of The force per unit area measured relative to a vacuum.
type PressureAbsoluteEntryType struct {
}

// PressureAbsoluteEntry is DataSet of The force per unit area measured relative to a vacuum.
type PressureAbsoluteEntry *PressureAbsoluteEntryType

// PressureAbsoluteDataSetType is Constraints for Entry Values
type PressureAbsoluteDataSetType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*PressureAbsoluteEntryType `xml:"Entry"`
	*EventType
}

// PressureAbsoluteDataSet is DataSet of The force per unit area measured relative to a vacuum.
type PressureAbsoluteDataSet *PressureAbsoluteDataSetType

// OpennessEntryType is DataSet of {{def(SampleEnum:OPENNESS)}}
type OpennessEntryType struct {
}

// OpennessEntry is DataSet of {{def(SampleEnum:OPENNESS)}}
type OpennessEntry *OpennessEntryType

// OpennessDataSetType is Constraints for Entry Values
type OpennessDataSetType struct {
	CountAttr int                  `xml:"count,attr"`
	Entry     []*OpennessEntryType `xml:"Entry"`
	*EventType
}

// OpennessDataSet is DataSet of {{def(SampleEnum:OPENNESS)}}
type OpennessDataSet *OpennessDataSetType

// TableCellType is A cell of a table
type TableCellType struct {
	KeyAttr string `xml:"key,attr"`
}

// TableCell is A cell of a table
type TableCell *TableCellType

// TableEntryType is {{term(key-value pair)}} published as part of a {{block(Table)}}. >
//         Note: In the {{term(XML)}} representation, {{block(TableEntry)}}
//         **MUST** appear as {{block(Entry)}}.
type TableEntryType struct {
	TableCell []*TableCellType `xml:"TableCell"`
	*EntryType
}

// TableEntry is {{term(key-value pair)}} published as part of a {{block(Table)}}. >
//         Note: In the {{term(XML)}} representation, {{block(TableEntry)}}
//         **MUST** appear as {{block(Entry)}}.
type TableEntry *TableEntryType

// ActiveAxesTableEntryType is Constraints for Cell Values
type ActiveAxesTableEntryType struct {
	Cell []*ActiveAxesCellType `xml:"Cell"`
	*EntryType
}

// ActiveAxesTableEntry is Table Entry of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesTableEntry *ActiveAxesTableEntryType

// ActiveAxesCellType is Cell of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesCellType struct {
}

// ActiveAxesCell is Cell of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesCell *ActiveAxesCellType

// ActiveAxesTableType is Constraints for Entry Values
type ActiveAxesTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ActiveAxesTableEntryType `xml:"Entry"`
	*EventType
}

// ActiveAxesTable is Table of {{def(EventEnum:ACTIVE_AXES)}}
type ActiveAxesTable *ActiveAxesTableType

// ActuatorStateTableEntryType is Constraints for Cell Values
type ActuatorStateTableEntryType struct {
	Cell []*ActuatorStateCellType `xml:"Cell"`
	*EntryType
}

// ActuatorStateTableEntry is Table Entry of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateTableEntry *ActuatorStateTableEntryType

// ActuatorStateCellType is Cell of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateCellType struct {
}

// ActuatorStateCell is Cell of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateCell *ActuatorStateCellType

// ActuatorStateTableType is Constraints for Entry Values
type ActuatorStateTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*ActuatorStateTableEntryType `xml:"Entry"`
	*EventType
}

// ActuatorStateTable is Table of {{def(EventEnum:ACTUATOR_STATE)}}
type ActuatorStateTable *ActuatorStateTableType

// AssetChangedTableEntryType is Constraints for Cell Values
type AssetChangedTableEntryType struct {
	Cell []*AssetChangedCellType `xml:"Cell"`
	*EntryType
}

// AssetChangedTableEntry is Table Entry of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedTableEntry *AssetChangedTableEntryType

// AssetChangedCellType is Cell of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedCellType struct {
}

// AssetChangedCell is Cell of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedCell *AssetChangedCellType

// AssetChangedTableType is Constraints for Entry Values
type AssetChangedTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AssetChangedTableEntryType `xml:"Entry"`
	*EventType
}

// AssetChangedTable is Table of {{def(EventEnum:ASSET_CHANGED)}}
type AssetChangedTable *AssetChangedTableType

// AssetRemovedTableEntryType is Constraints for Cell Values
type AssetRemovedTableEntryType struct {
	Cell []*AssetRemovedCellType `xml:"Cell"`
	*EntryType
}

// AssetRemovedTableEntry is Table Entry of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedTableEntry *AssetRemovedTableEntryType

// AssetRemovedCellType is Cell of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedCellType struct {
}

// AssetRemovedCell is Cell of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedCell *AssetRemovedCellType

// AssetRemovedTableType is Constraints for Entry Values
type AssetRemovedTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AssetRemovedTableEntryType `xml:"Entry"`
	*EventType
}

// AssetRemovedTable is Table of {{def(EventEnum:ASSET_REMOVED)}}
type AssetRemovedTable *AssetRemovedTableType

// AvailabilityTableEntryType is Constraints for Cell Values
type AvailabilityTableEntryType struct {
	Cell []*AvailabilityCellType `xml:"Cell"`
	*EntryType
}

// AvailabilityTableEntry is Table Entry of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityTableEntry *AvailabilityTableEntryType

// AvailabilityCellType is Cell of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityCellType struct {
}

// AvailabilityCell is Cell of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityCell *AvailabilityCellType

// AvailabilityTableType is Constraints for Entry Values
type AvailabilityTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AvailabilityTableEntryType `xml:"Entry"`
	*EventType
}

// AvailabilityTable is Table of {{def(EventEnum:AVAILABILITY)}}
type AvailabilityTable *AvailabilityTableType

// AxisCouplingTableEntryType is Constraints for Cell Values
type AxisCouplingTableEntryType struct {
	Cell []*AxisCouplingCellType `xml:"Cell"`
	*EntryType
}

// AxisCouplingTableEntry is Table Entry of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingTableEntry *AxisCouplingTableEntryType

// AxisCouplingCellType is Cell of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingCellType struct {
}

// AxisCouplingCell is Cell of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingCell *AxisCouplingCellType

// AxisCouplingTableType is Constraints for Entry Values
type AxisCouplingTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AxisCouplingTableEntryType `xml:"Entry"`
	*EventType
}

// AxisCouplingTable is Table of {{def(EventEnum:AXIS_COUPLING)}}
type AxisCouplingTable *AxisCouplingTableType

// AxisFeedrateOverrideTableEntryType is Constraints for Cell Values
type AxisFeedrateOverrideTableEntryType struct {
	Cell []*AxisFeedrateOverrideCellType `xml:"Cell"`
	*EntryType
}

// AxisFeedrateOverrideTableEntry is Table Entry of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideTableEntry *AxisFeedrateOverrideTableEntryType

// AxisFeedrateOverrideCellType is Cell of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideCellType struct {
}

// AxisFeedrateOverrideCell is Cell of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideCell *AxisFeedrateOverrideCellType

// AxisFeedrateOverrideTableType is Constraints for Entry Values
type AxisFeedrateOverrideTableType struct {
	CountAttr int                                   `xml:"count,attr"`
	Entry     []*AxisFeedrateOverrideTableEntryType `xml:"Entry"`
	*EventType
}

// AxisFeedrateOverrideTable is Table of {{def(EventEnum:AXIS_FEEDRATE_OVERRIDE)}}
type AxisFeedrateOverrideTable *AxisFeedrateOverrideTableType

// AxisInterlockTableEntryType is Constraints for Cell Values
type AxisInterlockTableEntryType struct {
	Cell []*AxisInterlockCellType `xml:"Cell"`
	*EntryType
}

// AxisInterlockTableEntry is Table Entry of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockTableEntry *AxisInterlockTableEntryType

// AxisInterlockCellType is Cell of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockCellType struct {
}

// AxisInterlockCell is Cell of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockCell *AxisInterlockCellType

// AxisInterlockTableType is Constraints for Entry Values
type AxisInterlockTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*AxisInterlockTableEntryType `xml:"Entry"`
	*EventType
}

// AxisInterlockTable is Table of {{def(EventEnum:AXIS_INTERLOCK)}}
type AxisInterlockTable *AxisInterlockTableType

// AxisStateTableEntryType is Constraints for Cell Values
type AxisStateTableEntryType struct {
	Cell []*AxisStateCellType `xml:"Cell"`
	*EntryType
}

// AxisStateTableEntry is Table Entry of {{def(EventEnum:AXIS_STATE)}}
type AxisStateTableEntry *AxisStateTableEntryType

// AxisStateCellType is Cell of {{def(EventEnum:AXIS_STATE)}}
type AxisStateCellType struct {
}

// AxisStateCell is Cell of {{def(EventEnum:AXIS_STATE)}}
type AxisStateCell *AxisStateCellType

// AxisStateTableType is Constraints for Entry Values
type AxisStateTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*AxisStateTableEntryType `xml:"Entry"`
	*EventType
}

// AxisStateTable is Table of {{def(EventEnum:AXIS_STATE)}}
type AxisStateTable *AxisStateTableType

// BlockTableEntryType is Constraints for Cell Values
type BlockTableEntryType struct {
	Cell []*BlockCellType `xml:"Cell"`
	*EntryType
}

// BlockTableEntry is Table Entry of {{def(EventEnum:BLOCK)}}
type BlockTableEntry *BlockTableEntryType

// BlockCellType is Cell of {{def(EventEnum:BLOCK)}}
type BlockCellType struct {
}

// BlockCell is Cell of {{def(EventEnum:BLOCK)}}
type BlockCell *BlockCellType

// BlockTableType is Constraints for Entry Values
type BlockTableType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*BlockTableEntryType `xml:"Entry"`
	*EventType
}

// BlockTable is Table of {{def(EventEnum:BLOCK)}}
type BlockTable *BlockTableType

// BlockCountTableEntryType is Constraints for Cell Values
type BlockCountTableEntryType struct {
	Cell []*BlockCountCellType `xml:"Cell"`
	*EntryType
}

// BlockCountTableEntry is Table Entry of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountTableEntry *BlockCountTableEntryType

// BlockCountCellType is Cell of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountCellType struct {
}

// BlockCountCell is Cell of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountCell *BlockCountCellType

// BlockCountTableType is Constraints for Entry Values
type BlockCountTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*BlockCountTableEntryType `xml:"Entry"`
	*EventType
}

// BlockCountTable is Table of {{def(EventEnum:BLOCK_COUNT)}}
type BlockCountTable *BlockCountTableType

// ChuckInterlockTableEntryType is Constraints for Cell Values
type ChuckInterlockTableEntryType struct {
	Cell []*ChuckInterlockCellType `xml:"Cell"`
	*EntryType
}

// ChuckInterlockTableEntry is Table Entry of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockTableEntry *ChuckInterlockTableEntryType

// ChuckInterlockCellType is Cell of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockCellType struct {
}

// ChuckInterlockCell is Cell of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockCell *ChuckInterlockCellType

// ChuckInterlockTableType is Constraints for Entry Values
type ChuckInterlockTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*ChuckInterlockTableEntryType `xml:"Entry"`
	*EventType
}

// ChuckInterlockTable is Table of {{def(EventEnum:CHUCK_INTERLOCK)}}
type ChuckInterlockTable *ChuckInterlockTableType

// ChuckStateTableEntryType is Constraints for Cell Values
type ChuckStateTableEntryType struct {
	Cell []*ChuckStateCellType `xml:"Cell"`
	*EntryType
}

// ChuckStateTableEntry is Table Entry of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateTableEntry *ChuckStateTableEntryType

// ChuckStateCellType is Cell of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateCellType struct {
}

// ChuckStateCell is Cell of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateCell *ChuckStateCellType

// ChuckStateTableType is Constraints for Entry Values
type ChuckStateTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ChuckStateTableEntryType `xml:"Entry"`
	*EventType
}

// ChuckStateTable is Table of {{def(EventEnum:CHUCK_STATE)}}
type ChuckStateTable *ChuckStateTableType

// CodeTableEntryType is Constraints for Cell Values
type CodeTableEntryType struct {
	Cell []*CodeCellType `xml:"Cell"`
	*EntryType
}

// CodeTableEntry is Table Entry of {{def(EventEnum:CODE)}}
type CodeTableEntry *CodeTableEntryType

// CodeCellType is Cell of {{def(EventEnum:CODE)}}
type CodeCellType struct {
}

// CodeCell is Cell of {{def(EventEnum:CODE)}}
type CodeCell *CodeCellType

// CodeTableType is Constraints for Entry Values
type CodeTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*CodeTableEntryType `xml:"Entry"`
	*EventType
}

// CodeTable is Table of {{def(EventEnum:CODE)}}
type CodeTable *CodeTableType

// CompositionStateTableEntryType is Constraints for Cell Values
type CompositionStateTableEntryType struct {
	Cell []*CompositionStateCellType `xml:"Cell"`
	*EntryType
}

// CompositionStateTableEntry is Table Entry of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateTableEntry *CompositionStateTableEntryType

// CompositionStateCellType is Cell of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateCellType struct {
}

// CompositionStateCell is Cell of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateCell *CompositionStateCellType

// CompositionStateTableType is Constraints for Entry Values
type CompositionStateTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*CompositionStateTableEntryType `xml:"Entry"`
	*EventType
}

// CompositionStateTable is Table of {{def(EventEnum:COMPOSITION_STATE)}}
type CompositionStateTable *CompositionStateTableType

// ControllerModeTableEntryType is Constraints for Cell Values
type ControllerModeTableEntryType struct {
	Cell []*ControllerModeCellType `xml:"Cell"`
	*EntryType
}

// ControllerModeTableEntry is Table Entry of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeTableEntry *ControllerModeTableEntryType

// ControllerModeCellType is Cell of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeCellType struct {
}

// ControllerModeCell is Cell of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeCell *ControllerModeCellType

// ControllerModeTableType is Constraints for Entry Values
type ControllerModeTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*ControllerModeTableEntryType `xml:"Entry"`
	*EventType
}

// ControllerModeTable is Table of {{def(EventEnum:CONTROLLER_MODE)}}
type ControllerModeTable *ControllerModeTableType

// ControllerModeOverrideTableEntryType is Constraints for Cell Values
type ControllerModeOverrideTableEntryType struct {
	Cell []*ControllerModeOverrideCellType `xml:"Cell"`
	*EntryType
}

// ControllerModeOverrideTableEntry is Table Entry of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideTableEntry *ControllerModeOverrideTableEntryType

// ControllerModeOverrideCellType is Cell of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideCellType struct {
}

// ControllerModeOverrideCell is Cell of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideCell *ControllerModeOverrideCellType

// ControllerModeOverrideTableType is Constraints for Entry Values
type ControllerModeOverrideTableType struct {
	CountAttr int                                     `xml:"count,attr"`
	Entry     []*ControllerModeOverrideTableEntryType `xml:"Entry"`
	*EventType
}

// ControllerModeOverrideTable is Table of {{def(EventEnum:CONTROLLER_MODE_OVERRIDE)}}
type ControllerModeOverrideTable *ControllerModeOverrideTableType

// CoupledAxesTableEntryType is Constraints for Cell Values
type CoupledAxesTableEntryType struct {
	Cell []*CoupledAxesCellType `xml:"Cell"`
	*EntryType
}

// CoupledAxesTableEntry is Table Entry of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesTableEntry *CoupledAxesTableEntryType

// CoupledAxesCellType is Cell of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesCellType struct {
}

// CoupledAxesCell is Cell of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesCell *CoupledAxesCellType

// CoupledAxesTableType is Constraints for Entry Values
type CoupledAxesTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*CoupledAxesTableEntryType `xml:"Entry"`
	*EventType
}

// CoupledAxesTable is Table of {{def(EventEnum:COUPLED_AXES)}}
type CoupledAxesTable *CoupledAxesTableType

// DateCodeTableEntryType is Constraints for Cell Values
type DateCodeTableEntryType struct {
	Cell []*DateCodeCellType `xml:"Cell"`
	*EntryType
}

// DateCodeTableEntry is Table Entry of {{def(EventEnum:DATE_CODE)}}
type DateCodeTableEntry *DateCodeTableEntryType

// DateCodeCellType is Cell of {{def(EventEnum:DATE_CODE)}}
type DateCodeCellType struct {
}

// DateCodeCell is Cell of {{def(EventEnum:DATE_CODE)}}
type DateCodeCell *DateCodeCellType

// DateCodeTableType is Constraints for Entry Values
type DateCodeTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*DateCodeTableEntryType `xml:"Entry"`
	*EventType
}

// DateCodeTable is Table of {{def(EventEnum:DATE_CODE)}}
type DateCodeTable *DateCodeTableType

// DeviceUuidTableEntryType is Constraints for Cell Values
type DeviceUuidTableEntryType struct {
	Cell []*DeviceUuidCellType `xml:"Cell"`
	*EntryType
}

// DeviceUuidTableEntry is Table Entry of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidTableEntry *DeviceUuidTableEntryType

// DeviceUuidCellType is Cell of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidCellType struct {
}

// DeviceUuidCell is Cell of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidCell *DeviceUuidCellType

// DeviceUuidTableType is Constraints for Entry Values
type DeviceUuidTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*DeviceUuidTableEntryType `xml:"Entry"`
	*EventType
}

// DeviceUuidTable is Table of {{def(EventEnum:DEVICE_UUID)}}
type DeviceUuidTable *DeviceUuidTableType

// DirectionTableEntryType is Constraints for Cell Values
type DirectionTableEntryType struct {
	Cell []*DirectionCellType `xml:"Cell"`
	*EntryType
}

// DirectionTableEntry is Table Entry of {{def(EventEnum:DIRECTION)}}
type DirectionTableEntry *DirectionTableEntryType

// DirectionCellType is Cell of {{def(EventEnum:DIRECTION)}}
type DirectionCellType struct {
}

// DirectionCell is Cell of {{def(EventEnum:DIRECTION)}}
type DirectionCell *DirectionCellType

// DirectionTableType is Constraints for Entry Values
type DirectionTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*DirectionTableEntryType `xml:"Entry"`
	*EventType
}

// DirectionTable is Table of {{def(EventEnum:DIRECTION)}}
type DirectionTable *DirectionTableType

// DoorStateTableEntryType is Constraints for Cell Values
type DoorStateTableEntryType struct {
	Cell []*DoorStateCellType `xml:"Cell"`
	*EntryType
}

// DoorStateTableEntry is Table Entry of {{def(EventEnum:DOOR_STATE)}}
type DoorStateTableEntry *DoorStateTableEntryType

// DoorStateCellType is Cell of {{def(EventEnum:DOOR_STATE)}}
type DoorStateCellType struct {
}

// DoorStateCell is Cell of {{def(EventEnum:DOOR_STATE)}}
type DoorStateCell *DoorStateCellType

// DoorStateTableType is Constraints for Entry Values
type DoorStateTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*DoorStateTableEntryType `xml:"Entry"`
	*EventType
}

// DoorStateTable is Table of {{def(EventEnum:DOOR_STATE)}}
type DoorStateTable *DoorStateTableType

// EmergencyStopTableEntryType is Constraints for Cell Values
type EmergencyStopTableEntryType struct {
	Cell []*EmergencyStopCellType `xml:"Cell"`
	*EntryType
}

// EmergencyStopTableEntry is Table Entry of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopTableEntry *EmergencyStopTableEntryType

// EmergencyStopCellType is Cell of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopCellType struct {
}

// EmergencyStopCell is Cell of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopCell *EmergencyStopCellType

// EmergencyStopTableType is Constraints for Entry Values
type EmergencyStopTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*EmergencyStopTableEntryType `xml:"Entry"`
	*EventType
}

// EmergencyStopTable is Table of {{def(EventEnum:EMERGENCY_STOP)}}
type EmergencyStopTable *EmergencyStopTableType

// EndOfBarTableEntryType is Constraints for Cell Values
type EndOfBarTableEntryType struct {
	Cell []*EndOfBarCellType `xml:"Cell"`
	*EntryType
}

// EndOfBarTableEntry is Table Entry of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarTableEntry *EndOfBarTableEntryType

// EndOfBarCellType is Cell of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarCellType struct {
}

// EndOfBarCell is Cell of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarCell *EndOfBarCellType

// EndOfBarTableType is Constraints for Entry Values
type EndOfBarTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*EndOfBarTableEntryType `xml:"Entry"`
	*EventType
}

// EndOfBarTable is Table of {{def(EventEnum:END_OF_BAR)}}
type EndOfBarTable *EndOfBarTableType

// EquipmentModeTableEntryType is Constraints for Cell Values
type EquipmentModeTableEntryType struct {
	Cell []*EquipmentModeCellType `xml:"Cell"`
	*EntryType
}

// EquipmentModeTableEntry is Table Entry of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeTableEntry *EquipmentModeTableEntryType

// EquipmentModeCellType is Cell of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeCellType struct {
}

// EquipmentModeCell is Cell of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeCell *EquipmentModeCellType

// EquipmentModeTableType is Constraints for Entry Values
type EquipmentModeTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*EquipmentModeTableEntryType `xml:"Entry"`
	*EventType
}

// EquipmentModeTable is Table of {{def(EventEnum:EQUIPMENT_MODE)}}
type EquipmentModeTable *EquipmentModeTableType

// ExecutionTableEntryType is Constraints for Cell Values
type ExecutionTableEntryType struct {
	Cell []*ExecutionCellType `xml:"Cell"`
	*EntryType
}

// ExecutionTableEntry is Table Entry of {{def(EventEnum:EXECUTION)}}
type ExecutionTableEntry *ExecutionTableEntryType

// ExecutionCellType is Cell of {{def(EventEnum:EXECUTION)}}
type ExecutionCellType struct {
}

// ExecutionCell is Cell of {{def(EventEnum:EXECUTION)}}
type ExecutionCell *ExecutionCellType

// ExecutionTableType is Constraints for Entry Values
type ExecutionTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ExecutionTableEntryType `xml:"Entry"`
	*EventType
}

// ExecutionTable is Table of {{def(EventEnum:EXECUTION)}}
type ExecutionTable *ExecutionTableType

// FunctionalModeTableEntryType is Constraints for Cell Values
type FunctionalModeTableEntryType struct {
	Cell []*FunctionalModeCellType `xml:"Cell"`
	*EntryType
}

// FunctionalModeTableEntry is Table Entry of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeTableEntry *FunctionalModeTableEntryType

// FunctionalModeCellType is Cell of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeCellType struct {
}

// FunctionalModeCell is Cell of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeCell *FunctionalModeCellType

// FunctionalModeTableType is Constraints for Entry Values
type FunctionalModeTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*FunctionalModeTableEntryType `xml:"Entry"`
	*EventType
}

// FunctionalModeTable is Table of {{def(EventEnum:FUNCTIONAL_MODE)}}
type FunctionalModeTable *FunctionalModeTableType

// HardnessTableEntryType is Constraints for Cell Values
type HardnessTableEntryType struct {
	Cell []*HardnessCellType `xml:"Cell"`
	*EntryType
}

// HardnessTableEntry is Table Entry of {{def(EventEnum:HARDNESS)}}
type HardnessTableEntry *HardnessTableEntryType

// HardnessCellType is Cell of {{def(EventEnum:HARDNESS)}}
type HardnessCellType struct {
}

// HardnessCell is Cell of {{def(EventEnum:HARDNESS)}}
type HardnessCell *HardnessCellType

// HardnessTableType is Constraints for Entry Values
type HardnessTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*HardnessTableEntryType `xml:"Entry"`
	*EventType
}

// HardnessTable is Table of {{def(EventEnum:HARDNESS)}}
type HardnessTable *HardnessTableType

// LineTableEntryType is Constraints for Cell Values
type LineTableEntryType struct {
	Cell []*LineCellType `xml:"Cell"`
	*EntryType
}

// LineTableEntry is Table Entry of {{def(EventEnum:LINE)}}
type LineTableEntry *LineTableEntryType

// LineCellType is Cell of {{def(EventEnum:LINE)}}
type LineCellType struct {
}

// LineCell is Cell of {{def(EventEnum:LINE)}}
type LineCell *LineCellType

// LineTableType is Constraints for Entry Values
type LineTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*LineTableEntryType `xml:"Entry"`
	*EventType
}

// LineTable is Table of {{def(EventEnum:LINE)}}
type LineTable *LineTableType

// LineLabelTableEntryType is Constraints for Cell Values
type LineLabelTableEntryType struct {
	Cell []*LineLabelCellType `xml:"Cell"`
	*EntryType
}

// LineLabelTableEntry is Table Entry of {{def(EventEnum:LINE_LABEL)}}
type LineLabelTableEntry *LineLabelTableEntryType

// LineLabelCellType is Cell of {{def(EventEnum:LINE_LABEL)}}
type LineLabelCellType struct {
}

// LineLabelCell is Cell of {{def(EventEnum:LINE_LABEL)}}
type LineLabelCell *LineLabelCellType

// LineLabelTableType is Constraints for Entry Values
type LineLabelTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*LineLabelTableEntryType `xml:"Entry"`
	*EventType
}

// LineLabelTable is Table of {{def(EventEnum:LINE_LABEL)}}
type LineLabelTable *LineLabelTableType

// LineNumberTableEntryType is Constraints for Cell Values
type LineNumberTableEntryType struct {
	Cell []*LineNumberCellType `xml:"Cell"`
	*EntryType
}

// LineNumberTableEntry is Table Entry of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberTableEntry *LineNumberTableEntryType

// LineNumberCellType is Cell of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberCellType struct {
}

// LineNumberCell is Cell of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberCell *LineNumberCellType

// LineNumberTableType is Constraints for Entry Values
type LineNumberTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*LineNumberTableEntryType `xml:"Entry"`
	*EventType
}

// LineNumberTable is Table of {{def(EventEnum:LINE_NUMBER)}}
type LineNumberTable *LineNumberTableType

// MaterialTableEntryType is Constraints for Cell Values
type MaterialTableEntryType struct {
	Cell []*MaterialCellType `xml:"Cell"`
	*EntryType
}

// MaterialTableEntry is Table Entry of {{block(Resource)}} composed of material that is consumed
//         or used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialTableEntry *MaterialTableEntryType

// MaterialCellType is Cell of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialCellType struct {
}

// MaterialCell is Cell of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialCell *MaterialCellType

// MaterialTableType is Constraints for Entry Values
type MaterialTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*MaterialTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialTable is Table of {{block(Resource)}} composed of material that is consumed or
//         used by the piece of equipment for production of parts, materials, or
//         other types of goods.
type MaterialTable *MaterialTableType

// MaterialLayerTableEntryType is Constraints for Cell Values
type MaterialLayerTableEntryType struct {
	Cell []*MaterialLayerCellType `xml:"Cell"`
	*EntryType
}

// MaterialLayerTableEntry is Table Entry of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerTableEntry *MaterialLayerTableEntryType

// MaterialLayerCellType is Cell of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerCellType struct {
}

// MaterialLayerCell is Cell of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerCell *MaterialLayerCellType

// MaterialLayerTableType is Constraints for Entry Values
type MaterialLayerTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*MaterialLayerTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialLayerTable is Table of {{def(EventEnum:MATERIAL_LAYER)}}
type MaterialLayerTable *MaterialLayerTableType

// MessageTableEntryType is Constraints for Cell Values
type MessageTableEntryType struct {
	Cell []*MessageCellType `xml:"Cell"`
	*EntryType
}

// MessageTableEntry is Table Entry of {{def(EventEnum:MESSAGE)}}
type MessageTableEntry *MessageTableEntryType

// MessageCellType is Cell of {{def(EventEnum:MESSAGE)}}
type MessageCellType struct {
}

// MessageCell is Cell of {{def(EventEnum:MESSAGE)}}
type MessageCell *MessageCellType

// MessageTableType is Constraints for Entry Values
type MessageTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*MessageTableEntryType `xml:"Entry"`
	*EventType
}

// MessageTable is Table of {{def(EventEnum:MESSAGE)}}
type MessageTable *MessageTableType

// OperatorIdTableEntryType is Constraints for Cell Values
type OperatorIdTableEntryType struct {
	Cell []*OperatorIdCellType `xml:"Cell"`
	*EntryType
}

// OperatorIdTableEntry is Table Entry of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdTableEntry *OperatorIdTableEntryType

// OperatorIdCellType is Cell of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdCellType struct {
}

// OperatorIdCell is Cell of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdCell *OperatorIdCellType

// OperatorIdTableType is Constraints for Entry Values
type OperatorIdTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*OperatorIdTableEntryType `xml:"Entry"`
	*EventType
}

// OperatorIdTable is Table of {{def(EventEnum:OPERATOR_ID)}}
type OperatorIdTable *OperatorIdTableType

// PalletIdTableEntryType is Constraints for Cell Values
type PalletIdTableEntryType struct {
	Cell []*PalletIdCellType `xml:"Cell"`
	*EntryType
}

// PalletIdTableEntry is Table Entry of {{def(EventEnum:PALLET_ID)}}
type PalletIdTableEntry *PalletIdTableEntryType

// PalletIdCellType is Cell of {{def(EventEnum:PALLET_ID)}}
type PalletIdCellType struct {
}

// PalletIdCell is Cell of {{def(EventEnum:PALLET_ID)}}
type PalletIdCell *PalletIdCellType

// PalletIdTableType is Constraints for Entry Values
type PalletIdTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*PalletIdTableEntryType `xml:"Entry"`
	*EventType
}

// PalletIdTable is Table of {{def(EventEnum:PALLET_ID)}}
type PalletIdTable *PalletIdTableType

// PartCountTableEntryType is Constraints for Cell Values
type PartCountTableEntryType struct {
	Cell []*PartCountCellType `xml:"Cell"`
	*EntryType
}

// PartCountTableEntry is Table Entry of {{def(EventEnum:PART_COUNT)}}
type PartCountTableEntry *PartCountTableEntryType

// PartCountCellType is Cell of {{def(EventEnum:PART_COUNT)}}
type PartCountCellType struct {
}

// PartCountCell is Cell of {{def(EventEnum:PART_COUNT)}}
type PartCountCell *PartCountCellType

// PartCountTableType is Constraints for Entry Values
type PartCountTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*PartCountTableEntryType `xml:"Entry"`
	*EventType
}

// PartCountTable is Table of {{def(EventEnum:PART_COUNT)}}
type PartCountTable *PartCountTableType

// PartDetectTableEntryType is Constraints for Cell Values
type PartDetectTableEntryType struct {
	Cell []*PartDetectCellType `xml:"Cell"`
	*EntryType
}

// PartDetectTableEntry is Table Entry of {{def(EventEnum:PART_DETECT)}}
type PartDetectTableEntry *PartDetectTableEntryType

// PartDetectCellType is Cell of {{def(EventEnum:PART_DETECT)}}
type PartDetectCellType struct {
}

// PartDetectCell is Cell of {{def(EventEnum:PART_DETECT)}}
type PartDetectCell *PartDetectCellType

// PartDetectTableType is Constraints for Entry Values
type PartDetectTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PartDetectTableEntryType `xml:"Entry"`
	*EventType
}

// PartDetectTable is Table of {{def(EventEnum:PART_DETECT)}}
type PartDetectTable *PartDetectTableType

// PartIdTableEntryType is Constraints for Cell Values
type PartIdTableEntryType struct {
	Cell []*PartIdCellType `xml:"Cell"`
	*EntryType
}

// PartIdTableEntry is Table Entry of {{def(EventEnum:PART_ID)}}
type PartIdTableEntry *PartIdTableEntryType

// PartIdCellType is Cell of {{def(EventEnum:PART_ID)}}
type PartIdCellType struct {
}

// PartIdCell is Cell of {{def(EventEnum:PART_ID)}}
type PartIdCell *PartIdCellType

// PartIdTableType is Constraints for Entry Values
type PartIdTableType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*PartIdTableEntryType `xml:"Entry"`
	*EventType
}

// PartIdTable is Table of {{def(EventEnum:PART_ID)}}
type PartIdTable *PartIdTableType

// PartNumberTableEntryType is Constraints for Cell Values
type PartNumberTableEntryType struct {
	Cell []*PartNumberCellType `xml:"Cell"`
	*EntryType
}

// PartNumberTableEntry is Table Entry of {{def(EventEnum:PART_NUMBER)}}
type PartNumberTableEntry *PartNumberTableEntryType

// PartNumberCellType is Cell of {{def(EventEnum:PART_NUMBER)}}
type PartNumberCellType struct {
}

// PartNumberCell is Cell of {{def(EventEnum:PART_NUMBER)}}
type PartNumberCell *PartNumberCellType

// PartNumberTableType is Constraints for Entry Values
type PartNumberTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PartNumberTableEntryType `xml:"Entry"`
	*EventType
}

// PartNumberTable is Table of {{def(EventEnum:PART_NUMBER)}}
type PartNumberTable *PartNumberTableType

// PathFeedrateOverrideTableEntryType is Constraints for Cell Values
type PathFeedrateOverrideTableEntryType struct {
	Cell []*PathFeedrateOverrideCellType `xml:"Cell"`
	*EntryType
}

// PathFeedrateOverrideTableEntry is Table Entry of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideTableEntry *PathFeedrateOverrideTableEntryType

// PathFeedrateOverrideCellType is Cell of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideCellType struct {
}

// PathFeedrateOverrideCell is Cell of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideCell *PathFeedrateOverrideCellType

// PathFeedrateOverrideTableType is Constraints for Entry Values
type PathFeedrateOverrideTableType struct {
	CountAttr int                                   `xml:"count,attr"`
	Entry     []*PathFeedrateOverrideTableEntryType `xml:"Entry"`
	*EventType
}

// PathFeedrateOverrideTable is Table of {{def(EventEnum:PATH_FEEDRATE_OVERRIDE)}}
type PathFeedrateOverrideTable *PathFeedrateOverrideTableType

// PathModeTableEntryType is Constraints for Cell Values
type PathModeTableEntryType struct {
	Cell []*PathModeCellType `xml:"Cell"`
	*EntryType
}

// PathModeTableEntry is Table Entry of {{def(EventEnum:PATH_MODE)}}
type PathModeTableEntry *PathModeTableEntryType

// PathModeCellType is Cell of {{def(EventEnum:PATH_MODE)}}
type PathModeCellType struct {
}

// PathModeCell is Cell of {{def(EventEnum:PATH_MODE)}}
type PathModeCell *PathModeCellType

// PathModeTableType is Constraints for Entry Values
type PathModeTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*PathModeTableEntryType `xml:"Entry"`
	*EventType
}

// PathModeTable is Table of {{def(EventEnum:PATH_MODE)}}
type PathModeTable *PathModeTableType

// PowerStateTableEntryType is Constraints for Cell Values
type PowerStateTableEntryType struct {
	Cell []*PowerStateCellType `xml:"Cell"`
	*EntryType
}

// PowerStateTableEntry is Table Entry of {{def(EventEnum:POWER_STATE)}}
type PowerStateTableEntry *PowerStateTableEntryType

// PowerStateCellType is Cell of {{def(EventEnum:POWER_STATE)}}
type PowerStateCellType struct {
}

// PowerStateCell is Cell of {{def(EventEnum:POWER_STATE)}}
type PowerStateCell *PowerStateCellType

// PowerStateTableType is Constraints for Entry Values
type PowerStateTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PowerStateTableEntryType `xml:"Entry"`
	*EventType
}

// PowerStateTable is Table of {{def(EventEnum:POWER_STATE)}}
type PowerStateTable *PowerStateTableType

// PowerStatusTableEntryType is Constraints for Cell Values
type PowerStatusTableEntryType struct {
	Cell []*PowerStatusCellType `xml:"Cell"`
	*EntryType
}

// PowerStatusTableEntry is Table Entry of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusTableEntry *PowerStatusTableEntryType

// PowerStatusCellType is Cell of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusCellType struct {
}

// PowerStatusCell is Cell of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusCell *PowerStatusCellType

// PowerStatusTableType is Constraints for Entry Values
type PowerStatusTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*PowerStatusTableEntryType `xml:"Entry"`
	*EventType
}

// PowerStatusTable is Table of {{def(EventEnum:POWER_STATUS)}}
type PowerStatusTable *PowerStatusTableType

// ProcessTimeTableEntryType is Constraints for Cell Values
type ProcessTimeTableEntryType struct {
	Cell []*ProcessTimeCellType `xml:"Cell"`
	*EntryType
}

// ProcessTimeTableEntry is Table Entry of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeTableEntry *ProcessTimeTableEntryType

// ProcessTimeCellType is Cell of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeCellType struct {
}

// ProcessTimeCell is Cell of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeCell *ProcessTimeCellType

// ProcessTimeTableType is Constraints for Entry Values
type ProcessTimeTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ProcessTimeTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessTimeTable is Table of {{def(EventEnum:PROCESS_TIME)}}
type ProcessTimeTable *ProcessTimeTableType

// ProgramTableEntryType is Constraints for Cell Values
type ProgramTableEntryType struct {
	Cell []*ProgramCellType `xml:"Cell"`
	*EntryType
}

// ProgramTableEntry is Table Entry of {{def(EventEnum:PROGRAM)}}
type ProgramTableEntry *ProgramTableEntryType

// ProgramCellType is Cell of {{def(EventEnum:PROGRAM)}}
type ProgramCellType struct {
}

// ProgramCell is Cell of {{def(EventEnum:PROGRAM)}}
type ProgramCell *ProgramCellType

// ProgramTableType is Constraints for Entry Values
type ProgramTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*ProgramTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramTable is Table of {{def(EventEnum:PROGRAM)}}
type ProgramTable *ProgramTableType

// ProgramCommentTableEntryType is Constraints for Cell Values
type ProgramCommentTableEntryType struct {
	Cell []*ProgramCommentCellType `xml:"Cell"`
	*EntryType
}

// ProgramCommentTableEntry is Table Entry of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentTableEntry *ProgramCommentTableEntryType

// ProgramCommentCellType is Cell of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentCellType struct {
}

// ProgramCommentCell is Cell of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentCell *ProgramCommentCellType

// ProgramCommentTableType is Constraints for Entry Values
type ProgramCommentTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*ProgramCommentTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramCommentTable is Table of {{def(EventEnum:PROGRAM_COMMENT)}}
type ProgramCommentTable *ProgramCommentTableType

// ProgramEditTableEntryType is Constraints for Cell Values
type ProgramEditTableEntryType struct {
	Cell []*ProgramEditCellType `xml:"Cell"`
	*EntryType
}

// ProgramEditTableEntry is Table Entry of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditTableEntry *ProgramEditTableEntryType

// ProgramEditCellType is Cell of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditCellType struct {
}

// ProgramEditCell is Cell of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditCell *ProgramEditCellType

// ProgramEditTableType is Constraints for Entry Values
type ProgramEditTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ProgramEditTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramEditTable is Table of {{def(EventEnum:PROGRAM_EDIT)}}
type ProgramEditTable *ProgramEditTableType

// ProgramEditNameTableEntryType is Constraints for Cell Values
type ProgramEditNameTableEntryType struct {
	Cell []*ProgramEditNameCellType `xml:"Cell"`
	*EntryType
}

// ProgramEditNameTableEntry is Table Entry of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameTableEntry *ProgramEditNameTableEntryType

// ProgramEditNameCellType is Cell of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameCellType struct {
}

// ProgramEditNameCell is Cell of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameCell *ProgramEditNameCellType

// ProgramEditNameTableType is Constraints for Entry Values
type ProgramEditNameTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*ProgramEditNameTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramEditNameTable is Table of {{def(EventEnum:PROGRAM_EDIT_NAME)}}
type ProgramEditNameTable *ProgramEditNameTableType

// ProgramHeaderTableEntryType is Constraints for Cell Values
type ProgramHeaderTableEntryType struct {
	Cell []*ProgramHeaderCellType `xml:"Cell"`
	*EntryType
}

// ProgramHeaderTableEntry is Table Entry of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderTableEntry *ProgramHeaderTableEntryType

// ProgramHeaderCellType is Cell of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderCellType struct {
}

// ProgramHeaderCell is Cell of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderCell *ProgramHeaderCellType

// ProgramHeaderTableType is Constraints for Entry Values
type ProgramHeaderTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*ProgramHeaderTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramHeaderTable is Table of {{def(EventEnum:PROGRAM_HEADER)}}
type ProgramHeaderTable *ProgramHeaderTableType

// ProgramLocationTableEntryType is Constraints for Cell Values
type ProgramLocationTableEntryType struct {
	Cell []*ProgramLocationCellType `xml:"Cell"`
	*EntryType
}

// ProgramLocationTableEntry is Table Entry of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationTableEntry *ProgramLocationTableEntryType

// ProgramLocationCellType is Cell of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationCellType struct {
}

// ProgramLocationCell is Cell of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationCell *ProgramLocationCellType

// ProgramLocationTableType is Constraints for Entry Values
type ProgramLocationTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*ProgramLocationTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramLocationTable is Table of {{def(EventEnum:PROGRAM_LOCATION)}}
type ProgramLocationTable *ProgramLocationTableType

// ProgramLocationTypeTableEntryType is Constraints for Cell Values
type ProgramLocationTypeTableEntryType struct {
	Cell []*ProgramLocationTypeCellType `xml:"Cell"`
	*EntryType
}

// ProgramLocationTypeTableEntry is Table Entry of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeTableEntry *ProgramLocationTypeTableEntryType

// ProgramLocationTypeCellType is Cell of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeCellType struct {
}

// ProgramLocationTypeCell is Cell of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeCell *ProgramLocationTypeCellType

// ProgramLocationTypeTableType is Constraints for Entry Values
type ProgramLocationTypeTableType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*ProgramLocationTypeTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramLocationTypeTable is Table of {{def(EventEnum:PROGRAM_LOCATION_TYPE)}}
type ProgramLocationTypeTable *ProgramLocationTypeTableType

// ProgramNestLevelTableEntryType is Constraints for Cell Values
type ProgramNestLevelTableEntryType struct {
	Cell []*ProgramNestLevelCellType `xml:"Cell"`
	*EntryType
}

// ProgramNestLevelTableEntry is Table Entry of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value
//         is not defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelTableEntry *ProgramNestLevelTableEntryType

// ProgramNestLevelCellType is Cell of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelCellType struct {
}

// ProgramNestLevelCell is Cell of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is not
//         defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelCell *ProgramNestLevelCellType

// ProgramNestLevelTableType is Constraints for Entry Values
type ProgramNestLevelTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*ProgramNestLevelTableEntryType `xml:"Entry"`
	*EventType
}

// ProgramNestLevelTable is Table of {{def(EventEnum:PROGRAM_NEST_LEVEL)}} If an initial value is
//         not defined, the nesting level associated with the highest or initial
//         nesting level of the program **MUST** default to zero (0).
type ProgramNestLevelTable *ProgramNestLevelTableType

// RotaryModeTableEntryType is Constraints for Cell Values
type RotaryModeTableEntryType struct {
	Cell []*RotaryModeCellType `xml:"Cell"`
	*EntryType
}

// RotaryModeTableEntry is Table Entry of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeTableEntry *RotaryModeTableEntryType

// RotaryModeCellType is Cell of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeCellType struct {
}

// RotaryModeCell is Cell of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeCell *RotaryModeCellType

// RotaryModeTableType is Constraints for Entry Values
type RotaryModeTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*RotaryModeTableEntryType `xml:"Entry"`
	*EventType
}

// RotaryModeTable is Table of {{def(EventEnum:ROTARY_MODE)}}
type RotaryModeTable *RotaryModeTableType

// RotaryVelocityOverrideTableEntryType is Constraints for Cell Values
type RotaryVelocityOverrideTableEntryType struct {
	Cell []*RotaryVelocityOverrideCellType `xml:"Cell"`
	*EntryType
}

// RotaryVelocityOverrideTableEntry is Table Entry of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideTableEntry *RotaryVelocityOverrideTableEntryType

// RotaryVelocityOverrideCellType is Cell of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideCellType struct {
}

// RotaryVelocityOverrideCell is Cell of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideCell *RotaryVelocityOverrideCellType

// RotaryVelocityOverrideTableType is Constraints for Entry Values
type RotaryVelocityOverrideTableType struct {
	CountAttr int                                     `xml:"count,attr"`
	Entry     []*RotaryVelocityOverrideTableEntryType `xml:"Entry"`
	*EventType
}

// RotaryVelocityOverrideTable is Table of {{def(EventEnum:ROTARY_VELOCITY_OVERRIDE)}} This command
//         represents a percentage change to the velocity calculated by a logic or
//         motion program or set by a switch for a {{block(Rotary)}} type axis.
type RotaryVelocityOverrideTable *RotaryVelocityOverrideTableType

// SerialNumberTableEntryType is Constraints for Cell Values
type SerialNumberTableEntryType struct {
	Cell []*SerialNumberCellType `xml:"Cell"`
	*EntryType
}

// SerialNumberTableEntry is Table Entry of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberTableEntry *SerialNumberTableEntryType

// SerialNumberCellType is Cell of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberCellType struct {
}

// SerialNumberCell is Cell of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberCell *SerialNumberCellType

// SerialNumberTableType is Constraints for Entry Values
type SerialNumberTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*SerialNumberTableEntryType `xml:"Entry"`
	*EventType
}

// SerialNumberTable is Table of {{def(EventEnum:SERIAL_NUMBER)}}
type SerialNumberTable *SerialNumberTableType

// SpindleInterlockTableEntryType is Constraints for Cell Values
type SpindleInterlockTableEntryType struct {
	Cell []*SpindleInterlockCellType `xml:"Cell"`
	*EntryType
}

// SpindleInterlockTableEntry is Table Entry of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockTableEntry *SpindleInterlockTableEntryType

// SpindleInterlockCellType is Cell of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockCellType struct {
}

// SpindleInterlockCell is Cell of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockCell *SpindleInterlockCellType

// SpindleInterlockTableType is Constraints for Entry Values
type SpindleInterlockTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*SpindleInterlockTableEntryType `xml:"Entry"`
	*EventType
}

// SpindleInterlockTable is Table of {{def(EventEnum:SPINDLE_INTERLOCK)}}
type SpindleInterlockTable *SpindleInterlockTableType

// ToolAssetIdTableEntryType is Constraints for Cell Values
type ToolAssetIdTableEntryType struct {
	Cell []*ToolAssetIdCellType `xml:"Cell"`
	*EntryType
}

// ToolAssetIdTableEntry is Table Entry of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdTableEntry *ToolAssetIdTableEntryType

// ToolAssetIdCellType is Cell of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdCellType struct {
}

// ToolAssetIdCell is Cell of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdCell *ToolAssetIdCellType

// ToolAssetIdTableType is Constraints for Entry Values
type ToolAssetIdTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ToolAssetIdTableEntryType `xml:"Entry"`
	*EventType
}

// ToolAssetIdTable is Table of {{def(EventEnum:TOOL_ASSET_ID)}}
type ToolAssetIdTable *ToolAssetIdTableType

// ToolGroupTableEntryType is Constraints for Cell Values
type ToolGroupTableEntryType struct {
	Cell []*ToolGroupCellType `xml:"Cell"`
	*EntryType
}

// ToolGroupTableEntry is Table Entry of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupTableEntry *ToolGroupTableEntryType

// ToolGroupCellType is Cell of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupCellType struct {
}

// ToolGroupCell is Cell of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupCell *ToolGroupCellType

// ToolGroupTableType is Constraints for Entry Values
type ToolGroupTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ToolGroupTableEntryType `xml:"Entry"`
	*EventType
}

// ToolGroupTable is Table of {{def(EventEnum:TOOL_GROUP)}}
type ToolGroupTable *ToolGroupTableType

// ToolIdTableEntryType is Constraints for Cell Values
type ToolIdTableEntryType struct {
	Cell []*ToolIdCellType `xml:"Cell"`
	*EntryType
}

// ToolIdTableEntry is Table Entry of {{def(EventEnum:TOOL_ID)}}
type ToolIdTableEntry *ToolIdTableEntryType

// ToolIdCellType is Cell of {{def(EventEnum:TOOL_ID)}}
type ToolIdCellType struct {
}

// ToolIdCell is Cell of {{def(EventEnum:TOOL_ID)}}
type ToolIdCell *ToolIdCellType

// ToolIdTableType is Constraints for Entry Values
type ToolIdTableType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*ToolIdTableEntryType `xml:"Entry"`
	*EventType
}

// ToolIdTable is Table of {{def(EventEnum:TOOL_ID)}}
type ToolIdTable *ToolIdTableType

// ToolNumberTableEntryType is Constraints for Cell Values
type ToolNumberTableEntryType struct {
	Cell []*ToolNumberCellType `xml:"Cell"`
	*EntryType
}

// ToolNumberTableEntry is Table Entry of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberTableEntry *ToolNumberTableEntryType

// ToolNumberCellType is Cell of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberCellType struct {
}

// ToolNumberCell is Cell of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberCell *ToolNumberCellType

// ToolNumberTableType is Constraints for Entry Values
type ToolNumberTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ToolNumberTableEntryType `xml:"Entry"`
	*EventType
}

// ToolNumberTable is Table of {{def(EventEnum:TOOL_NUMBER)}}
type ToolNumberTable *ToolNumberTableType

// ToolOffsetTableEntryType is Constraints for Cell Values
type ToolOffsetTableEntryType struct {
	Cell []*ToolOffsetCellType `xml:"Cell"`
	*EntryType
}

// ToolOffsetTableEntry is Table Entry of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetTableEntry *ToolOffsetTableEntryType

// ToolOffsetCellType is Cell of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetCellType struct {
}

// ToolOffsetCell is Cell of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetCell *ToolOffsetCellType

// ToolOffsetTableType is Constraints for Entry Values
type ToolOffsetTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ToolOffsetTableEntryType `xml:"Entry"`
	*EventType
}

// ToolOffsetTable is Table of {{def(EventEnum:TOOL_OFFSET)}}
type ToolOffsetTable *ToolOffsetTableType

// UserTableEntryType is Constraints for Cell Values
type UserTableEntryType struct {
	Cell []*UserCellType `xml:"Cell"`
	*EntryType
}

// UserTableEntry is Table Entry of {{def(EventEnum:USER)}}
type UserTableEntry *UserTableEntryType

// UserCellType is Cell of {{def(EventEnum:USER)}}
type UserCellType struct {
}

// UserCell is Cell of {{def(EventEnum:USER)}}
type UserCell *UserCellType

// UserTableType is Constraints for Entry Values
type UserTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*UserTableEntryType `xml:"Entry"`
	*EventType
}

// UserTable is Table of {{def(EventEnum:USER)}}
type UserTable *UserTableType

// VariableTableEntryType is Constraints for Cell Values
type VariableTableEntryType struct {
	Cell []*VariableCellType `xml:"Cell"`
	*EntryType
}

// VariableTableEntry is Table Entry of {{def(EventEnum:VARIABLE)}}
type VariableTableEntry *VariableTableEntryType

// VariableCellType is Cell of {{def(EventEnum:VARIABLE)}}
type VariableCellType struct {
}

// VariableCell is Cell of {{def(EventEnum:VARIABLE)}}
type VariableCell *VariableCellType

// VariableTableType is Constraints for Entry Values
type VariableTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*VariableTableEntryType `xml:"Entry"`
	*EventType
}

// VariableTable is Table of {{def(EventEnum:VARIABLE)}}
type VariableTable *VariableTableType

// WaitStateTableEntryType is Constraints for Cell Values
type WaitStateTableEntryType struct {
	Cell []*WaitStateCellType `xml:"Cell"`
	*EntryType
}

// WaitStateTableEntry is Table Entry of {{def(EventEnum:WAIT_STATE)}}
type WaitStateTableEntry *WaitStateTableEntryType

// WaitStateCellType is Cell of {{def(EventEnum:WAIT_STATE)}}
type WaitStateCellType struct {
}

// WaitStateCell is Cell of {{def(EventEnum:WAIT_STATE)}}
type WaitStateCell *WaitStateCellType

// WaitStateTableType is Constraints for Entry Values
type WaitStateTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*WaitStateTableEntryType `xml:"Entry"`
	*EventType
}

// WaitStateTable is Table of {{def(EventEnum:WAIT_STATE)}}
type WaitStateTable *WaitStateTableType

// WireTableEntryType is Constraints for Cell Values
type WireTableEntryType struct {
	Cell []*WireCellType `xml:"Cell"`
	*EntryType
}

// WireTableEntry is Table Entry of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireTableEntry *WireTableEntryType

// WireCellType is Cell of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireCellType struct {
}

// WireCell is Cell of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireCell *WireCellType

// WireTableType is Constraints for Entry Values
type WireTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*WireTableEntryType `xml:"Entry"`
	*EventType
}

// WireTable is Table of {{block(Composition)}} composed of a string like piece or
//         filament of relatively rigid or flexible material provided in a variety
//         of diameters.
type WireTable *WireTableType

// WorkholdingIdTableEntryType is Constraints for Cell Values
type WorkholdingIdTableEntryType struct {
	Cell []*WorkholdingIdCellType `xml:"Cell"`
	*EntryType
}

// WorkholdingIdTableEntry is Table Entry of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdTableEntry *WorkholdingIdTableEntryType

// WorkholdingIdCellType is Cell of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdCellType struct {
}

// WorkholdingIdCell is Cell of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdCell *WorkholdingIdCellType

// WorkholdingIdTableType is Constraints for Entry Values
type WorkholdingIdTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*WorkholdingIdTableEntryType `xml:"Entry"`
	*EventType
}

// WorkholdingIdTable is Table of {{def(EventEnum:WORKHOLDING_ID)}}
type WorkholdingIdTable *WorkholdingIdTableType

// WorkOffsetTableEntryType is Constraints for Cell Values
type WorkOffsetTableEntryType struct {
	Cell []*WorkOffsetCellType `xml:"Cell"`
	*EntryType
}

// WorkOffsetTableEntry is Table Entry of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetTableEntry *WorkOffsetTableEntryType

// WorkOffsetCellType is Cell of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetCellType struct {
}

// WorkOffsetCell is Cell of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetCell *WorkOffsetCellType

// WorkOffsetTableType is Constraints for Entry Values
type WorkOffsetTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*WorkOffsetTableEntryType `xml:"Entry"`
	*EventType
}

// WorkOffsetTable is Table of {{def(EventEnum:WORK_OFFSET)}}
type WorkOffsetTable *WorkOffsetTableType

// OperatingSystemTableEntryType is Constraints for Cell Values
type OperatingSystemTableEntryType struct {
	Cell []*OperatingSystemCellType `xml:"Cell"`
	*EntryType
}

// OperatingSystemTableEntry is Table Entry of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemTableEntry *OperatingSystemTableEntryType

// OperatingSystemCellType is Cell of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemCellType struct {
}

// OperatingSystemCell is Cell of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemCell *OperatingSystemCellType

// OperatingSystemTableType is Constraints for Entry Values
type OperatingSystemTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*OperatingSystemTableEntryType `xml:"Entry"`
	*EventType
}

// OperatingSystemTable is Table of {{def(EventEnum:OPERATING_SYSTEM)}}
type OperatingSystemTable *OperatingSystemTableType

// FirmwareTableEntryType is Constraints for Cell Values
type FirmwareTableEntryType struct {
	Cell []*FirmwareCellType `xml:"Cell"`
	*EntryType
}

// FirmwareTableEntry is Table Entry of {{def(EventEnum:FIRMWARE)}}
type FirmwareTableEntry *FirmwareTableEntryType

// FirmwareCellType is Cell of {{def(EventEnum:FIRMWARE)}}
type FirmwareCellType struct {
}

// FirmwareCell is Cell of {{def(EventEnum:FIRMWARE)}}
type FirmwareCell *FirmwareCellType

// FirmwareTableType is Constraints for Entry Values
type FirmwareTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*FirmwareTableEntryType `xml:"Entry"`
	*EventType
}

// FirmwareTable is Table of {{def(EventEnum:FIRMWARE)}}
type FirmwareTable *FirmwareTableType

// ApplicationTableEntryType is Constraints for Cell Values
type ApplicationTableEntryType struct {
	Cell []*ApplicationCellType `xml:"Cell"`
	*EntryType
}

// ApplicationTableEntry is Table Entry of {{def(EventEnum:APPLICATION)}}
type ApplicationTableEntry *ApplicationTableEntryType

// ApplicationCellType is Cell of {{def(EventEnum:APPLICATION)}}
type ApplicationCellType struct {
}

// ApplicationCell is Cell of {{def(EventEnum:APPLICATION)}}
type ApplicationCell *ApplicationCellType

// ApplicationTableType is Constraints for Entry Values
type ApplicationTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*ApplicationTableEntryType `xml:"Entry"`
	*EventType
}

// ApplicationTable is Table of {{def(EventEnum:APPLICATION)}}
type ApplicationTable *ApplicationTableType

// LibraryTableEntryType is Constraints for Cell Values
type LibraryTableEntryType struct {
	Cell []*LibraryCellType `xml:"Cell"`
	*EntryType
}

// LibraryTableEntry is Table Entry of {{def(EventEnum:LIBRARY)}}
type LibraryTableEntry *LibraryTableEntryType

// LibraryCellType is Cell of {{def(EventEnum:LIBRARY)}}
type LibraryCellType struct {
}

// LibraryCell is Cell of {{def(EventEnum:LIBRARY)}}
type LibraryCell *LibraryCellType

// LibraryTableType is Constraints for Entry Values
type LibraryTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*LibraryTableEntryType `xml:"Entry"`
	*EventType
}

// LibraryTable is Table of {{def(EventEnum:LIBRARY)}}
type LibraryTable *LibraryTableType

// HardwareTableEntryType is Constraints for Cell Values
type HardwareTableEntryType struct {
	Cell []*HardwareCellType `xml:"Cell"`
	*EntryType
}

// HardwareTableEntry is Table Entry of {{def(EventEnum:HARDWARE)}}
type HardwareTableEntry *HardwareTableEntryType

// HardwareCellType is Cell of {{def(EventEnum:HARDWARE)}}
type HardwareCellType struct {
}

// HardwareCell is Cell of {{def(EventEnum:HARDWARE)}}
type HardwareCell *HardwareCellType

// HardwareTableType is Constraints for Entry Values
type HardwareTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*HardwareTableEntryType `xml:"Entry"`
	*EventType
}

// HardwareTable is Table of {{def(EventEnum:HARDWARE)}}
type HardwareTable *HardwareTableType

// NetworkTableEntryType is Constraints for Cell Values
type NetworkTableEntryType struct {
	Cell []*NetworkCellType `xml:"Cell"`
	*EntryType
}

// NetworkTableEntry is Table Entry of {{def(EventEnum:NETWORK)}}
type NetworkTableEntry *NetworkTableEntryType

// NetworkCellType is Cell of {{def(EventEnum:NETWORK)}}
type NetworkCellType struct {
}

// NetworkCell is Cell of {{def(EventEnum:NETWORK)}}
type NetworkCell *NetworkCellType

// NetworkTableType is Constraints for Entry Values
type NetworkTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*NetworkTableEntryType `xml:"Entry"`
	*EventType
}

// NetworkTable is Table of {{def(EventEnum:NETWORK)}}
type NetworkTable *NetworkTableType

// RotationTableEntryType is Constraints for Cell Values
type RotationTableEntryType struct {
	Cell []*RotationCellType `xml:"Cell"`
	*EntryType
}

// RotationTableEntry is Table Entry of rotations about X, Y, and Z axes are expressed in A, B,
//         and C respectively within a 3-dimensional vector.
type RotationTableEntry *RotationTableEntryType

// RotationCellType is Cell of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationCellType struct {
}

// RotationCell is Cell of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationCell *RotationCellType

// RotationTableType is Constraints for Entry Values
type RotationTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*RotationTableEntryType `xml:"Entry"`
	*EventType
}

// RotationTable is Table of rotations about X, Y, and Z axes are expressed in A, B, and C
//         respectively within a 3-dimensional vector.
type RotationTable *RotationTableType

// TranslationTableEntryType is Constraints for Cell Values
type TranslationTableEntryType struct {
	Cell []*TranslationCellType `xml:"Cell"`
	*EntryType
}

// TranslationTableEntry is Table Entry of translations along X, Y, and Z axes are expressed as x,y,
//         and z respectively within a 3-dimensional vector.
type TranslationTableEntry *TranslationTableEntryType

// TranslationCellType is Cell of translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type TranslationCellType struct {
}

// TranslationCell is Cell of translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type TranslationCell *TranslationCellType

// TranslationTableType is Constraints for Entry Values
type TranslationTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*TranslationTableEntryType `xml:"Entry"`
	*EventType
}

// TranslationTable is Table of translations along X, Y, and Z axes are expressed as x,y, and z
//         respectively within a 3-dimensional vector.
type TranslationTable *TranslationTableType

// ProcessKindIdTableEntryType is Constraints for Cell Values
type ProcessKindIdTableEntryType struct {
	Cell []*ProcessKindIdCellType `xml:"Cell"`
	*EntryType
}

// ProcessKindIdTableEntry is Table Entry of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdTableEntry *ProcessKindIdTableEntryType

// ProcessKindIdCellType is Cell of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdCellType struct {
}

// ProcessKindIdCell is Cell of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdCell *ProcessKindIdCellType

// ProcessKindIdTableType is Constraints for Entry Values
type ProcessKindIdTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*ProcessKindIdTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessKindIdTable is Table of {{def(EventEnum:PROCESS_KIND_ID)}}
type ProcessKindIdTable *ProcessKindIdTableType

// PartStatusTableEntryType is Constraints for Cell Values
type PartStatusTableEntryType struct {
	Cell []*PartStatusCellType `xml:"Cell"`
	*EntryType
}

// PartStatusTableEntry is Table Entry of {{def(EventEnum:PART_STATUS)}} If unique identifier is
//         given, part status is for that individual. If group identifier is given
//         without a unique identifier, then the status is assumed to be for the
//         whole group.
type PartStatusTableEntry *PartStatusTableEntryType

// PartStatusCellType is Cell of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusCellType struct {
}

// PartStatusCell is Cell of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusCell *PartStatusCellType

// PartStatusTableType is Constraints for Entry Values
type PartStatusTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PartStatusTableEntryType `xml:"Entry"`
	*EventType
}

// PartStatusTable is Table of {{def(EventEnum:PART_STATUS)}} If unique identifier is given,
//         part status is for that individual. If group identifier is given without
//         a unique identifier, then the status is assumed to be for the whole
//         group.
type PartStatusTable *PartStatusTableType

// AlarmLimitTableEntryType is Constraints for Cell Values
type AlarmLimitTableEntryType struct {
	Cell []*AlarmLimitCellType `xml:"Cell"`
	*EntryType
}

// AlarmLimitTableEntry is Table Entry of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitTableEntry *AlarmLimitTableEntryType

// AlarmLimitCellType is Cell of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitCellType struct {
}

// AlarmLimitCell is Cell of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitCell *AlarmLimitCellType

// AlarmLimitTableType is Constraints for Entry Values
type AlarmLimitTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AlarmLimitTableEntryType `xml:"Entry"`
	*EventType
}

// AlarmLimitTable is Table of {{def(EventEnum:ALARM_LIMIT)}}
type AlarmLimitTable *AlarmLimitTableType

// ProcessAggregateIdTableEntryType is Constraints for Cell Values
type ProcessAggregateIdTableEntryType struct {
	Cell []*ProcessAggregateIdCellType `xml:"Cell"`
	*EntryType
}

// ProcessAggregateIdTableEntry is Table Entry of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdTableEntry *ProcessAggregateIdTableEntryType

// ProcessAggregateIdCellType is Cell of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdCellType struct {
}

// ProcessAggregateIdCell is Cell of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdCell *ProcessAggregateIdCellType

// ProcessAggregateIdTableType is Constraints for Entry Values
type ProcessAggregateIdTableType struct {
	CountAttr int                                 `xml:"count,attr"`
	Entry     []*ProcessAggregateIdTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessAggregateIdTable is Table of {{def(EventEnum:PROCESS_AGGREGATE_ID)}}
type ProcessAggregateIdTable *ProcessAggregateIdTableType

// PartKindIdTableEntryType is Constraints for Cell Values
type PartKindIdTableEntryType struct {
	Cell []*PartKindIdCellType `xml:"Cell"`
	*EntryType
}

// PartKindIdTableEntry is Table Entry of {{def(EventEnum:PART_KIND_ID)}} If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartKindIdTableEntry *PartKindIdTableEntryType

// PartKindIdCellType is Cell of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindIdCellType struct {
}

// PartKindIdCell is Cell of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindIdCell *PartKindIdCellType

// PartKindIdTableType is Constraints for Entry Values
type PartKindIdTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PartKindIdTableEntryType `xml:"Entry"`
	*EventType
}

// PartKindIdTable is Table of {{def(EventEnum:PART_KIND_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartKindIdTable *PartKindIdTableType

// AdapterURITableEntryType is Constraints for Cell Values
type AdapterURITableEntryType struct {
	Cell []*AdapterURICellType `xml:"Cell"`
	*EntryType
}

// AdapterURITableEntry is Table Entry of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURITableEntry *AdapterURITableEntryType

// AdapterURICellType is Cell of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURICellType struct {
}

// AdapterURICell is Cell of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURICell *AdapterURICellType

// AdapterURITableType is Constraints for Entry Values
type AdapterURITableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AdapterURITableEntryType `xml:"Entry"`
	*EventType
}

// AdapterURITable is Table of {{def(EventEnum:ADAPTER_URI)}}
type AdapterURITable *AdapterURITableType

// DeviceRemovedTableEntryType is Constraints for Cell Values
type DeviceRemovedTableEntryType struct {
	Cell []*DeviceRemovedCellType `xml:"Cell"`
	*EntryType
}

// DeviceRemovedTableEntry is Table Entry of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedTableEntry *DeviceRemovedTableEntryType

// DeviceRemovedCellType is Cell of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedCellType struct {
}

// DeviceRemovedCell is Cell of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedCell *DeviceRemovedCellType

// DeviceRemovedTableType is Constraints for Entry Values
type DeviceRemovedTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*DeviceRemovedTableEntryType `xml:"Entry"`
	*EventType
}

// DeviceRemovedTable is Table of {{def(EventEnum:DEVICE_REMOVED)}}
type DeviceRemovedTable *DeviceRemovedTableType

// DeviceChangedTableEntryType is Constraints for Cell Values
type DeviceChangedTableEntryType struct {
	Cell []*DeviceChangedCellType `xml:"Cell"`
	*EntryType
}

// DeviceChangedTableEntry is Table Entry of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedTableEntry *DeviceChangedTableEntryType

// DeviceChangedCellType is Cell of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedCellType struct {
}

// DeviceChangedCell is Cell of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedCell *DeviceChangedCellType

// DeviceChangedTableType is Constraints for Entry Values
type DeviceChangedTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*DeviceChangedTableEntryType `xml:"Entry"`
	*EventType
}

// DeviceChangedTable is Table of {{def(EventEnum:DEVICE_CHANGED)}}
type DeviceChangedTable *DeviceChangedTableType

// SpecificationLimitTableEntryType is Constraints for Cell Values
type SpecificationLimitTableEntryType struct {
	Cell []*SpecificationLimitCellType `xml:"Cell"`
	*EntryType
}

// SpecificationLimitTableEntry is Table Entry of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitTableEntry *SpecificationLimitTableEntryType

// SpecificationLimitCellType is Cell of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitCellType struct {
}

// SpecificationLimitCell is Cell of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitCell *SpecificationLimitCellType

// SpecificationLimitTableType is Constraints for Entry Values
type SpecificationLimitTableType struct {
	CountAttr int                                 `xml:"count,attr"`
	Entry     []*SpecificationLimitTableEntryType `xml:"Entry"`
	*EventType
}

// SpecificationLimitTable is Table of {{def(EventEnum:SPECIFICATION_LIMIT)}}
type SpecificationLimitTable *SpecificationLimitTableType

// ConnectionStatusTableEntryType is Constraints for Cell Values
type ConnectionStatusTableEntryType struct {
	Cell []*ConnectionStatusCellType `xml:"Cell"`
	*EntryType
}

// ConnectionStatusTableEntry is Table Entry of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusTableEntry *ConnectionStatusTableEntryType

// ConnectionStatusCellType is Cell of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusCellType struct {
}

// ConnectionStatusCell is Cell of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusCell *ConnectionStatusCellType

// ConnectionStatusTableType is Constraints for Entry Values
type ConnectionStatusTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*ConnectionStatusTableEntryType `xml:"Entry"`
	*EventType
}

// ConnectionStatusTable is Table of {{def(EventEnum:CONNECTION_STATUS)}}
type ConnectionStatusTable *ConnectionStatusTableType

// AdapterSoftwareVersionTableEntryType is Constraints for Cell Values
type AdapterSoftwareVersionTableEntryType struct {
	Cell []*AdapterSoftwareVersionCellType `xml:"Cell"`
	*EntryType
}

// AdapterSoftwareVersionTableEntry is Table Entry of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionTableEntry *AdapterSoftwareVersionTableEntryType

// AdapterSoftwareVersionCellType is Cell of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionCellType struct {
}

// AdapterSoftwareVersionCell is Cell of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionCell *AdapterSoftwareVersionCellType

// AdapterSoftwareVersionTableType is Constraints for Entry Values
type AdapterSoftwareVersionTableType struct {
	CountAttr int                                     `xml:"count,attr"`
	Entry     []*AdapterSoftwareVersionTableEntryType `xml:"Entry"`
	*EventType
}

// AdapterSoftwareVersionTable is Table of {{def(EventEnum:ADAPTER_SOFTWARE_VERSION)}}
type AdapterSoftwareVersionTable *AdapterSoftwareVersionTableType

// SensorAttachmentTableEntryType is Constraints for Cell Values
type SensorAttachmentTableEntryType struct {
	Cell []*SensorAttachmentCellType `xml:"Cell"`
	*EntryType
}

// SensorAttachmentTableEntry is Table Entry of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentTableEntry *SensorAttachmentTableEntryType

// SensorAttachmentCellType is Cell of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentCellType struct {
}

// SensorAttachmentCell is Cell of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentCell *SensorAttachmentCellType

// SensorAttachmentTableType is Constraints for Entry Values
type SensorAttachmentTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*SensorAttachmentTableEntryType `xml:"Entry"`
	*EventType
}

// SensorAttachmentTable is Table of {{def(EventEnum:SENSOR_ATTACHMENT)}}
type SensorAttachmentTable *SensorAttachmentTableType

// ControlLimitTableEntryType is Constraints for Cell Values
type ControlLimitTableEntryType struct {
	Cell []*ControlLimitCellType `xml:"Cell"`
	*EntryType
}

// ControlLimitTableEntry is Table Entry of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitTableEntry *ControlLimitTableEntryType

// ControlLimitCellType is Cell of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitCellType struct {
}

// ControlLimitCell is Cell of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitCell *ControlLimitCellType

// ControlLimitTableType is Constraints for Entry Values
type ControlLimitTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*ControlLimitTableEntryType `xml:"Entry"`
	*EventType
}

// ControlLimitTable is Table of {{def(EventEnum:CONTROL_LIMIT)}}
type ControlLimitTable *ControlLimitTableType

// DeviceAddedTableEntryType is Constraints for Cell Values
type DeviceAddedTableEntryType struct {
	Cell []*DeviceAddedCellType `xml:"Cell"`
	*EntryType
}

// DeviceAddedTableEntry is Table Entry of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedTableEntry *DeviceAddedTableEntryType

// DeviceAddedCellType is Cell of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedCellType struct {
}

// DeviceAddedCell is Cell of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedCell *DeviceAddedCellType

// DeviceAddedTableType is Constraints for Entry Values
type DeviceAddedTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*DeviceAddedTableEntryType `xml:"Entry"`
	*EventType
}

// DeviceAddedTable is Table of {{def(EventEnum:DEVICE_ADDED)}}
type DeviceAddedTable *DeviceAddedTableType

// MTConnectVersionTableEntryType is Constraints for Cell Values
type MTConnectVersionTableEntryType struct {
	Cell []*MTConnectVersionCellType `xml:"Cell"`
	*EntryType
}

// MTConnectVersionTableEntry is Table Entry of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionTableEntry *MTConnectVersionTableEntryType

// MTConnectVersionCellType is Cell of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionCellType struct {
}

// MTConnectVersionCell is Cell of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionCell *MTConnectVersionCellType

// MTConnectVersionTableType is Constraints for Entry Values
type MTConnectVersionTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*MTConnectVersionTableEntryType `xml:"Entry"`
	*EventType
}

// MTConnectVersionTable is Table of {{def(EventEnum:MTCONNECT_VERSION)}}
type MTConnectVersionTable *MTConnectVersionTableType

// ProcessOccurrenceIdTableEntryType is Constraints for Cell Values
type ProcessOccurrenceIdTableEntryType struct {
	Cell []*ProcessOccurrenceIdCellType `xml:"Cell"`
	*EntryType
}

// ProcessOccurrenceIdTableEntry is Table Entry of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdTableEntry *ProcessOccurrenceIdTableEntryType

// ProcessOccurrenceIdCellType is Cell of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdCellType struct {
}

// ProcessOccurrenceIdCell is Cell of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdCell *ProcessOccurrenceIdCellType

// ProcessOccurrenceIdTableType is Constraints for Entry Values
type ProcessOccurrenceIdTableType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*ProcessOccurrenceIdTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessOccurrenceIdTable is Table of {{def(EventEnum:PROCESS_OCCURRENCE_ID)}}
type ProcessOccurrenceIdTable *ProcessOccurrenceIdTableType

// PartGroupIdTableEntryType is Constraints for Cell Values
type PartGroupIdTableEntryType struct {
	Cell []*PartGroupIdCellType `xml:"Cell"`
	*EntryType
}

// PartGroupIdTableEntry is Table Entry of {{def(EventEnum:PART_GROUP_ID)}} If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartGroupIdTableEntry *PartGroupIdTableEntryType

// PartGroupIdCellType is Cell of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupIdCellType struct {
}

// PartGroupIdCell is Cell of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupIdCell *PartGroupIdCellType

// PartGroupIdTableType is Constraints for Entry Values
type PartGroupIdTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*PartGroupIdTableEntryType `xml:"Entry"`
	*EventType
}

// PartGroupIdTable is Table of {{def(EventEnum:PART_GROUP_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartGroupIdTable *PartGroupIdTableType

// PartUniqueIdTableEntryType is Constraints for Cell Values
type PartUniqueIdTableEntryType struct {
	Cell []*PartUniqueIdCellType `xml:"Cell"`
	*EntryType
}

// PartUniqueIdTableEntry is Table Entry of {{def(EventEnum:PART_UNIQUE_ID)}} If no
//         {{property(subType)}} is specified, `UUID` is default.
type PartUniqueIdTableEntry *PartUniqueIdTableEntryType

// PartUniqueIdCellType is Cell of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueIdCellType struct {
}

// PartUniqueIdCell is Cell of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}} is
//         specified, `UUID` is default.
type PartUniqueIdCell *PartUniqueIdCellType

// PartUniqueIdTableType is Constraints for Entry Values
type PartUniqueIdTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*PartUniqueIdTableEntryType `xml:"Entry"`
	*EventType
}

// PartUniqueIdTable is Table of {{def(EventEnum:PART_UNIQUE_ID)}} If no {{property(subType)}}
//         is specified, `UUID` is default.
type PartUniqueIdTable *PartUniqueIdTableType

// ActivationCountTableEntryType is Constraints for Cell Values
type ActivationCountTableEntryType struct {
	Cell []*ActivationCountCellType `xml:"Cell"`
	*EntryType
}

// ActivationCountTableEntry is Table Entry of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountTableEntry *ActivationCountTableEntryType

// ActivationCountCellType is Cell of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountCellType struct {
}

// ActivationCountCell is Cell of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountCell *ActivationCountCellType

// ActivationCountTableType is Constraints for Entry Values
type ActivationCountTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*ActivationCountTableEntryType `xml:"Entry"`
	*EventType
}

// ActivationCountTable is Table of {{def(EventEnum:ACTIVATION_COUNT)}}
type ActivationCountTable *ActivationCountTableType

// DeactivationCountTableEntryType is Constraints for Cell Values
type DeactivationCountTableEntryType struct {
	Cell []*DeactivationCountCellType `xml:"Cell"`
	*EntryType
}

// DeactivationCountTableEntry is Table Entry of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountTableEntry *DeactivationCountTableEntryType

// DeactivationCountCellType is Cell of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountCellType struct {
}

// DeactivationCountCell is Cell of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountCell *DeactivationCountCellType

// DeactivationCountTableType is Constraints for Entry Values
type DeactivationCountTableType struct {
	CountAttr int                                `xml:"count,attr"`
	Entry     []*DeactivationCountTableEntryType `xml:"Entry"`
	*EventType
}

// DeactivationCountTable is Table of {{def(EventEnum:DEACTIVATION_COUNT)}}
type DeactivationCountTable *DeactivationCountTableType

// TransferCountTableEntryType is Constraints for Cell Values
type TransferCountTableEntryType struct {
	Cell []*TransferCountCellType `xml:"Cell"`
	*EntryType
}

// TransferCountTableEntry is Table Entry of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountTableEntry *TransferCountTableEntryType

// TransferCountCellType is Cell of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountCellType struct {
}

// TransferCountCell is Cell of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountCell *TransferCountCellType

// TransferCountTableType is Constraints for Entry Values
type TransferCountTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*TransferCountTableEntryType `xml:"Entry"`
	*EventType
}

// TransferCountTable is Table of {{def(EventEnum:TRANSFER_COUNT)}}
type TransferCountTable *TransferCountTableType

// LoadCountTableEntryType is Constraints for Cell Values
type LoadCountTableEntryType struct {
	Cell []*LoadCountCellType `xml:"Cell"`
	*EntryType
}

// LoadCountTableEntry is Table Entry of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountTableEntry *LoadCountTableEntryType

// LoadCountCellType is Cell of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountCellType struct {
}

// LoadCountCell is Cell of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountCell *LoadCountCellType

// LoadCountTableType is Constraints for Entry Values
type LoadCountTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*LoadCountTableEntryType `xml:"Entry"`
	*EventType
}

// LoadCountTable is Table of {{def(EventEnum:LOAD_COUNT)}}
type LoadCountTable *LoadCountTableType

// PartProcessingStateTableEntryType is Constraints for Cell Values
type PartProcessingStateTableEntryType struct {
	Cell []*PartProcessingStateCellType `xml:"Cell"`
	*EntryType
}

// PartProcessingStateTableEntry is Table Entry of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateTableEntry *PartProcessingStateTableEntryType

// PartProcessingStateCellType is Cell of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateCellType struct {
}

// PartProcessingStateCell is Cell of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateCell *PartProcessingStateCellType

// PartProcessingStateTableType is Constraints for Entry Values
type PartProcessingStateTableType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*PartProcessingStateTableEntryType `xml:"Entry"`
	*EventType
}

// PartProcessingStateTable is Table of {{def(EventEnum:PART_PROCESSING_STATE)}}
type PartProcessingStateTable *PartProcessingStateTableType

// ProcessStateTableEntryType is Constraints for Cell Values
type ProcessStateTableEntryType struct {
	Cell []*ProcessStateCellType `xml:"Cell"`
	*EntryType
}

// ProcessStateTableEntry is Table Entry of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateTableEntry *ProcessStateTableEntryType

// ProcessStateCellType is Cell of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateCellType struct {
}

// ProcessStateCell is Cell of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateCell *ProcessStateCellType

// ProcessStateTableType is Constraints for Entry Values
type ProcessStateTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*ProcessStateTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessStateTable is Table of {{def(EventEnum:PROCESS_STATE)}}
type ProcessStateTable *ProcessStateTableType

// ValveStateTableEntryType is Constraints for Cell Values
type ValveStateTableEntryType struct {
	Cell []*ValveStateCellType `xml:"Cell"`
	*EntryType
}

// ValveStateTableEntry is Table Entry of {{def(EventEnum:VALVE_STATE)}}
type ValveStateTableEntry *ValveStateTableEntryType

// ValveStateCellType is Cell of {{def(EventEnum:VALVE_STATE)}}
type ValveStateCellType struct {
}

// ValveStateCell is Cell of {{def(EventEnum:VALVE_STATE)}}
type ValveStateCell *ValveStateCellType

// ValveStateTableType is Constraints for Entry Values
type ValveStateTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ValveStateTableEntryType `xml:"Entry"`
	*EventType
}

// ValveStateTable is Table of {{def(EventEnum:VALVE_STATE)}}
type ValveStateTable *ValveStateTableType

// LockStateTableEntryType is Constraints for Cell Values
type LockStateTableEntryType struct {
	Cell []*LockStateCellType `xml:"Cell"`
	*EntryType
}

// LockStateTableEntry is Table Entry of {{def(EventEnum:LOCK_STATE)}}
type LockStateTableEntry *LockStateTableEntryType

// LockStateCellType is Cell of {{def(EventEnum:LOCK_STATE)}}
type LockStateCellType struct {
}

// LockStateCell is Cell of {{def(EventEnum:LOCK_STATE)}}
type LockStateCell *LockStateCellType

// LockStateTableType is Constraints for Entry Values
type LockStateTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*LockStateTableEntryType `xml:"Entry"`
	*EventType
}

// LockStateTable is Table of {{def(EventEnum:LOCK_STATE)}}
type LockStateTable *LockStateTableType

// UnloadCountTableEntryType is Constraints for Cell Values
type UnloadCountTableEntryType struct {
	Cell []*UnloadCountCellType `xml:"Cell"`
	*EntryType
}

// UnloadCountTableEntry is Table Entry of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountTableEntry *UnloadCountTableEntryType

// UnloadCountCellType is Cell of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountCellType struct {
}

// UnloadCountCell is Cell of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountCell *UnloadCountCellType

// UnloadCountTableType is Constraints for Entry Values
type UnloadCountTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*UnloadCountTableEntryType `xml:"Entry"`
	*EventType
}

// UnloadCountTable is Table of {{def(EventEnum:UNLOAD_COUNT)}}
type UnloadCountTable *UnloadCountTableType

// CycleCountTableEntryType is Constraints for Cell Values
type CycleCountTableEntryType struct {
	Cell []*CycleCountCellType `xml:"Cell"`
	*EntryType
}

// CycleCountTableEntry is Table Entry of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountTableEntry *CycleCountTableEntryType

// CycleCountCellType is Cell of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountCellType struct {
}

// CycleCountCell is Cell of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountCell *CycleCountCellType

// CycleCountTableType is Constraints for Entry Values
type CycleCountTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*CycleCountTableEntryType `xml:"Entry"`
	*EventType
}

// CycleCountTable is Table of {{def(EventEnum:CYCLE_COUNT)}}
type CycleCountTable *CycleCountTableType

// OperatingModeTableEntryType is Constraints for Cell Values
type OperatingModeTableEntryType struct {
	Cell []*OperatingModeCellType `xml:"Cell"`
	*EntryType
}

// OperatingModeTableEntry is Table Entry of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeTableEntry *OperatingModeTableEntryType

// OperatingModeCellType is Cell of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeCellType struct {
}

// OperatingModeCell is Cell of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeCell *OperatingModeCellType

// OperatingModeTableType is Constraints for Entry Values
type OperatingModeTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*OperatingModeTableEntryType `xml:"Entry"`
	*EventType
}

// OperatingModeTable is Table of {{def(EventEnum:OPERATING_MODE)}}
type OperatingModeTable *OperatingModeTableType

// AssetCountTableEntryType is Constraints for Cell Values
type AssetCountTableEntryType struct {
	Cell []*AssetCountCellType `xml:"Cell"`
	*EntryType
}

// AssetCountTableEntry is Table Entry of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountTableEntry *AssetCountTableEntryType

// AssetCountCellType is Cell of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountCellType struct {
}

// AssetCountCell is Cell of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountCell *AssetCountCellType

// AssetCountTableType is Constraints for Entry Values
type AssetCountTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AssetCountTableEntryType `xml:"Entry"`
	*EventType
}

// AssetCountTable is Table of {{def(EventEnum:ASSET_COUNT)}}
type AssetCountTable *AssetCountTableType

// MaintenanceListTableEntryType is Constraints for Cell Values
type MaintenanceListTableEntryType struct {
	Cell []*MaintenanceListCellType `xml:"Cell"`
	*EntryType
}

// MaintenanceListTableEntry is Table Entry of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListTableEntry *MaintenanceListTableEntryType

// MaintenanceListCellType is Cell of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListCellType struct {
}

// MaintenanceListCell is Cell of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListCell *MaintenanceListCellType

// MaintenanceListTableType is Constraints for Entry Values
type MaintenanceListTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*MaintenanceListTableEntryType `xml:"Entry"`
	*EventType
}

// MaintenanceListTable is Table of {{def(EventEnum:MAINTENANCE_LIST)}} If the
//         {{property(INTERVAL)}} {{property(key)}} is not provided, it is assumed
//         `ABSOLUTE`. If the {{property(DIRECTION)}} {{property(key)}} is not
//         provided, it is assumed `UP`. If the {{property(UNITS)}}
//         {{property(key)}} is not provided, it is assumed to be `COUNT`.
type MaintenanceListTable *MaintenanceListTableType

// FixtureIdTableEntryType is Constraints for Cell Values
type FixtureIdTableEntryType struct {
	Cell []*FixtureIdCellType `xml:"Cell"`
	*EntryType
}

// FixtureIdTableEntry is Table Entry of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdTableEntry *FixtureIdTableEntryType

// FixtureIdCellType is Cell of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdCellType struct {
}

// FixtureIdCell is Cell of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdCell *FixtureIdCellType

// FixtureIdTableType is Constraints for Entry Values
type FixtureIdTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*FixtureIdTableEntryType `xml:"Entry"`
	*EventType
}

// FixtureIdTable is Table of {{def(EventEnum:FIXTURE_ID)}}
type FixtureIdTable *FixtureIdTableType

// PartCountTypeTableEntryType is Constraints for Cell Values
type PartCountTypeTableEntryType struct {
	Cell []*PartCountTypeCellType `xml:"Cell"`
	*EntryType
}

// PartCountTypeTableEntry is Table Entry of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeTableEntry *PartCountTypeTableEntryType

// PartCountTypeCellType is Cell of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeCellType struct {
}

// PartCountTypeCell is Cell of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeCell *PartCountTypeCellType

// PartCountTypeTableType is Constraints for Entry Values
type PartCountTypeTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*PartCountTypeTableEntryType `xml:"Entry"`
	*EventType
}

// PartCountTypeTable is Table of {{def(EventEnum:PART_COUNT_TYPE)}}
type PartCountTypeTable *PartCountTypeTableType

// MaterialFeedTableEntryType is Constraints for Cell Values
type MaterialFeedTableEntryType struct {
	Cell []*MaterialFeedCellType `xml:"Cell"`
	*EntryType
}

// MaterialFeedTableEntry is Table Entry of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedTableEntry *MaterialFeedTableEntryType

// MaterialFeedCellType is Cell of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedCellType struct {
}

// MaterialFeedCell is Cell of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedCell *MaterialFeedCellType

// MaterialFeedTableType is Constraints for Entry Values
type MaterialFeedTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*MaterialFeedTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialFeedTable is Table of {{def(InterfaceEventEnum:MATERIAL_FEED)}}
type MaterialFeedTable *MaterialFeedTableType

// MaterialChangeTableEntryType is Constraints for Cell Values
type MaterialChangeTableEntryType struct {
	Cell []*MaterialChangeCellType `xml:"Cell"`
	*EntryType
}

// MaterialChangeTableEntry is Table Entry of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeTableEntry *MaterialChangeTableEntryType

// MaterialChangeCellType is Cell of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeCellType struct {
}

// MaterialChangeCell is Cell of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeCell *MaterialChangeCellType

// MaterialChangeTableType is Constraints for Entry Values
type MaterialChangeTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*MaterialChangeTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialChangeTable is Table of {{def(InterfaceEventEnum:MATERIAL_CHANGE)}}
type MaterialChangeTable *MaterialChangeTableType

// MaterialRetractTableEntryType is Constraints for Cell Values
type MaterialRetractTableEntryType struct {
	Cell []*MaterialRetractCellType `xml:"Cell"`
	*EntryType
}

// MaterialRetractTableEntry is Table Entry of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractTableEntry *MaterialRetractTableEntryType

// MaterialRetractCellType is Cell of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractCellType struct {
}

// MaterialRetractCell is Cell of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractCell *MaterialRetractCellType

// MaterialRetractTableType is Constraints for Entry Values
type MaterialRetractTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*MaterialRetractTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialRetractTable is Table of {{def(InterfaceEventEnum:MATERIAL_RETRACT)}}
type MaterialRetractTable *MaterialRetractTableType

// MaterialLoadTableEntryType is Constraints for Cell Values
type MaterialLoadTableEntryType struct {
	Cell []*MaterialLoadCellType `xml:"Cell"`
	*EntryType
}

// MaterialLoadTableEntry is Table Entry of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadTableEntry *MaterialLoadTableEntryType

// MaterialLoadCellType is Cell of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadCellType struct {
}

// MaterialLoadCell is Cell of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadCell *MaterialLoadCellType

// MaterialLoadTableType is Constraints for Entry Values
type MaterialLoadTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*MaterialLoadTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialLoadTable is Table of {{def(InterfaceEventEnum:MATERIAL_LOAD)}}
type MaterialLoadTable *MaterialLoadTableType

// MaterialUnloadTableEntryType is Constraints for Cell Values
type MaterialUnloadTableEntryType struct {
	Cell []*MaterialUnloadCellType `xml:"Cell"`
	*EntryType
}

// MaterialUnloadTableEntry is Table Entry of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadTableEntry *MaterialUnloadTableEntryType

// MaterialUnloadCellType is Cell of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadCellType struct {
}

// MaterialUnloadCell is Cell of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadCell *MaterialUnloadCellType

// MaterialUnloadTableType is Constraints for Entry Values
type MaterialUnloadTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*MaterialUnloadTableEntryType `xml:"Entry"`
	*EventType
}

// MaterialUnloadTable is Table of {{def(InterfaceEventEnum:MATERIAL_UNLOAD)}}
type MaterialUnloadTable *MaterialUnloadTableType

// OpenChuckTableEntryType is Constraints for Cell Values
type OpenChuckTableEntryType struct {
	Cell []*OpenChuckCellType `xml:"Cell"`
	*EntryType
}

// OpenChuckTableEntry is Table Entry of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckTableEntry *OpenChuckTableEntryType

// OpenChuckCellType is Cell of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckCellType struct {
}

// OpenChuckCell is Cell of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckCell *OpenChuckCellType

// OpenChuckTableType is Constraints for Entry Values
type OpenChuckTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*OpenChuckTableEntryType `xml:"Entry"`
	*EventType
}

// OpenChuckTable is Table of {{def(InterfaceEventEnum:OPEN_CHUCK)}}
type OpenChuckTable *OpenChuckTableType

// OpenDoorTableEntryType is Constraints for Cell Values
type OpenDoorTableEntryType struct {
	Cell []*OpenDoorCellType `xml:"Cell"`
	*EntryType
}

// OpenDoorTableEntry is Table Entry of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorTableEntry *OpenDoorTableEntryType

// OpenDoorCellType is Cell of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorCellType struct {
}

// OpenDoorCell is Cell of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorCell *OpenDoorCellType

// OpenDoorTableType is Constraints for Entry Values
type OpenDoorTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*OpenDoorTableEntryType `xml:"Entry"`
	*EventType
}

// OpenDoorTable is Table of {{def(InterfaceEventEnum:OPEN_DOOR)}}
type OpenDoorTable *OpenDoorTableType

// PartChangeTableEntryType is Constraints for Cell Values
type PartChangeTableEntryType struct {
	Cell []*PartChangeCellType `xml:"Cell"`
	*EntryType
}

// PartChangeTableEntry is Table Entry of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeTableEntry *PartChangeTableEntryType

// PartChangeCellType is Cell of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeCellType struct {
}

// PartChangeCell is Cell of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeCell *PartChangeCellType

// PartChangeTableType is Constraints for Entry Values
type PartChangeTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*PartChangeTableEntryType `xml:"Entry"`
	*EventType
}

// PartChangeTable is Table of {{def(InterfaceEventEnum:PART_CHANGE)}}
type PartChangeTable *PartChangeTableType

// CloseDoorTableEntryType is Constraints for Cell Values
type CloseDoorTableEntryType struct {
	Cell []*CloseDoorCellType `xml:"Cell"`
	*EntryType
}

// CloseDoorTableEntry is Table Entry of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorTableEntry *CloseDoorTableEntryType

// CloseDoorCellType is Cell of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorCellType struct {
}

// CloseDoorCell is Cell of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorCell *CloseDoorCellType

// CloseDoorTableType is Constraints for Entry Values
type CloseDoorTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*CloseDoorTableEntryType `xml:"Entry"`
	*EventType
}

// CloseDoorTable is Table of {{def(InterfaceEventEnum:CLOSE_DOOR)}}
type CloseDoorTable *CloseDoorTableType

// CloseChuckTableEntryType is Constraints for Cell Values
type CloseChuckTableEntryType struct {
	Cell []*CloseChuckCellType `xml:"Cell"`
	*EntryType
}

// CloseChuckTableEntry is Table Entry of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckTableEntry *CloseChuckTableEntryType

// CloseChuckCellType is Cell of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckCellType struct {
}

// CloseChuckCell is Cell of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckCell *CloseChuckCellType

// CloseChuckTableType is Constraints for Entry Values
type CloseChuckTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*CloseChuckTableEntryType `xml:"Entry"`
	*EventType
}

// CloseChuckTable is Table of {{def(InterfaceEventEnum:CLOSE_CHUCK)}}
type CloseChuckTable *CloseChuckTableType

// InterfaceStateTableEntryType is Constraints for Cell Values
type InterfaceStateTableEntryType struct {
	Cell []*InterfaceStateCellType `xml:"Cell"`
	*EntryType
}

// InterfaceStateTableEntry is Table Entry of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateTableEntry *InterfaceStateTableEntryType

// InterfaceStateCellType is Cell of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateCellType struct {
}

// InterfaceStateCell is Cell of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateCell *InterfaceStateCellType

// InterfaceStateTableType is Constraints for Entry Values
type InterfaceStateTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*InterfaceStateTableEntryType `xml:"Entry"`
	*EventType
}

// InterfaceStateTable is Table of {{def(InterfaceEventEnum:INTERFACE_STATE)}} When the
//         {{block(InterfaceState)}} is `DISABLED`, the state of all data items
//         that are specific for the {{term(interaction model)}} associated with
//         that {{block(Interface)}} **MUST** be set to `NOT_READY`.
type InterfaceStateTable *InterfaceStateTableType

// AccelerationTableEntryType is Constraints for Cell Values
type AccelerationTableEntryType struct {
	Cell []*AccelerationCellType `xml:"Cell"`
	*EntryType
}

// AccelerationTableEntry is Table Entry of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTableEntry *AccelerationTableEntryType

// AccelerationCellType is Cell of {{def(SampleEnum:ACCELERATION)}}
type AccelerationCellType struct {
}

// AccelerationCell is Cell of {{def(SampleEnum:ACCELERATION)}}
type AccelerationCell *AccelerationCellType

// AccelerationTableType is Constraints for Entry Values
type AccelerationTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AccelerationTableEntryType `xml:"Entry"`
	*EventType
}

// AccelerationTable is Table of {{def(SampleEnum:ACCELERATION)}}
type AccelerationTable *AccelerationTableType

// AccumulatedTimeTableEntryType is Constraints for Cell Values
type AccumulatedTimeTableEntryType struct {
	Cell []*AccumulatedTimeCellType `xml:"Cell"`
	*EntryType
}

// AccumulatedTimeTableEntry is Table Entry of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTableEntry *AccumulatedTimeTableEntryType

// AccumulatedTimeCellType is Cell of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeCellType struct {
}

// AccumulatedTimeCell is Cell of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeCell *AccumulatedTimeCellType

// AccumulatedTimeTableType is Constraints for Entry Values
type AccumulatedTimeTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*AccumulatedTimeTableEntryType `xml:"Entry"`
	*EventType
}

// AccumulatedTimeTable is Table of {{def(SampleEnum:ACCUMULATED_TIME)}}
type AccumulatedTimeTable *AccumulatedTimeTableType

// AmperageTableEntryType is Constraints for Cell Values
type AmperageTableEntryType struct {
	Cell []*AmperageCellType `xml:"Cell"`
	*EntryType
}

// AmperageTableEntry is Table Entry of {{def(SampleEnum:AMPERAGE)}}
type AmperageTableEntry *AmperageTableEntryType

// AmperageCellType is Cell of {{def(SampleEnum:AMPERAGE)}}
type AmperageCellType struct {
}

// AmperageCell is Cell of {{def(SampleEnum:AMPERAGE)}}
type AmperageCell *AmperageCellType

// AmperageTableType is Constraints for Entry Values
type AmperageTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*AmperageTableEntryType `xml:"Entry"`
	*EventType
}

// AmperageTable is Table of {{def(SampleEnum:AMPERAGE)}}
type AmperageTable *AmperageTableType

// AngleTableEntryType is Constraints for Cell Values
type AngleTableEntryType struct {
	Cell []*AngleCellType `xml:"Cell"`
	*EntryType
}

// AngleTableEntry is Table Entry of {{def(SampleEnum:ANGLE)}}
type AngleTableEntry *AngleTableEntryType

// AngleCellType is Cell of {{def(SampleEnum:ANGLE)}}
type AngleCellType struct {
}

// AngleCell is Cell of {{def(SampleEnum:ANGLE)}}
type AngleCell *AngleCellType

// AngleTableType is Constraints for Entry Values
type AngleTableType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*AngleTableEntryType `xml:"Entry"`
	*EventType
}

// AngleTable is Table of {{def(SampleEnum:ANGLE)}}
type AngleTable *AngleTableType

// AngularAccelerationTableEntryType is Constraints for Cell Values
type AngularAccelerationTableEntryType struct {
	Cell []*AngularAccelerationCellType `xml:"Cell"`
	*EntryType
}

// AngularAccelerationTableEntry is Table Entry of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTableEntry *AngularAccelerationTableEntryType

// AngularAccelerationCellType is Cell of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationCellType struct {
}

// AngularAccelerationCell is Cell of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationCell *AngularAccelerationCellType

// AngularAccelerationTableType is Constraints for Entry Values
type AngularAccelerationTableType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*AngularAccelerationTableEntryType `xml:"Entry"`
	*EventType
}

// AngularAccelerationTable is Table of {{def(SampleEnum:ANGULAR_ACCELERATION)}}
type AngularAccelerationTable *AngularAccelerationTableType

// AngularVelocityTableEntryType is Constraints for Cell Values
type AngularVelocityTableEntryType struct {
	Cell []*AngularVelocityCellType `xml:"Cell"`
	*EntryType
}

// AngularVelocityTableEntry is Table Entry of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTableEntry *AngularVelocityTableEntryType

// AngularVelocityCellType is Cell of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityCellType struct {
}

// AngularVelocityCell is Cell of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityCell *AngularVelocityCellType

// AngularVelocityTableType is Constraints for Entry Values
type AngularVelocityTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*AngularVelocityTableEntryType `xml:"Entry"`
	*EventType
}

// AngularVelocityTable is Table of {{def(SampleEnum:ANGULAR_VELOCITY)}}
type AngularVelocityTable *AngularVelocityTableType

// AxisFeedrateTableEntryType is Constraints for Cell Values
type AxisFeedrateTableEntryType struct {
	Cell []*AxisFeedrateCellType `xml:"Cell"`
	*EntryType
}

// AxisFeedrateTableEntry is Table Entry of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTableEntry *AxisFeedrateTableEntryType

// AxisFeedrateCellType is Cell of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateCellType struct {
}

// AxisFeedrateCell is Cell of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateCell *AxisFeedrateCellType

// AxisFeedrateTableType is Constraints for Entry Values
type AxisFeedrateTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*AxisFeedrateTableEntryType `xml:"Entry"`
	*EventType
}

// AxisFeedrateTable is Table of {{def(SampleEnum:AXIS_FEEDRATE)}}
type AxisFeedrateTable *AxisFeedrateTableType

// CapacityFluidTableEntryType is Constraints for Cell Values
type CapacityFluidTableEntryType struct {
	Cell []*CapacityFluidCellType `xml:"Cell"`
	*EntryType
}

// CapacityFluidTableEntry is Table Entry of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTableEntry *CapacityFluidTableEntryType

// CapacityFluidCellType is Cell of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidCellType struct {
}

// CapacityFluidCell is Cell of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidCell *CapacityFluidCellType

// CapacityFluidTableType is Constraints for Entry Values
type CapacityFluidTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*CapacityFluidTableEntryType `xml:"Entry"`
	*EventType
}

// CapacityFluidTable is Table of {{def(SampleEnum:CAPACITY_FLUID)}}
type CapacityFluidTable *CapacityFluidTableType

// CapacitySpatialTableEntryType is Constraints for Cell Values
type CapacitySpatialTableEntryType struct {
	Cell []*CapacitySpatialCellType `xml:"Cell"`
	*EntryType
}

// CapacitySpatialTableEntry is Table Entry of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTableEntry *CapacitySpatialTableEntryType

// CapacitySpatialCellType is Cell of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialCellType struct {
}

// CapacitySpatialCell is Cell of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialCell *CapacitySpatialCellType

// CapacitySpatialTableType is Constraints for Entry Values
type CapacitySpatialTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*CapacitySpatialTableEntryType `xml:"Entry"`
	*EventType
}

// CapacitySpatialTable is Table of {{def(SampleEnum:CAPACITY_SPATIAL)}}
type CapacitySpatialTable *CapacitySpatialTableType

// ConcentrationTableEntryType is Constraints for Cell Values
type ConcentrationTableEntryType struct {
	Cell []*ConcentrationCellType `xml:"Cell"`
	*EntryType
}

// ConcentrationTableEntry is Table Entry of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTableEntry *ConcentrationTableEntryType

// ConcentrationCellType is Cell of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationCellType struct {
}

// ConcentrationCell is Cell of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationCell *ConcentrationCellType

// ConcentrationTableType is Constraints for Entry Values
type ConcentrationTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*ConcentrationTableEntryType `xml:"Entry"`
	*EventType
}

// ConcentrationTable is Table of {{def(SampleEnum:CONCENTRATION)}}
type ConcentrationTable *ConcentrationTableType

// ConductivityTableEntryType is Constraints for Cell Values
type ConductivityTableEntryType struct {
	Cell []*ConductivityCellType `xml:"Cell"`
	*EntryType
}

// ConductivityTableEntry is Table Entry of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTableEntry *ConductivityTableEntryType

// ConductivityCellType is Cell of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityCellType struct {
}

// ConductivityCell is Cell of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityCell *ConductivityCellType

// ConductivityTableType is Constraints for Entry Values
type ConductivityTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*ConductivityTableEntryType `xml:"Entry"`
	*EventType
}

// ConductivityTable is Table of {{def(SampleEnum:CONDUCTIVITY)}}
type ConductivityTable *ConductivityTableType

// CuttingSpeedTableEntryType is Constraints for Cell Values
type CuttingSpeedTableEntryType struct {
	Cell []*CuttingSpeedCellType `xml:"Cell"`
	*EntryType
}

// CuttingSpeedTableEntry is Table Entry of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTableEntry *CuttingSpeedTableEntryType

// CuttingSpeedCellType is Cell of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedCellType struct {
}

// CuttingSpeedCell is Cell of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedCell *CuttingSpeedCellType

// CuttingSpeedTableType is Constraints for Entry Values
type CuttingSpeedTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*CuttingSpeedTableEntryType `xml:"Entry"`
	*EventType
}

// CuttingSpeedTable is Table of {{def(SampleEnum:CUTTING_SPEED)}}
type CuttingSpeedTable *CuttingSpeedTableType

// DensityTableEntryType is Constraints for Cell Values
type DensityTableEntryType struct {
	Cell []*DensityCellType `xml:"Cell"`
	*EntryType
}

// DensityTableEntry is Table Entry of {{def(SampleEnum:DENSITY)}}
type DensityTableEntry *DensityTableEntryType

// DensityCellType is Cell of {{def(SampleEnum:DENSITY)}}
type DensityCellType struct {
}

// DensityCell is Cell of {{def(SampleEnum:DENSITY)}}
type DensityCell *DensityCellType

// DensityTableType is Constraints for Entry Values
type DensityTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*DensityTableEntryType `xml:"Entry"`
	*EventType
}

// DensityTable is Table of {{def(SampleEnum:DENSITY)}}
type DensityTable *DensityTableType

// DepositionAccelerationVolumetricTableEntryType is Constraints for Cell Values
type DepositionAccelerationVolumetricTableEntryType struct {
	Cell []*DepositionAccelerationVolumetricCellType `xml:"Cell"`
	*EntryType
}

// DepositionAccelerationVolumetricTableEntry is Table Entry of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTableEntry *DepositionAccelerationVolumetricTableEntryType

// DepositionAccelerationVolumetricCellType is Cell of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricCellType struct {
}

// DepositionAccelerationVolumetricCell is Cell of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricCell *DepositionAccelerationVolumetricCellType

// DepositionAccelerationVolumetricTableType is Constraints for Entry Values
type DepositionAccelerationVolumetricTableType struct {
	CountAttr int                                               `xml:"count,attr"`
	Entry     []*DepositionAccelerationVolumetricTableEntryType `xml:"Entry"`
	*EventType
}

// DepositionAccelerationVolumetricTable is Table of {{def(SampleEnum:DEPOSITION_ACCELERATION_VOLUMETRIC)}}
type DepositionAccelerationVolumetricTable *DepositionAccelerationVolumetricTableType

// DepositionDensityTableEntryType is Constraints for Cell Values
type DepositionDensityTableEntryType struct {
	Cell []*DepositionDensityCellType `xml:"Cell"`
	*EntryType
}

// DepositionDensityTableEntry is Table Entry of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTableEntry *DepositionDensityTableEntryType

// DepositionDensityCellType is Cell of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityCellType struct {
}

// DepositionDensityCell is Cell of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityCell *DepositionDensityCellType

// DepositionDensityTableType is Constraints for Entry Values
type DepositionDensityTableType struct {
	CountAttr int                                `xml:"count,attr"`
	Entry     []*DepositionDensityTableEntryType `xml:"Entry"`
	*EventType
}

// DepositionDensityTable is Table of {{def(SampleEnum:DEPOSITION_DENSITY)}}
type DepositionDensityTable *DepositionDensityTableType

// DepositionMassTableEntryType is Constraints for Cell Values
type DepositionMassTableEntryType struct {
	Cell []*DepositionMassCellType `xml:"Cell"`
	*EntryType
}

// DepositionMassTableEntry is Table Entry of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTableEntry *DepositionMassTableEntryType

// DepositionMassCellType is Cell of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassCellType struct {
}

// DepositionMassCell is Cell of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassCell *DepositionMassCellType

// DepositionMassTableType is Constraints for Entry Values
type DepositionMassTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*DepositionMassTableEntryType `xml:"Entry"`
	*EventType
}

// DepositionMassTable is Table of {{def(SampleEnum:DEPOSITION_MASS)}}
type DepositionMassTable *DepositionMassTableType

// DepositionRateVolumetricTableEntryType is Constraints for Cell Values
type DepositionRateVolumetricTableEntryType struct {
	Cell []*DepositionRateVolumetricCellType `xml:"Cell"`
	*EntryType
}

// DepositionRateVolumetricTableEntry is Table Entry of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTableEntry *DepositionRateVolumetricTableEntryType

// DepositionRateVolumetricCellType is Cell of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricCellType struct {
}

// DepositionRateVolumetricCell is Cell of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricCell *DepositionRateVolumetricCellType

// DepositionRateVolumetricTableType is Constraints for Entry Values
type DepositionRateVolumetricTableType struct {
	CountAttr int                                       `xml:"count,attr"`
	Entry     []*DepositionRateVolumetricTableEntryType `xml:"Entry"`
	*EventType
}

// DepositionRateVolumetricTable is Table of {{def(SampleEnum:DEPOSITION_RATE_VOLUMETRIC)}}
type DepositionRateVolumetricTable *DepositionRateVolumetricTableType

// DepositionVolumeTableEntryType is Constraints for Cell Values
type DepositionVolumeTableEntryType struct {
	Cell []*DepositionVolumeCellType `xml:"Cell"`
	*EntryType
}

// DepositionVolumeTableEntry is Table Entry of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTableEntry *DepositionVolumeTableEntryType

// DepositionVolumeCellType is Cell of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeCellType struct {
}

// DepositionVolumeCell is Cell of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeCell *DepositionVolumeCellType

// DepositionVolumeTableType is Constraints for Entry Values
type DepositionVolumeTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*DepositionVolumeTableEntryType `xml:"Entry"`
	*EventType
}

// DepositionVolumeTable is Table of {{def(SampleEnum:DEPOSITION_VOLUME)}}
type DepositionVolumeTable *DepositionVolumeTableType

// DisplacementTableEntryType is Constraints for Cell Values
type DisplacementTableEntryType struct {
	Cell []*DisplacementCellType `xml:"Cell"`
	*EntryType
}

// DisplacementTableEntry is Table Entry of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTableEntry *DisplacementTableEntryType

// DisplacementCellType is Cell of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementCellType struct {
}

// DisplacementCell is Cell of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementCell *DisplacementCellType

// DisplacementTableType is Constraints for Entry Values
type DisplacementTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*DisplacementTableEntryType `xml:"Entry"`
	*EventType
}

// DisplacementTable is Table of {{def(SampleEnum:DISPLACEMENT)}}
type DisplacementTable *DisplacementTableType

// ElectricalEnergyTableEntryType is Constraints for Cell Values
type ElectricalEnergyTableEntryType struct {
	Cell []*ElectricalEnergyCellType `xml:"Cell"`
	*EntryType
}

// ElectricalEnergyTableEntry is Table Entry of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTableEntry *ElectricalEnergyTableEntryType

// ElectricalEnergyCellType is Cell of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyCellType struct {
}

// ElectricalEnergyCell is Cell of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyCell *ElectricalEnergyCellType

// ElectricalEnergyTableType is Constraints for Entry Values
type ElectricalEnergyTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*ElectricalEnergyTableEntryType `xml:"Entry"`
	*EventType
}

// ElectricalEnergyTable is Table of {{def(SampleEnum:ELECTRICAL_ENERGY)}}
type ElectricalEnergyTable *ElectricalEnergyTableType

// EquipmentTimerTableEntryType is Constraints for Cell Values
type EquipmentTimerTableEntryType struct {
	Cell []*EquipmentTimerCellType `xml:"Cell"`
	*EntryType
}

// EquipmentTimerTableEntry is Table Entry of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTableEntry *EquipmentTimerTableEntryType

// EquipmentTimerCellType is Cell of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerCellType struct {
}

// EquipmentTimerCell is Cell of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerCell *EquipmentTimerCellType

// EquipmentTimerTableType is Constraints for Entry Values
type EquipmentTimerTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*EquipmentTimerTableEntryType `xml:"Entry"`
	*EventType
}

// EquipmentTimerTable is Table of {{def(SampleEnum:EQUIPMENT_TIMER)}}
type EquipmentTimerTable *EquipmentTimerTableType

// FillLevelTableEntryType is Constraints for Cell Values
type FillLevelTableEntryType struct {
	Cell []*FillLevelCellType `xml:"Cell"`
	*EntryType
}

// FillLevelTableEntry is Table Entry of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTableEntry *FillLevelTableEntryType

// FillLevelCellType is Cell of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelCellType struct {
}

// FillLevelCell is Cell of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelCell *FillLevelCellType

// FillLevelTableType is Constraints for Entry Values
type FillLevelTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*FillLevelTableEntryType `xml:"Entry"`
	*EventType
}

// FillLevelTable is Table of {{def(SampleEnum:FILL_LEVEL)}}
type FillLevelTable *FillLevelTableType

// FlowTableEntryType is Constraints for Cell Values
type FlowTableEntryType struct {
	Cell []*FlowCellType `xml:"Cell"`
	*EntryType
}

// FlowTableEntry is Table Entry of {{def(SampleEnum:FLOW)}}
type FlowTableEntry *FlowTableEntryType

// FlowCellType is Cell of {{def(SampleEnum:FLOW)}}
type FlowCellType struct {
}

// FlowCell is Cell of {{def(SampleEnum:FLOW)}}
type FlowCell *FlowCellType

// FlowTableType is Constraints for Entry Values
type FlowTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*FlowTableEntryType `xml:"Entry"`
	*EventType
}

// FlowTable is Table of {{def(SampleEnum:FLOW)}}
type FlowTable *FlowTableType

// FrequencyTableEntryType is Constraints for Cell Values
type FrequencyTableEntryType struct {
	Cell []*FrequencyCellType `xml:"Cell"`
	*EntryType
}

// FrequencyTableEntry is Table Entry of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTableEntry *FrequencyTableEntryType

// FrequencyCellType is Cell of {{def(SampleEnum:FREQUENCY)}}
type FrequencyCellType struct {
}

// FrequencyCell is Cell of {{def(SampleEnum:FREQUENCY)}}
type FrequencyCell *FrequencyCellType

// FrequencyTableType is Constraints for Entry Values
type FrequencyTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*FrequencyTableEntryType `xml:"Entry"`
	*EventType
}

// FrequencyTable is Table of {{def(SampleEnum:FREQUENCY)}}
type FrequencyTable *FrequencyTableType

// GlobalPositionTableEntryType is Constraints for Cell Values
type GlobalPositionTableEntryType struct {
	Cell []*GlobalPositionCellType `xml:"Cell"`
	*EntryType
}

// GlobalPositionTableEntry is Table Entry of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTableEntry *GlobalPositionTableEntryType

// GlobalPositionCellType is Cell of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionCellType struct {
}

// GlobalPositionCell is Cell of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionCell *GlobalPositionCellType

// GlobalPositionTableType is Constraints for Entry Values
type GlobalPositionTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*GlobalPositionTableEntryType `xml:"Entry"`
	*EventType
}

// GlobalPositionTable is Table of {{def(SampleEnum:GLOBAL_POSITION)}}
type GlobalPositionTable *GlobalPositionTableType

// LengthTableEntryType is Constraints for Cell Values
type LengthTableEntryType struct {
	Cell []*LengthCellType `xml:"Cell"`
	*EntryType
}

// LengthTableEntry is Table Entry of {{def(SampleEnum:LENGTH)}}
type LengthTableEntry *LengthTableEntryType

// LengthCellType is Cell of {{def(SampleEnum:LENGTH)}}
type LengthCellType struct {
}

// LengthCell is Cell of {{def(SampleEnum:LENGTH)}}
type LengthCell *LengthCellType

// LengthTableType is Constraints for Entry Values
type LengthTableType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*LengthTableEntryType `xml:"Entry"`
	*EventType
}

// LengthTable is Table of {{def(SampleEnum:LENGTH)}}
type LengthTable *LengthTableType

// LevelTableEntryType is Constraints for Cell Values
type LevelTableEntryType struct {
	Cell []*LevelCellType `xml:"Cell"`
	*EntryType
}

// LevelTableEntry is Table Entry of {{def(SampleEnum:LEVEL)}}
type LevelTableEntry *LevelTableEntryType

// LevelCellType is Cell of {{def(SampleEnum:LEVEL)}}
type LevelCellType struct {
}

// LevelCell is Cell of {{def(SampleEnum:LEVEL)}}
type LevelCell *LevelCellType

// LevelTableType is Constraints for Entry Values
type LevelTableType struct {
	CountAttr int                    `xml:"count,attr"`
	Entry     []*LevelTableEntryType `xml:"Entry"`
	*EventType
}

// LevelTable is Table of {{def(SampleEnum:LEVEL)}}
type LevelTable *LevelTableType

// LinearForceTableEntryType is Constraints for Cell Values
type LinearForceTableEntryType struct {
	Cell []*LinearForceCellType `xml:"Cell"`
	*EntryType
}

// LinearForceTableEntry is Table Entry of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTableEntry *LinearForceTableEntryType

// LinearForceCellType is Cell of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceCellType struct {
}

// LinearForceCell is Cell of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceCell *LinearForceCellType

// LinearForceTableType is Constraints for Entry Values
type LinearForceTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*LinearForceTableEntryType `xml:"Entry"`
	*EventType
}

// LinearForceTable is Table of {{def(SampleEnum:LINEAR_FORCE)}}
type LinearForceTable *LinearForceTableType

// LoadTableEntryType is Constraints for Cell Values
type LoadTableEntryType struct {
	Cell []*LoadCellType `xml:"Cell"`
	*EntryType
}

// LoadTableEntry is Table Entry of {{def(SampleEnum:LOAD)}}
type LoadTableEntry *LoadTableEntryType

// LoadCellType is Cell of {{def(SampleEnum:LOAD)}}
type LoadCellType struct {
}

// LoadCell is Cell of {{def(SampleEnum:LOAD)}}
type LoadCell *LoadCellType

// LoadTableType is Constraints for Entry Values
type LoadTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*LoadTableEntryType `xml:"Entry"`
	*EventType
}

// LoadTable is Table of {{def(SampleEnum:LOAD)}}
type LoadTable *LoadTableType

// MassTableEntryType is Constraints for Cell Values
type MassTableEntryType struct {
	Cell []*MassCellType `xml:"Cell"`
	*EntryType
}

// MassTableEntry is Table Entry of {{def(SampleEnum:MASS)}}
type MassTableEntry *MassTableEntryType

// MassCellType is Cell of {{def(SampleEnum:MASS)}}
type MassCellType struct {
}

// MassCell is Cell of {{def(SampleEnum:MASS)}}
type MassCell *MassCellType

// MassTableType is Constraints for Entry Values
type MassTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*MassTableEntryType `xml:"Entry"`
	*EventType
}

// MassTable is Table of {{def(SampleEnum:MASS)}}
type MassTable *MassTableType

// PathFeedrateTableEntryType is Constraints for Cell Values
type PathFeedrateTableEntryType struct {
	Cell []*PathFeedrateCellType `xml:"Cell"`
	*EntryType
}

// PathFeedrateTableEntry is Table Entry of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTableEntry *PathFeedrateTableEntryType

// PathFeedrateCellType is Cell of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateCellType struct {
}

// PathFeedrateCell is Cell of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateCell *PathFeedrateCellType

// PathFeedrateTableType is Constraints for Entry Values
type PathFeedrateTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*PathFeedrateTableEntryType `xml:"Entry"`
	*EventType
}

// PathFeedrateTable is Table of {{def(SampleEnum:PATH_FEEDRATE)}}
type PathFeedrateTable *PathFeedrateTableType

// PathFeedratePerRevolutionTableEntryType is Constraints for Cell Values
type PathFeedratePerRevolutionTableEntryType struct {
	Cell []*PathFeedratePerRevolutionCellType `xml:"Cell"`
	*EntryType
}

// PathFeedratePerRevolutionTableEntry is Table Entry of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTableEntry *PathFeedratePerRevolutionTableEntryType

// PathFeedratePerRevolutionCellType is Cell of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionCellType struct {
}

// PathFeedratePerRevolutionCell is Cell of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionCell *PathFeedratePerRevolutionCellType

// PathFeedratePerRevolutionTableType is Constraints for Entry Values
type PathFeedratePerRevolutionTableType struct {
	CountAttr int                                        `xml:"count,attr"`
	Entry     []*PathFeedratePerRevolutionTableEntryType `xml:"Entry"`
	*EventType
}

// PathFeedratePerRevolutionTable is Table of {{def(SampleEnum:PATH_FEEDRATE_PER_REVOLUTION)}}
type PathFeedratePerRevolutionTable *PathFeedratePerRevolutionTableType

// PathPositionTableEntryType is Constraints for Cell Values
type PathPositionTableEntryType struct {
	Cell []*PathPositionCellType `xml:"Cell"`
	*EntryType
}

// PathPositionTableEntry is Table Entry of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionTableEntry *PathPositionTableEntryType

// PathPositionCellType is Cell of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionCellType struct {
}

// PathPositionCell is Cell of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionCell *PathPositionCellType

// PathPositionTableType is Constraints for Entry Values
type PathPositionTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*PathPositionTableEntryType `xml:"Entry"`
	*EventType
}

// PathPositionTable is Table of {{def(SampleEnum:PATH_POSITION)}}
type PathPositionTable *PathPositionTableType

// PHTableEntryType is Constraints for Cell Values
type PHTableEntryType struct {
	Cell []*PHCellType `xml:"Cell"`
	*EntryType
}

// PHTableEntry is Table Entry of {{def(SampleEnum:PH)}}
type PHTableEntry *PHTableEntryType

// PHCellType is Cell of {{def(SampleEnum:PH)}}
type PHCellType struct {
}

// PHCell is Cell of {{def(SampleEnum:PH)}}
type PHCell *PHCellType

// PHTableType is Constraints for Entry Values
type PHTableType struct {
	CountAttr int                 `xml:"count,attr"`
	Entry     []*PHTableEntryType `xml:"Entry"`
	*EventType
}

// PHTable is Table of {{def(SampleEnum:PH)}}
type PHTable *PHTableType

// PositionTableEntryType is Constraints for Cell Values
type PositionTableEntryType struct {
	Cell []*PositionCellType `xml:"Cell"`
	*EntryType
}

// PositionTableEntry is Table Entry of {{def(SampleEnum:POSITION)}}
type PositionTableEntry *PositionTableEntryType

// PositionCellType is Cell of {{def(SampleEnum:POSITION)}}
type PositionCellType struct {
}

// PositionCell is Cell of {{def(SampleEnum:POSITION)}}
type PositionCell *PositionCellType

// PositionTableType is Constraints for Entry Values
type PositionTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*PositionTableEntryType `xml:"Entry"`
	*EventType
}

// PositionTable is Table of {{def(SampleEnum:POSITION)}}
type PositionTable *PositionTableType

// PowerFactorTableEntryType is Constraints for Cell Values
type PowerFactorTableEntryType struct {
	Cell []*PowerFactorCellType `xml:"Cell"`
	*EntryType
}

// PowerFactorTableEntry is Table Entry of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTableEntry *PowerFactorTableEntryType

// PowerFactorCellType is Cell of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorCellType struct {
}

// PowerFactorCell is Cell of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorCell *PowerFactorCellType

// PowerFactorTableType is Constraints for Entry Values
type PowerFactorTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*PowerFactorTableEntryType `xml:"Entry"`
	*EventType
}

// PowerFactorTable is Table of {{def(SampleEnum:POWER_FACTOR)}}
type PowerFactorTable *PowerFactorTableType

// PressureTableEntryType is Constraints for Cell Values
type PressureTableEntryType struct {
	Cell []*PressureCellType `xml:"Cell"`
	*EntryType
}

// PressureTableEntry is Table Entry of Description
type PressureTableEntry *PressureTableEntryType

// PressureCellType is Cell of Description
type PressureCellType struct {
}

// PressureCell is Cell of Description
type PressureCell *PressureCellType

// PressureTableType is Constraints for Entry Values
type PressureTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*PressureTableEntryType `xml:"Entry"`
	*EventType
}

// PressureTable is Table of Description
type PressureTable *PressureTableType

// ProcessTimerTableEntryType is Constraints for Cell Values
type ProcessTimerTableEntryType struct {
	Cell []*ProcessTimerCellType `xml:"Cell"`
	*EntryType
}

// ProcessTimerTableEntry is Table Entry of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTableEntry *ProcessTimerTableEntryType

// ProcessTimerCellType is Cell of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerCellType struct {
}

// ProcessTimerCell is Cell of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerCell *ProcessTimerCellType

// ProcessTimerTableType is Constraints for Entry Values
type ProcessTimerTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*ProcessTimerTableEntryType `xml:"Entry"`
	*EventType
}

// ProcessTimerTable is Table of {{def(SampleEnum:PROCESS_TIMER)}}
type ProcessTimerTable *ProcessTimerTableType

// ResistanceTableEntryType is Constraints for Cell Values
type ResistanceTableEntryType struct {
	Cell []*ResistanceCellType `xml:"Cell"`
	*EntryType
}

// ResistanceTableEntry is Table Entry of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTableEntry *ResistanceTableEntryType

// ResistanceCellType is Cell of {{def(SampleEnum:RESISTANCE)}}
type ResistanceCellType struct {
}

// ResistanceCell is Cell of {{def(SampleEnum:RESISTANCE)}}
type ResistanceCell *ResistanceCellType

// ResistanceTableType is Constraints for Entry Values
type ResistanceTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ResistanceTableEntryType `xml:"Entry"`
	*EventType
}

// ResistanceTable is Table of {{def(SampleEnum:RESISTANCE)}}
type ResistanceTable *ResistanceTableType

// RotaryVelocityTableEntryType is Constraints for Cell Values
type RotaryVelocityTableEntryType struct {
	Cell []*RotaryVelocityCellType `xml:"Cell"`
	*EntryType
}

// RotaryVelocityTableEntry is Table Entry of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTableEntry *RotaryVelocityTableEntryType

// RotaryVelocityCellType is Cell of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityCellType struct {
}

// RotaryVelocityCell is Cell of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityCell *RotaryVelocityCellType

// RotaryVelocityTableType is Constraints for Entry Values
type RotaryVelocityTableType struct {
	CountAttr int                             `xml:"count,attr"`
	Entry     []*RotaryVelocityTableEntryType `xml:"Entry"`
	*EventType
}

// RotaryVelocityTable is Table of {{def(SampleEnum:ROTARY_VELOCITY)}}
type RotaryVelocityTable *RotaryVelocityTableType

// SoundLevelTableEntryType is Constraints for Cell Values
type SoundLevelTableEntryType struct {
	Cell []*SoundLevelCellType `xml:"Cell"`
	*EntryType
}

// SoundLevelTableEntry is Table Entry of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTableEntry *SoundLevelTableEntryType

// SoundLevelCellType is Cell of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelCellType struct {
}

// SoundLevelCell is Cell of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelCell *SoundLevelCellType

// SoundLevelTableType is Constraints for Entry Values
type SoundLevelTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*SoundLevelTableEntryType `xml:"Entry"`
	*EventType
}

// SoundLevelTable is Table of {{def(SampleEnum:SOUND_LEVEL)}}
type SoundLevelTable *SoundLevelTableType

// SpindleSpeedTableEntryType is Constraints for Cell Values
type SpindleSpeedTableEntryType struct {
	Cell []*SpindleSpeedCellType `xml:"Cell"`
	*EntryType
}

// SpindleSpeedTableEntry is Table Entry of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTableEntry *SpindleSpeedTableEntryType

// SpindleSpeedCellType is Cell of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedCellType struct {
}

// SpindleSpeedCell is Cell of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedCell *SpindleSpeedCellType

// SpindleSpeedTableType is Constraints for Entry Values
type SpindleSpeedTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*SpindleSpeedTableEntryType `xml:"Entry"`
	*EventType
}

// SpindleSpeedTable is Table of {{def(SampleEnum:SPINDLE_SPEED)}}
type SpindleSpeedTable *SpindleSpeedTableType

// StrainTableEntryType is Constraints for Cell Values
type StrainTableEntryType struct {
	Cell []*StrainCellType `xml:"Cell"`
	*EntryType
}

// StrainTableEntry is Table Entry of {{def(SampleEnum:STRAIN)}}
type StrainTableEntry *StrainTableEntryType

// StrainCellType is Cell of {{def(SampleEnum:STRAIN)}}
type StrainCellType struct {
}

// StrainCell is Cell of {{def(SampleEnum:STRAIN)}}
type StrainCell *StrainCellType

// StrainTableType is Constraints for Entry Values
type StrainTableType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*StrainTableEntryType `xml:"Entry"`
	*EventType
}

// StrainTable is Table of {{def(SampleEnum:STRAIN)}}
type StrainTable *StrainTableType

// TemperatureTableEntryType is Constraints for Cell Values
type TemperatureTableEntryType struct {
	Cell []*TemperatureCellType `xml:"Cell"`
	*EntryType
}

// TemperatureTableEntry is Table Entry of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTableEntry *TemperatureTableEntryType

// TemperatureCellType is Cell of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureCellType struct {
}

// TemperatureCell is Cell of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureCell *TemperatureCellType

// TemperatureTableType is Constraints for Entry Values
type TemperatureTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*TemperatureTableEntryType `xml:"Entry"`
	*EventType
}

// TemperatureTable is Table of {{def(SampleEnum:TEMPERATURE)}}
type TemperatureTable *TemperatureTableType

// TensionTableEntryType is Constraints for Cell Values
type TensionTableEntryType struct {
	Cell []*TensionCellType `xml:"Cell"`
	*EntryType
}

// TensionTableEntry is Table Entry of {{def(SampleEnum:TENSION)}}
type TensionTableEntry *TensionTableEntryType

// TensionCellType is Cell of {{def(SampleEnum:TENSION)}}
type TensionCellType struct {
}

// TensionCell is Cell of {{def(SampleEnum:TENSION)}}
type TensionCell *TensionCellType

// TensionTableType is Constraints for Entry Values
type TensionTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*TensionTableEntryType `xml:"Entry"`
	*EventType
}

// TensionTable is Table of {{def(SampleEnum:TENSION)}}
type TensionTable *TensionTableType

// TiltTableEntryType is Constraints for Cell Values
type TiltTableEntryType struct {
	Cell []*TiltCellType `xml:"Cell"`
	*EntryType
}

// TiltTableEntry is Table Entry of {{def(SampleEnum:TILT)}}
type TiltTableEntry *TiltTableEntryType

// TiltCellType is Cell of {{def(SampleEnum:TILT)}}
type TiltCellType struct {
}

// TiltCell is Cell of {{def(SampleEnum:TILT)}}
type TiltCell *TiltCellType

// TiltTableType is Constraints for Entry Values
type TiltTableType struct {
	CountAttr int                   `xml:"count,attr"`
	Entry     []*TiltTableEntryType `xml:"Entry"`
	*EventType
}

// TiltTable is Table of {{def(SampleEnum:TILT)}}
type TiltTable *TiltTableType

// TorqueTableEntryType is Constraints for Cell Values
type TorqueTableEntryType struct {
	Cell []*TorqueCellType `xml:"Cell"`
	*EntryType
}

// TorqueTableEntry is Table Entry of {{def(SampleEnum:TORQUE)}}
type TorqueTableEntry *TorqueTableEntryType

// TorqueCellType is Cell of {{def(SampleEnum:TORQUE)}}
type TorqueCellType struct {
}

// TorqueCell is Cell of {{def(SampleEnum:TORQUE)}}
type TorqueCell *TorqueCellType

// TorqueTableType is Constraints for Entry Values
type TorqueTableType struct {
	CountAttr int                     `xml:"count,attr"`
	Entry     []*TorqueTableEntryType `xml:"Entry"`
	*EventType
}

// TorqueTable is Table of {{def(SampleEnum:TORQUE)}}
type TorqueTable *TorqueTableType

// VelocityTableEntryType is Constraints for Cell Values
type VelocityTableEntryType struct {
	Cell []*VelocityCellType `xml:"Cell"`
	*EntryType
}

// VelocityTableEntry is Table Entry of {{def(SampleEnum:VELOCITY)}}
type VelocityTableEntry *VelocityTableEntryType

// VelocityCellType is Cell of {{def(SampleEnum:VELOCITY)}}
type VelocityCellType struct {
}

// VelocityCell is Cell of {{def(SampleEnum:VELOCITY)}}
type VelocityCell *VelocityCellType

// VelocityTableType is Constraints for Entry Values
type VelocityTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*VelocityTableEntryType `xml:"Entry"`
	*EventType
}

// VelocityTable is Table of {{def(SampleEnum:VELOCITY)}}
type VelocityTable *VelocityTableType

// ViscosityTableEntryType is Constraints for Cell Values
type ViscosityTableEntryType struct {
	Cell []*ViscosityCellType `xml:"Cell"`
	*EntryType
}

// ViscosityTableEntry is Table Entry of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTableEntry *ViscosityTableEntryType

// ViscosityCellType is Cell of {{def(SampleEnum:VISCOSITY)}}
type ViscosityCellType struct {
}

// ViscosityCell is Cell of {{def(SampleEnum:VISCOSITY)}}
type ViscosityCell *ViscosityCellType

// ViscosityTableType is Constraints for Entry Values
type ViscosityTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*ViscosityTableEntryType `xml:"Entry"`
	*EventType
}

// ViscosityTable is Table of {{def(SampleEnum:VISCOSITY)}}
type ViscosityTable *ViscosityTableType

// VoltageTableEntryType is Constraints for Cell Values
type VoltageTableEntryType struct {
	Cell []*VoltageCellType `xml:"Cell"`
	*EntryType
}

// VoltageTableEntry is Table Entry of {{def(SampleEnum:VOLTAGE)}}
type VoltageTableEntry *VoltageTableEntryType

// VoltageCellType is Cell of {{def(SampleEnum:VOLTAGE)}}
type VoltageCellType struct {
}

// VoltageCell is Cell of {{def(SampleEnum:VOLTAGE)}}
type VoltageCell *VoltageCellType

// VoltageTableType is Constraints for Entry Values
type VoltageTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*VoltageTableEntryType `xml:"Entry"`
	*EventType
}

// VoltageTable is Table of {{def(SampleEnum:VOLTAGE)}}
type VoltageTable *VoltageTableType

// VoltAmpereTableEntryType is Constraints for Cell Values
type VoltAmpereTableEntryType struct {
	Cell []*VoltAmpereCellType `xml:"Cell"`
	*EntryType
}

// VoltAmpereTableEntry is Table Entry of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTableEntry *VoltAmpereTableEntryType

// VoltAmpereCellType is Cell of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereCellType struct {
}

// VoltAmpereCell is Cell of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereCell *VoltAmpereCellType

// VoltAmpereTableType is Constraints for Entry Values
type VoltAmpereTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*VoltAmpereTableEntryType `xml:"Entry"`
	*EventType
}

// VoltAmpereTable is Table of {{def(SampleEnum:VOLT_AMPERE)}}
type VoltAmpereTable *VoltAmpereTableType

// VoltAmpereReactiveTableEntryType is Constraints for Cell Values
type VoltAmpereReactiveTableEntryType struct {
	Cell []*VoltAmpereReactiveCellType `xml:"Cell"`
	*EntryType
}

// VoltAmpereReactiveTableEntry is Table Entry of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTableEntry *VoltAmpereReactiveTableEntryType

// VoltAmpereReactiveCellType is Cell of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveCellType struct {
}

// VoltAmpereReactiveCell is Cell of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveCell *VoltAmpereReactiveCellType

// VoltAmpereReactiveTableType is Constraints for Entry Values
type VoltAmpereReactiveTableType struct {
	CountAttr int                                 `xml:"count,attr"`
	Entry     []*VoltAmpereReactiveTableEntryType `xml:"Entry"`
	*EventType
}

// VoltAmpereReactiveTable is Table of {{def(SampleEnum:VOLT_AMPERE_REACTIVE)}}
type VoltAmpereReactiveTable *VoltAmpereReactiveTableType

// VolumeFluidTableEntryType is Constraints for Cell Values
type VolumeFluidTableEntryType struct {
	Cell []*VolumeFluidCellType `xml:"Cell"`
	*EntryType
}

// VolumeFluidTableEntry is Table Entry of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTableEntry *VolumeFluidTableEntryType

// VolumeFluidCellType is Cell of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidCellType struct {
}

// VolumeFluidCell is Cell of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidCell *VolumeFluidCellType

// VolumeFluidTableType is Constraints for Entry Values
type VolumeFluidTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*VolumeFluidTableEntryType `xml:"Entry"`
	*EventType
}

// VolumeFluidTable is Table of {{def(SampleEnum:VOLUME_FLUID)}}
type VolumeFluidTable *VolumeFluidTableType

// VolumeSpatialTableEntryType is Constraints for Cell Values
type VolumeSpatialTableEntryType struct {
	Cell []*VolumeSpatialCellType `xml:"Cell"`
	*EntryType
}

// VolumeSpatialTableEntry is Table Entry of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTableEntry *VolumeSpatialTableEntryType

// VolumeSpatialCellType is Cell of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialCellType struct {
}

// VolumeSpatialCell is Cell of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialCell *VolumeSpatialCellType

// VolumeSpatialTableType is Constraints for Entry Values
type VolumeSpatialTableType struct {
	CountAttr int                            `xml:"count,attr"`
	Entry     []*VolumeSpatialTableEntryType `xml:"Entry"`
	*EventType
}

// VolumeSpatialTable is Table of {{def(SampleEnum:VOLUME_SPATIAL)}}
type VolumeSpatialTable *VolumeSpatialTableType

// WattageTableEntryType is Constraints for Cell Values
type WattageTableEntryType struct {
	Cell []*WattageCellType `xml:"Cell"`
	*EntryType
}

// WattageTableEntry is Table Entry of {{def(SampleEnum:WATTAGE)}}
type WattageTableEntry *WattageTableEntryType

// WattageCellType is Cell of {{def(SampleEnum:WATTAGE)}}
type WattageCellType struct {
}

// WattageCell is Cell of {{def(SampleEnum:WATTAGE)}}
type WattageCell *WattageCellType

// WattageTableType is Constraints for Entry Values
type WattageTableType struct {
	CountAttr int                      `xml:"count,attr"`
	Entry     []*WattageTableEntryType `xml:"Entry"`
	*EventType
}

// WattageTable is Table of {{def(SampleEnum:WATTAGE)}}
type WattageTable *WattageTableType

// AmperageDCTableEntryType is Constraints for Cell Values
type AmperageDCTableEntryType struct {
	Cell []*AmperageDCCellType `xml:"Cell"`
	*EntryType
}

// AmperageDCTableEntry is Table Entry of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTableEntry *AmperageDCTableEntryType

// AmperageDCCellType is Cell of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCCellType struct {
}

// AmperageDCCell is Cell of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCCell *AmperageDCCellType

// AmperageDCTableType is Constraints for Entry Values
type AmperageDCTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AmperageDCTableEntryType `xml:"Entry"`
	*EventType
}

// AmperageDCTable is Table of {{def(SampleEnum:AMPERAGE_DC)}}
type AmperageDCTable *AmperageDCTableType

// AmperageACTableEntryType is Constraints for Cell Values
type AmperageACTableEntryType struct {
	Cell []*AmperageACCellType `xml:"Cell"`
	*EntryType
}

// AmperageACTableEntry is Table Entry of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTableEntry *AmperageACTableEntryType

// AmperageACCellType is Cell of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACCellType struct {
}

// AmperageACCell is Cell of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACCell *AmperageACCellType

// AmperageACTableType is Constraints for Entry Values
type AmperageACTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*AmperageACTableEntryType `xml:"Entry"`
	*EventType
}

// AmperageACTable is Table of {{def(SampleEnum:AMPERAGE_AC)}}
type AmperageACTable *AmperageACTableType

// VoltageACTableEntryType is Constraints for Cell Values
type VoltageACTableEntryType struct {
	Cell []*VoltageACCellType `xml:"Cell"`
	*EntryType
}

// VoltageACTableEntry is Table Entry of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTableEntry *VoltageACTableEntryType

// VoltageACCellType is Cell of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACCellType struct {
}

// VoltageACCell is Cell of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACCell *VoltageACCellType

// VoltageACTableType is Constraints for Entry Values
type VoltageACTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*VoltageACTableEntryType `xml:"Entry"`
	*EventType
}

// VoltageACTable is Table of {{def(SampleEnum:VOLTAGE_AC)}}
type VoltageACTable *VoltageACTableType

// VoltageDCTableEntryType is Constraints for Cell Values
type VoltageDCTableEntryType struct {
	Cell []*VoltageDCCellType `xml:"Cell"`
	*EntryType
}

// VoltageDCTableEntry is Table Entry of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTableEntry *VoltageDCTableEntryType

// VoltageDCCellType is Cell of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCCellType struct {
}

// VoltageDCCell is Cell of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCCell *VoltageDCCellType

// VoltageDCTableType is Constraints for Entry Values
type VoltageDCTableType struct {
	CountAttr int                        `xml:"count,attr"`
	Entry     []*VoltageDCTableEntryType `xml:"Entry"`
	*EventType
}

// VoltageDCTable is Table of {{def(SampleEnum:VOLTAGE_DC)}}
type VoltageDCTable *VoltageDCTableType

// XDimensionTableEntryType is Constraints for Cell Values
type XDimensionTableEntryType struct {
	Cell []*XDimensionCellType `xml:"Cell"`
	*EntryType
}

// XDimensionTableEntry is Table Entry of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTableEntry *XDimensionTableEntryType

// XDimensionCellType is Cell of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionCellType struct {
}

// XDimensionCell is Cell of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionCell *XDimensionCellType

// XDimensionTableType is Constraints for Entry Values
type XDimensionTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*XDimensionTableEntryType `xml:"Entry"`
	*EventType
}

// XDimensionTable is Table of {{def(SampleEnum:X_DIMENSION)}}
type XDimensionTable *XDimensionTableType

// YDimensionTableEntryType is Constraints for Cell Values
type YDimensionTableEntryType struct {
	Cell []*YDimensionCellType `xml:"Cell"`
	*EntryType
}

// YDimensionTableEntry is Table Entry of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTableEntry *YDimensionTableEntryType

// YDimensionCellType is Cell of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionCellType struct {
}

// YDimensionCell is Cell of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionCell *YDimensionCellType

// YDimensionTableType is Constraints for Entry Values
type YDimensionTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*YDimensionTableEntryType `xml:"Entry"`
	*EventType
}

// YDimensionTable is Table of {{def(SampleEnum:Y_DIMENSION)}}
type YDimensionTable *YDimensionTableType

// ZDimensionTableEntryType is Constraints for Cell Values
type ZDimensionTableEntryType struct {
	Cell []*ZDimensionCellType `xml:"Cell"`
	*EntryType
}

// ZDimensionTableEntry is Table Entry of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTableEntry *ZDimensionTableEntryType

// ZDimensionCellType is Cell of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionCellType struct {
}

// ZDimensionCell is Cell of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionCell *ZDimensionCellType

// ZDimensionTableType is Constraints for Entry Values
type ZDimensionTableType struct {
	CountAttr int                         `xml:"count,attr"`
	Entry     []*ZDimensionTableEntryType `xml:"Entry"`
	*EventType
}

// ZDimensionTable is Table of {{def(SampleEnum:Z_DIMENSION)}}
type ZDimensionTable *ZDimensionTableType

// DiameterTableEntryType is Constraints for Cell Values
type DiameterTableEntryType struct {
	Cell []*DiameterCellType `xml:"Cell"`
	*EntryType
}

// DiameterTableEntry is Table Entry of {{def(SampleEnum:DIAMETER)}}
type DiameterTableEntry *DiameterTableEntryType

// DiameterCellType is Cell of {{def(SampleEnum:DIAMETER)}}
type DiameterCellType struct {
}

// DiameterCell is Cell of {{def(SampleEnum:DIAMETER)}}
type DiameterCell *DiameterCellType

// DiameterTableType is Constraints for Entry Values
type DiameterTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*DiameterTableEntryType `xml:"Entry"`
	*EventType
}

// DiameterTable is Table of {{def(SampleEnum:DIAMETER)}}
type DiameterTable *DiameterTableType

// OrientationTableEntryType is Constraints for Cell Values
type OrientationTableEntryType struct {
	Cell []*OrientationCellType `xml:"Cell"`
	*EntryType
}

// OrientationTableEntry is Table Entry of {{def(SampleEnum:ORIENTATION)}}
type OrientationTableEntry *OrientationTableEntryType

// OrientationCellType is Cell of {{def(SampleEnum:ORIENTATION)}}
type OrientationCellType struct {
}

// OrientationCell is Cell of {{def(SampleEnum:ORIENTATION)}}
type OrientationCell *OrientationCellType

// OrientationTableType is Constraints for Entry Values
type OrientationTableType struct {
	CountAttr int                          `xml:"count,attr"`
	Entry     []*OrientationTableEntryType `xml:"Entry"`
	*EventType
}

// OrientationTable is Table of {{def(SampleEnum:ORIENTATION)}}
type OrientationTable *OrientationTableType

// HumidityRelativeTableEntryType is Constraints for Cell Values
type HumidityRelativeTableEntryType struct {
	Cell []*HumidityRelativeCellType `xml:"Cell"`
	*EntryType
}

// HumidityRelativeTableEntry is Table Entry of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTableEntry *HumidityRelativeTableEntryType

// HumidityRelativeCellType is Cell of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeCellType struct {
}

// HumidityRelativeCell is Cell of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeCell *HumidityRelativeCellType

// HumidityRelativeTableType is Constraints for Entry Values
type HumidityRelativeTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*HumidityRelativeTableEntryType `xml:"Entry"`
	*EventType
}

// HumidityRelativeTable is Table of {{def(SampleEnum:HUMIDITY_RELATIVE)}}
type HumidityRelativeTable *HumidityRelativeTableType

// HumidityAbsoluteTableEntryType is Constraints for Cell Values
type HumidityAbsoluteTableEntryType struct {
	Cell []*HumidityAbsoluteCellType `xml:"Cell"`
	*EntryType
}

// HumidityAbsoluteTableEntry is Table Entry of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTableEntry *HumidityAbsoluteTableEntryType

// HumidityAbsoluteCellType is Cell of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteCellType struct {
}

// HumidityAbsoluteCell is Cell of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteCell *HumidityAbsoluteCellType

// HumidityAbsoluteTableType is Constraints for Entry Values
type HumidityAbsoluteTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*HumidityAbsoluteTableEntryType `xml:"Entry"`
	*EventType
}

// HumidityAbsoluteTable is Table of {{def(SampleEnum:HUMIDITY_ABSOLUTE)}}
type HumidityAbsoluteTable *HumidityAbsoluteTableType

// HumiditySpecificTableEntryType is Constraints for Cell Values
type HumiditySpecificTableEntryType struct {
	Cell []*HumiditySpecificCellType `xml:"Cell"`
	*EntryType
}

// HumiditySpecificTableEntry is Table Entry of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTableEntry *HumiditySpecificTableEntryType

// HumiditySpecificCellType is Cell of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificCellType struct {
}

// HumiditySpecificCell is Cell of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificCell *HumiditySpecificCellType

// HumiditySpecificTableType is Constraints for Entry Values
type HumiditySpecificTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*HumiditySpecificTableEntryType `xml:"Entry"`
	*EventType
}

// HumiditySpecificTable is Table of {{def(SampleEnum:HUMIDITY_SPECIFIC)}}
type HumiditySpecificTable *HumiditySpecificTableType

// PressurizationRateTableEntryType is Constraints for Cell Values
type PressurizationRateTableEntryType struct {
	Cell []*PressurizationRateCellType `xml:"Cell"`
	*EntryType
}

// PressurizationRateTableEntry is Table Entry of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTableEntry *PressurizationRateTableEntryType

// PressurizationRateCellType is Cell of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateCellType struct {
}

// PressurizationRateCell is Cell of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateCell *PressurizationRateCellType

// PressurizationRateTableType is Constraints for Entry Values
type PressurizationRateTableType struct {
	CountAttr int                                 `xml:"count,attr"`
	Entry     []*PressurizationRateTableEntryType `xml:"Entry"`
	*EventType
}

// PressurizationRateTable is Table of {{def(SampleEnum:PRESSURIZATION_RATE)}}
type PressurizationRateTable *PressurizationRateTableType

// DecelerationTableEntryType is Constraints for Cell Values
type DecelerationTableEntryType struct {
	Cell []*DecelerationCellType `xml:"Cell"`
	*EntryType
}

// DecelerationTableEntry is Table Entry of {{def(SampleEnum:DECELERATION)}}
type DecelerationTableEntry *DecelerationTableEntryType

// DecelerationCellType is Cell of {{def(SampleEnum:DECELERATION)}}
type DecelerationCellType struct {
}

// DecelerationCell is Cell of {{def(SampleEnum:DECELERATION)}}
type DecelerationCell *DecelerationCellType

// DecelerationTableType is Constraints for Entry Values
type DecelerationTableType struct {
	CountAttr int                           `xml:"count,attr"`
	Entry     []*DecelerationTableEntryType `xml:"Entry"`
	*EventType
}

// DecelerationTable is Table of {{def(SampleEnum:DECELERATION)}}
type DecelerationTable *DecelerationTableType

// AssetUpdateRateTableEntryType is Constraints for Cell Values
type AssetUpdateRateTableEntryType struct {
	Cell []*AssetUpdateRateCellType `xml:"Cell"`
	*EntryType
}

// AssetUpdateRateTableEntry is Table Entry of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTableEntry *AssetUpdateRateTableEntryType

// AssetUpdateRateCellType is Cell of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateCellType struct {
}

// AssetUpdateRateCell is Cell of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateCell *AssetUpdateRateCellType

// AssetUpdateRateTableType is Constraints for Entry Values
type AssetUpdateRateTableType struct {
	CountAttr int                              `xml:"count,attr"`
	Entry     []*AssetUpdateRateTableEntryType `xml:"Entry"`
	*EventType
}

// AssetUpdateRateTable is Table of {{def(SampleEnum:ASSET_UPDATE_RATE)}}
type AssetUpdateRateTable *AssetUpdateRateTableType

// AngularDecelerationTableEntryType is Constraints for Cell Values
type AngularDecelerationTableEntryType struct {
	Cell []*AngularDecelerationCellType `xml:"Cell"`
	*EntryType
}

// AngularDecelerationTableEntry is Table Entry of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTableEntry *AngularDecelerationTableEntryType

// AngularDecelerationCellType is Cell of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationCellType struct {
}

// AngularDecelerationCell is Cell of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationCell *AngularDecelerationCellType

// AngularDecelerationTableType is Constraints for Entry Values
type AngularDecelerationTableType struct {
	CountAttr int                                  `xml:"count,attr"`
	Entry     []*AngularDecelerationTableEntryType `xml:"Entry"`
	*EventType
}

// AngularDecelerationTable is Table of {{def(SampleEnum:ANGULAR_DECELERATION)}}
type AngularDecelerationTable *AngularDecelerationTableType

// ObservationUpdateRateTableEntryType is Constraints for Cell Values
type ObservationUpdateRateTableEntryType struct {
	Cell []*ObservationUpdateRateCellType `xml:"Cell"`
	*EntryType
}

// ObservationUpdateRateTableEntry is Table Entry of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTableEntry *ObservationUpdateRateTableEntryType

// ObservationUpdateRateCellType is Cell of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateCellType struct {
}

// ObservationUpdateRateCell is Cell of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateCell *ObservationUpdateRateCellType

// ObservationUpdateRateTableType is Constraints for Entry Values
type ObservationUpdateRateTableType struct {
	CountAttr int                                    `xml:"count,attr"`
	Entry     []*ObservationUpdateRateTableEntryType `xml:"Entry"`
	*EventType
}

// ObservationUpdateRateTable is Table of {{def(SampleEnum:OBSERVATION_UPDATE_RATE)}}
type ObservationUpdateRateTable *ObservationUpdateRateTableType

// PressureAbsoluteTableEntryType is Constraints for Cell Values
type PressureAbsoluteTableEntryType struct {
	Cell []*PressureAbsoluteCellType `xml:"Cell"`
	*EntryType
}

// PressureAbsoluteTableEntry is Table Entry of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTableEntry *PressureAbsoluteTableEntryType

// PressureAbsoluteCellType is Cell of The force per unit area measured relative to a vacuum.
type PressureAbsoluteCellType struct {
}

// PressureAbsoluteCell is Cell of The force per unit area measured relative to a vacuum.
type PressureAbsoluteCell *PressureAbsoluteCellType

// PressureAbsoluteTableType is Constraints for Entry Values
type PressureAbsoluteTableType struct {
	CountAttr int                               `xml:"count,attr"`
	Entry     []*PressureAbsoluteTableEntryType `xml:"Entry"`
	*EventType
}

// PressureAbsoluteTable is Table of The force per unit area measured relative to a vacuum.
type PressureAbsoluteTable *PressureAbsoluteTableType

// OpennessTableEntryType is Constraints for Cell Values
type OpennessTableEntryType struct {
	Cell []*OpennessCellType `xml:"Cell"`
	*EntryType
}

// OpennessTableEntry is Table Entry of {{def(SampleEnum:OPENNESS)}}
type OpennessTableEntry *OpennessTableEntryType

// OpennessCellType is Cell of {{def(SampleEnum:OPENNESS)}}
type OpennessCellType struct {
}

// OpennessCell is Cell of {{def(SampleEnum:OPENNESS)}}
type OpennessCell *OpennessCellType

// OpennessTableType is Constraints for Entry Values
type OpennessTableType struct {
	CountAttr int                       `xml:"count,attr"`
	Entry     []*OpennessTableEntryType `xml:"Entry"`
	*EventType
}

// OpennessTable is Table of {{def(SampleEnum:OPENNESS)}}
type OpennessTable *OpennessTableType

// ConditionDescriptionType is The description of the Condition
type ConditionDescriptionType string

// NativeSeverityType is The device's severity
type NativeSeverityType string

// QualifierType is The value is too low
type QualifierType string

// ConditionType is Description
type ConditionType struct {
	ObservationType    *ObservationType
	TypeAttr           *DataItemEnumType       `xml:"type,attr"`
	NativeCodeAttr     string                  `xml:"nativeCode,attr,omitempty"`
	NativeSeverityAttr string                  `xml:"nativeSeverity,attr,omitempty"`
	QualifierAttr      string                  `xml:"qualifier,attr,omitempty"`
	StatisticAttr      *DataItemStatisticsType `xml:"statistic,attr,omitempty"`
	Value              string                  `xml:",chardata"`
}

// Condition is Description
type Condition *ConditionType

// UnavailableType is The conditon can not be determined.
type UnavailableType struct {
	*ConditionType
}

// Unavailable is The conditon can not be determined.
type Unavailable *UnavailableType

// NormalType is {{term(condition state)}} that indicates operation within specified
//         limits.
type NormalType struct {
	*ConditionType
}

// Normal is {{term(condition state)}} that indicates operation within specified
//         limits.
type Normal *NormalType

// WarningType is {{term(condition state)}} that requires concern and supervision and may
//         become hazardous if no action is taken.
type WarningType struct {
	*ConditionType
}

// Warning is {{term(condition state)}} that requires concern and supervision and may
//         become hazardous if no action is taken.
type Warning *WarningType

// FaultType is {{term(condition state)}} that requires intervention to continue
//         operation to function properly.
type FaultType struct {
	*ConditionType
}

// Fault is {{term(condition state)}} that requires intervention to continue
//         operation to function properly.
type Fault *FaultType

// NativeNotifcationCodeType is DEPRECATED: An Notifcation code as defined by the component
type NativeNotifcationCodeType string

// NotifcationCodeType is Another Notifcation type
type NotifcationCodeType string

// AlarmStateType is The notification has been cleared
type AlarmStateType string

// SeverityType is This notification is for information purposes only
type SeverityType string

// AlarmType is {{def(EventEnum:ALARM)}}
type AlarmType struct {
	CodeAttr       string `xml:"code,attr"`
	SeverityAttr   string `xml:"severity,attr,omitempty"`
	StateAttr      string `xml:"state,attr,omitempty"`
	NativeCodeAttr string `xml:"nativeCode,attr"`
	*StringEventType
}

// Alarm is {{def(EventEnum:ALARM)}}
type Alarm *AlarmType

// InterfaceEventValuesType is The interface action has failed
type InterfaceEventValuesType string

// InterfaceEventType is An abstract interface event
type InterfaceEventType struct {
}

// InterfaceEvent is An abstract interface event
type InterfaceEvent *InterfaceEventType

// InterfaceStatesType is The interface is disabled
type InterfaceStatesType string
